[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js":"16","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js":"17","/Users/deeptej/Desktop/react/texx/client/src/components/Event.js":"18","/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js":"19","/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js":"20","/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js":"21","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js":"22","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js":"23","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js":"24","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js":"25","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js":"26","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js":"27","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js":"28","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js":"29"},{"size":730,"mtime":1618602690657,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1617957038337,"results":"32","hashOfConfig":"31"},{"size":21250,"mtime":1621185696720,"results":"33","hashOfConfig":"31"},{"size":24147,"mtime":1621156291618,"results":"34","hashOfConfig":"31"},{"size":2369,"mtime":1620888626106,"results":"35","hashOfConfig":"31"},{"size":951,"mtime":1618496473804,"results":"36","hashOfConfig":"31"},{"size":1160,"mtime":1619024742823,"results":"37","hashOfConfig":"31"},{"size":6313,"mtime":1620800413495,"results":"38","hashOfConfig":"31"},{"size":415,"mtime":1619523406365,"results":"39","hashOfConfig":"31"},{"size":1942,"mtime":1619251378679,"results":"40","hashOfConfig":"31"},{"size":7121,"mtime":1620817673395,"results":"41","hashOfConfig":"31"},{"size":1464,"mtime":1620400342393,"results":"42","hashOfConfig":"31"},{"size":1717,"mtime":1620587018650,"results":"43","hashOfConfig":"31"},{"size":462,"mtime":1619431538338,"results":"44","hashOfConfig":"31"},{"size":639,"mtime":1619430467561,"results":"45","hashOfConfig":"31"},{"size":1657,"mtime":1619024760560,"results":"46","hashOfConfig":"31"},{"size":1814,"mtime":1619538390365,"results":"47","hashOfConfig":"31"},{"size":4045,"mtime":1620459681667,"results":"48","hashOfConfig":"31"},{"size":8229,"mtime":1621185802786,"results":"49","hashOfConfig":"31"},{"size":961,"mtime":1620716950919,"results":"50","hashOfConfig":"31"},{"size":8026,"mtime":1620832680110,"results":"51","hashOfConfig":"31"},{"size":5994,"mtime":1620236179812,"results":"52","hashOfConfig":"31"},{"size":1719,"mtime":1620566280215,"results":"53","hashOfConfig":"31"},{"size":1729,"mtime":1620889179559,"results":"54","hashOfConfig":"31"},{"size":2576,"mtime":1620896876110,"results":"55","hashOfConfig":"31"},{"size":1491,"mtime":1621163863527,"results":"56","hashOfConfig":"31"},{"size":5594,"mtime":1621163932391,"results":"57","hashOfConfig":"31"},{"size":6452,"mtime":1620832644361,"results":"58","hashOfConfig":"31"},{"size":3919,"mtime":1621172142866,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1caugyp",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"62"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"62"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"62"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"62"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],["140","141"],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["142","143","144","145","146"],"import React, {useState,useEffect, Suspense,lazy} from 'react';\nimport './App.css';\nimport {auth, DataBase} from './firebase'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Modal from '@material-ui/core/Modal'\nimport { Avatar, Backdrop, Button, Input, Paper } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport Sidebar from './Sidebar';\nimport Widgets from './Widgets';\nimport { BrowserRouter as Router ,Link} from 'react-router-dom'\nimport {Route,Switch} from 'react-router-dom'\nimport Chat from './chat/Chat'\nimport {useStateValue} from '../contexts/StateProvider';\nimport { actionTypes } from '../contexts/reducer';\nimport firebase from 'firebase/app'\nimport SendMessage from './chat/SendMessage'\n//Get material-ui icons\nimport SearchIcon from '@material-ui/icons/Search';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BottomNavigationMobile from './BottomNavigationMobile'\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport EditIcon from '@material-ui/icons/Edit';\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport EventIcon from '@material-ui/icons/Event';\nimport WidgetsChat from './chat/WidgetsChat'\nimport logo from '../texx_logo.png'\nimport FeedConfessions from './FeedConfessions'\n\n//====================================Modal styles=========================================\nfunction getModalStyle() {\n  const top = 50 ;\n  const left = 50 ;  \n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor:'#2E3336',\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    color:'white'\n  },\n  root: {\n  display: 'flex',\n  objectFit: 'contain',\n  backgroundColor: '#363A3E',\n  padding:'10px',\n  position: 'sticky',\n  zIndex: 100, \n},\nbackdrop: {\n  zIndex: 1,\n  color: '#ffffff',\n},\nspeedDial: {\n  position: 'fixed',\n  bottom: theme.spacing(12),\n  right: theme.spacing(2),\n}\n\n}));\n//========================================================================================================\nfunction App() {\n  //dispatch for the user\n  const [{chatId,chatInput},dispatch] = useStateValue();\n  console.log(chatId,chatInput)\n  const classes = useStyles();\n\n  const [modalStyle] = useState(getModalStyle);\n  //initially unless fired dont show the model for sign in\n  const [openSignIn,setOpenSignIn] = useState(false);\n  //initially unless fired dont show the model for sign up\n  const [open,setOpen] = useState(false);\n  //for requiring sign in/sign up to upload\n  const [openRequired,setOpenRequired] = useState(false)\n  //store username of the person who wrote the post\n  const [username,setUsername] = useState('');\n  //store email\n  const [email,setEmail] = useState('');\n  //store password\n  const [password,setPassword] = useState('');\n  //store bio\n  const [bio,setBio] = useState('');\n  //flag to keep track of whether the user has logged in or not (user who's signed in )\n  const [user,setUser] = useState([]);\n  //save userId \n  const [useId,setUserId] = useState(null)\n  //show password for password field\n  const [showPassword,setShowPassword] = useState(false)\n  //open speedDial\n  const [openSpeedDial, setOpenSpeedDial] = useState(false);\n  //user stored in local storage\n  let userFromLocalStorage\n  //lazy loading\n  const Profile = React.lazy(() => import('./Profile'))\n  const Feed = React.lazy(() => import('./Feed'))\n  const Chat = React.lazy(() => import('./chat/Chat'))\n  const CreateEvent = React.lazy(() => import('./CreateEvent'))\n  const CreateConfessions = React.lazy(() => import('./CreateConfessions'))\n  const FeedEvents = React.lazy(() => import('./FeedEvents'))\n  // const FeedConfessions = React.lazy(() => import('./FeedConfessions'))\n  const ImageUploadMobile = React.lazy(() => import('./ImageUploadMobile'))\n  // const WidgetsChat = React.lazy(() => import('./chat/WidgetsChat'))\n  //actions for speedDial\n  const actions = [\n    { icon: <Router><Link><AddPhotoAlternateIcon onClick={()=>window.location.href= '/ImageUploadMobile'}/></Link></Router>, name: 'Post' },\n    { icon: <Router><Link><EventIcon onClick={()=>window.location.href= '/createEvent'}/></Link></Router>, name: 'New event' },\n    { icon: <Router><Link><WhatshotSharpIcon onClick={()=>window.location.href= '/createConfessions'}/></Link></Router>, name: 'Confess' },\n  ];\n\n//====================================Get the user from the local storage on refresh======================\n  useEffect(()=>{\n\n    userFromLocalStorage = localStorage.getItem('user')\n    //if there is a user object saved in local storage then set it equal to 'user'\n    if (userFromLocalStorage){\n      //JSON.parse will convert stringify to JSON\n      setUser(JSON.parse(userFromLocalStorage))\n      console.log(JSON.parse(userFromLocalStorage))\n      try {\n        \n        dispatch(\n            {\n            type:actionTypes.SET_USER,\n            user:JSON.parse(userFromLocalStorage)\n            }\n          )\n        \n        \n      }\n    \n    catch (err){\n      alert(err.message)\n    }\n  }\n  },[])\n\n//====================================Authorization state listner=========================================\n  useEffect(()=>{\n    //onAuthStateChanged = listnser to changes in authorization state\n    //when user is logged in or logged out or is changed\n    const unsubscribe = auth.onAuthStateChanged((authUser)=>{\n    //if user has logged in \n    if (authUser){\n      console.log(authUser)\n      //capture the user inside the auth state in the 'setuser' variable\n\n      //=============survive the refresh================\n      //you can only store string items in local storage\n\n      localStorage.setItem('user',JSON.stringify(authUser))\n\n\n      setUser(authUser)\n    }\n    // else if user has logged out set user to null\n    else{\n      setUser(null)\n    }\n\n  })\n  return () =>{\n    //perform cleanup before re-firing the useEffect\n    unsubscribe();\n  }\n\n},[user,username])\n//sign up inside sign in\nconst handleSignUp= () => {\n  setOpen(true)\n  setOpenSignIn(false)\n\n}\n//====================================sign in the user=========================================\n  const signIn = (e) => {\n    e.preventDefault();\n    auth.signInWithEmailAndPassword(email,password)\n    .then((result)=>{\n      dispatch(\n          {\n          type:actionTypes.SET_USER,\n          user:result.user\n          }\n        );\n      localStorage.setItem('user',JSON.stringify(result.user))\n\n    //empty the fields\n    setEmail('')\n    setPassword('')\n\n    })\n    .catch((error) => { alert(error.message)})\n    //close the model\n    setOpenSignIn(false)\n    \n  }\n//====================================sign up the user=========================================\n//bug:requires sign in after sign up\n  const signUp = (e) => {\n    e.preventDefault();\n    auth.createUserWithEmailAndPassword(email,password)\n    //createUserWithEmailAndPassword will create a user object \n    .then(function(authUser){\n        authUser.user.updateProfile({\n        //set displayname attribute of user object to username\n        displayName:username\n      }).then((result)=>{\n          console.log(result)\n          //added the newly created user to our database\n          DataBase.collection('users').doc(authUser.user.uid).set({\n            email:authUser.user.email,\n            displayName:authUser.user.displayName,\n            bio:bio,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n           })\n          })\n                    })\n    .catch((error)=>{alert(error.message+\"from dispatch signup\")})\n\n    setOpen(false)\n  }\n//===============================================================================================\n  return (\n    <div className=\"app\">\n       \n                                      {/*Modal for sign up*/}\n      <Modal  open={open} onClose={()=>{setOpen(false)}}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              {/* <img  className=\"app__headerImage\" src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\" alt=\"ig-logo\"/>   */}\n            </center>\n            <Input style ={{color:'aliceblue'}} placeholder=\"username\" type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)}/>\n            <Input style ={{color:'aliceblue'}} placeholder=\"email\" type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n            <Input style ={{color:'aliceblue',margin:'10px'}}\n            id=\"standard-adornment-password\"\n            placeholder=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            value={password} onChange={(e) => setPassword(e.target.value)}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={() => \n                    setShowPassword(!showPassword )\n                  }\n                  onMouseDown={(e) => \n                    e.preventDefault()}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n            <Input style ={{color:'aliceblue'}} placeholder=\"Add your biography\" type=\"text\" value={bio} onChange={(e)=>setBio(e.target.value)}/>\n            <Button style ={{color:'aliceblue'}} onClick={signUp}>Sign up</Button>\n          </form>\n        </div>\n      </Modal>\n\n                                        {/*Modal for sign in*/}\n\n                                     {/*if user is not logged in then keep sign in modal open*/}\n                                     {/*if the user chooses sign up option then close the sign in modal*/}\n      <Modal  open={open?false:(!user?true : openSignIn)} onClose={()=>{setOpenSignIn(false)}}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n            <img className=\"app__headerImage\" src={logo} alt=\"texx-logo\"/>\n            </center>\n            <p style={{margin:'10px'}} >Enter your credentials to Log in to texx</p>\n            <Input style ={{color:'aliceblue',margin:'10px'}} placeholder=\"email\" type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n            <Input style ={{color:'aliceblue',margin:'10px'}}\n            id=\"standard-adornment-password\"\n            placeholder=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            value={password} onChange={(e) => setPassword(e.target.value)}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={() => \n                    setShowPassword(!showPassword )\n                  }\n                  onMouseDown={(e) => \n                    e.preventDefault()}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n            <Button style ={{color:'aliceblue',backgroundColor:'#556AB5'}} onClick={signIn}>Sign In</Button>\n            <p style={{margin:'10px'}}>New to texx? Sign up</p>\n            <Button style ={{color:'aliceblue',backgroundColor:'#556AB5'}} onClick={handleSignUp}>Sign up</Button>\n          </form>\n        </div>\n      </Modal>\n\n                                              {/*header*/}\n      <Paper className={classes.root} elevation={8}>\n          <div className=\"app__header\">\n              <Router>\n                <Link to=\"/\" onClick={()=>window.location.href= '/'}><img className=\"app__headerImage\" src={logo} alt=\"texx-logo\"/></Link>\n              </Router>\n\n\n                                              {/*serachbar for mobile view*/}\n            <div className=\"app__searchbarMobile\">\n            <div className=\"app__searchbarMobileInputBox\">\n              <Input style={{color:\"aliceblue\"}} className=\"app__searchbarMobileInput\" type= \"text\" placeholder=\"Search Texx\"/>\n              <SearchIcon style={{color:\"aliceblue\"}}/>\n            </div>\n          </div>\n\n                                        {/*profile section*/}\n              <Router><Link><Avatar className=\"post__avatar\" alt={username} src=\"/static/images/avatar/1.jpg\"  onClick={()=>window.location.href='/profile'} /></Link></Router>\n           \n          </div>\n      </Paper>\n                                      {/*SpeedDial for mobile view*/}\n      <div className=\"app__speedDialMobile\">\n            <Backdrop className={classes.backdrop} open={openSpeedDial} />\n            <SpeedDial\n              ariaLabel=\"SpeedDial tooltip example\"\n              className={classes.speedDial}\n              hidden={false}\n              icon={<SpeedDialIcon openIcon={<EditIcon/>} />}\n              onClose={()=>{setOpenSpeedDial(false)}}\n              onOpen={()=>{setOpenSpeedDial(true)}}\n              open={openSpeedDial}\n            >\n              {actions.map((action) => (\n                <SpeedDialAction\n                  key={action.name}\n                  icon={action.icon}\n                  tooltipTitle={action.name}\n                  tooltipOpen\n                  onClick={()=>{setOpenSpeedDial(true)}}\n                />\n              ))}\n            </SpeedDial>\n      </div>\n\n\n\n\n\n                                                {/*sidebar*/}\n                           {/* if user does not exists then reduce the opacity of the body */}\n      <div className={user?'app__body':'app__bodyUserNotLoggedIn' }>\n\n          <Sidebar/>\n\n{/* =================================================REACT ROUTER COMES HERE================================================================================= */}\n\n                <Router>\n                    <Switch>             \n                        <Route exact path=\"/\">\n                          <div className=\"app__feed\">\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                             <Feed/>\n                            </Suspense>\n                          </div>     \n                        </Route>                                                                                                               \n                        <Route path=\"/chats/:chatId\">\n                          <div className=\"app__chat\">\n                              {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                              <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                                <Chat/>\n                              </Suspense>\n                          </div>\n                          </Route>  \n                        <Route path=\"/profile\">\n                          <div className=\"app__profile\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                                <Profile/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/createEvent\">\n                          <div className=\"app__createEvent\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <CreateEvent/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/createConfessions\">\n                          <div className=\"app__createConfessions\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <CreateConfessions/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/eventsFeed\">\n                          <div className=\"app__eventsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <FeedEvents/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/confessionsFeed\">\n                          <div className=\"app__confessionsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <FeedConfessions/>\n                            </Suspense>\n                          </div>\n                        </Route>\n                        <Route path=\"/ImageUploadMobile\">\n                          <div className=\"app__ImageUploadMobile\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <ImageUploadMobile username={user?.displayName}/>\n                            </Suspense>\n                          </div>\n                        </Route>  \n                        <Route path=\"/chatsFeed\">\n                          <div className=\"app__chatsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <WidgetsChat/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                    </Switch>\n                </Router>\n\n{/* ======================================================================================================================================================= */}\n                              {/*Bottom Navigation only applicable to mobile screens*/}\n                              <BottomNavigationMobile/>\n                               {/*show image upload only if the user is logged in*/}\n          {/*\\used otional so it won't crash if these is no 'user.displayName' at the start and use 'user' instead */}\n          {user?.displayName ?\n          //if logged in show image upload button\n            (chatInput?(<SendMessage chatId={chatId}/>):(<ImageUpload username={user.displayName}/>)):\n          //else show sign in /sign up\n          (<Modal  open={openRequired} onClose={()=>{setOpenRequired(false)}}>\n            <div style={modalStyle} className={classes.paper}>\n              <form className=\"app__signup\">\n                <center>\n                  <img  className=\"app__headerImage\" src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\" alt=\"ig-logo\"/>  \n                </center>\n                <Button onClick={()=>{setOpenSignIn(true)}}>Sign In</Button>\n                <Button onClick={()=>{setOpen(true)}}>Sign up</Button>\n              </form>\n            </div>\n          </Modal>)\n            }\n\n                                                {/*widgets*/}\n          <Widgets id={'widget'}/>\n    </div>\n       \n    </div>\n  );\n}\n\nexport default App;\n","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165"],"//post component\n\nimport React , {useState,useEffect,useContext} from 'react'\nimport './Post.css'\nimport Avatar from '@material-ui/core/Avatar';\nimport {Button, Collapse, IconButton, Input, makeStyles, Modal, Popover, Typography } from '@material-ui/core';\nimport {DataBase} from './firebase'\nimport firebase from 'firebase';\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\nimport RepeatIcon from '@material-ui/icons/Repeat'\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport SendIcon from '@material-ui/icons/Send';\nimport {useStateValue} from '../contexts/StateProvider'\nimport FlipMove from 'react-flip-move';\nimport ShareIcon from '@material-ui/icons/Share';\nimport PostMenu from './PostMenu'\n\n\n//============================================Comments pop-over styles==================================== \n    const useStyles = makeStyles((theme) => ({\n        popover: {\n          pointerEvents: 'none',\n        },\n        paper: {\n          padding: theme.spacing(1),\n          backgroundColor:'#363A3E',\n          color:'aliceblue'\n        },\n      }));\n//=============================================Modal styles============================================\n  function getModalStyle() {\n    const top = -50 ;\n    const left = -50 ;  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n  }\n  \n//=======================================================================================================\nfunction Post({postId,username,user_id,caption,imageUrl,likesCount}) {\n    const classes = useStyles();\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store comments from the database for a praticular post in an array (GET from DataBase)\n    const [comments, setComments] = useState([]);\n    //input comment for a post from the user  (POST to DataBase)\n    const [comment, setComment] = useState('');\n    //store likes from the database for a praticular post in an array (GET from DataBase)\n    const [likes, setLikes] = useState([]);\n    //input comment for a post from the user  (POST to DataBase)\n    const [like, setLike] = useState(true);\n    //change color of the like button on click\n    const [favouritesColor, setfavouritesColor] = useState(false)\n    //to make sure user likes the post only once\n    const [firstTimeLike,setFirstTimeLike] = useState(true) \n    const [likeColor,setLikeColor] = useState('')\n    //to store users in chat list after getting them from the database\n    const [chats,setChats] = useState([]) \n    //the problem with let here is  it is making everything empty after \n    //to store uid and bool for if the user is present in the chat list\n    const [chats_array,setChats_array]= useState([])\n    const [isPresent,setIsPresent] = useState(false)\n    //for commentsIcon onclick collapse\n    const [expanded, setExpanded] =  useState(false);\n    //for commentsIcon onhover popup\n    const [anchorEl, setAnchorEl] =  useState(null);\n    const [likeCount,setLikeCount] = useState(0)\n    //create a reference to post doc\n    const postRef = DataBase.collection('posts').doc(postId)\n    //firebase increment for incrementing the likecount\n    const increment = firebase.firestore.FieldValue.increment(1)\n    //firebase decrement for decrementing the likecount\n    const decrement = firebase.firestore.FieldValue.increment(-1)\n    //avatar hover modal\n    const [hoverOpen, setHoverOpen] = useState(false)\n    //modal styles\n    const [modalStyle] = useState(getModalStyle);\n\n    //commentsIcon onclick collapse\n    const handleExpandClick = () => {\n      setExpanded(!expanded);\n    };\n    //commentsIcon onhover popup\n    const open = Boolean(anchorEl);\n    //open the popover that we open on hover on commentsIcon\n    const handlePopoverOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n      };\n    //close the popover that we open on hover on commentsIcon\n      const handlePopoverClose = () => {\n        setAnchorEl(null);\n      };\n\n    //open the Avatar modal\n    const handleHoverModalOpen = () => {\n        setHoverOpen(true)\n    }\n    //close the Avatar modal\n    const handleHoverModalClose = () => {\n        setHoverOpen(false)\n    }\n    //convert to date\n    const convertToDate = (timestamp) => {\n        console.log(timestamp)\n        let currentDate = firebase.firestore.Timestamp.now();\n        console.log(currentDate)\n        let diff = Math.abs(timestamp - currentDate );\n        const dateInMillis  = diff * 1000;\n        let date = new Date(dateInMillis).toLocaleTimeString();\n        return(date.replace(/:\\d+ /, ' ')+\"hrs ago\")\n    }\n//==================================================check whether user is present in the chat list=========================================================================\n    const isPresentInChats = (user_id,chats_array) => {\n        for (const chat of chats_array){\n            if (chat[0]===user_id){\n                return true\n            }\n        }\n\n}\n//======================================Post likes to the database===================================================================================\n\n    const postLike = (e) => {\n//=======================================liking the document first time=============================\n        if (likes.length===0){\n        console.log(\"if statement\")\n        setLike(true)   \n        postRef.update({ likesCount: increment })\n        // setLikeCount(likeCount=>likeCount+=1)     \n               //add like to the 'postLikes' collection of the particular post \n        DataBase.collection('posts').doc(postId).collection('postLikes').doc(user.uid).set(\n            {\n                like:true,\n                username:user.displayName,\n                timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n            }\n        ).catch((err)=>{console.log(\"something wrong happened \"+err.message)})\n        \n    }\n\n//=======================================liking the document NOT first time==========================\n\n        else if (likes.length!==0){\n            console.log(\"else statement\")\n            setLike(!like)\n            like?postRef.update({ likesCount: increment }):postRef.update({ likesCount: decrement })\n            // if(like===true){\n            //     (setLikeCount(likeCount=>likeCount+=1))\n            // }\n            // else if(like===false){\n            //     (setLikeCount(likeCount=>likeCount-=1))\n            // }\n            DataBase.collection('posts').doc(postId).collection('postLikes').doc(user.uid).update(\n                {\n                    like:like,\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp()\n                }\n            )\n        \n        }    \n\n}\n//======================================Get the list of users in chatlist===============================================================================\nuseEffect(()=>{\n    \n    if (user)\n    {const unsubscribe = DataBase.collection('users').doc(user.uid).collection('chats').orderBy('timestamp','desc').onSnapshot((snapshot)=>{\n                        setChats(snapshot.docs.map((doc) => (doc.data())))\n                    \n    \n                    })\n    return  unsubscribe()\n    }\n\n//when postId changes fire the code above\n},[,user_id,user])\n\n//========================================================================================================================\n\nuseEffect(() => {\n    //Run this function when the post component loads or there are changes in user object or chats object \n        //because we want to run this function only after the data from the database has been fetched and the component in which we are mapping this data (Button) that,\n        //loads after the component which calls for this function (<Avatar>) is loaded  \n        console.log(\"running AddButton\")\n            //loop through the object list of 'chats' \n            // if the 'chat_user_id' is already present in the chats object, then set the the second dimension true\n            //convert each object into an array and loop through it\n            let cha =[];\n            //to store the return from the function if the user is present in the chat list \n            for (const chat of Object.entries(chats)){\n                if (user_id===chat.chat_user_id){\n                    \n                    // console.log([chat[1].chat_user_id,true])\n                    // console.log([chat[1].chat_user_id,true][0])\n                    // first dimension is for uid \n                    // second dimension is a bool for checking whether the 'chat_user_id' is already present in the chats\n               \n                    cha.push([chat[1].chat_user_id,true])\n                    // console.log(\"chats_array \"+chats_array)\n                    \n                    \n                }\n                else{\n                    cha.push([chat[1].chat_user_id,false])\n                    // console.log(\"chats_array \"+chats_array)\n                    \n                }\n               \n\n            }\n            setChats_array(cha)\n            setIsPresent(isPresentInChats(user_id,chats_array))\n            // console.log(isPresent)\n\n        },[,postId,chats,user])\n//======================================Add the selected user to chats list============================================\nconst addToChats = () => {\n    //if the document by the user_id already exists then it wont change it\n    //if logged in user 'user.uid' == 'user_id' user who wrote the post  then dont add it to chats list\n    if(!(user.uid===user_id)){\n    DataBase.collection('users').doc(user.uid).collection('chats').doc(user_id).set({\n        chat_username:username,\n        //user id of the user who wrote the post\n        chat_user_id:user_id,\n        timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n        })\n    }\n    \n} \n//======================================Post comments to the database========================================================================================\nconst postComment = (e) => {\n    e.preventDefault();\n    //add comment to the 'comments' collection of the particular post \n    DataBase.collection('posts').doc(postId).collection('comments').add(\n        {\n         text:comment,\n         username:user.displayName,\n         timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        }\n    )\n    //clear the input after posting\n    setComment('')\n}\n//====================================Get the comments and likes from the database and display=================================================================\n    useEffect(() => {\n        \n        //if a postId is passed\n        if (postId){\n            //get a snapshot listner for 'comments' collection inside the passed 'postId' doc inside the collection 'posts'\n             DataBase.collection('posts').doc(postId).collection('comments').orderBy('timestamp','desc').onSnapshot(\n                    (snapshot) =>{\n                        //set comments to the data inside the doc\n                                setComments(snapshot.docs.map((doc) => (doc.data())))\n                    })\n\n    \n                              //get a snapshot listner for 'postLikes' collection inside the passed 'postId' doc inside the collection 'posts'\n                        DataBase.collection('posts').doc(postId).collection('postLikes').orderBy('timestamp','desc').onSnapshot(\n                                (snapshot) =>{\n                 \n                                                        setLikes(snapshot.docs.map((doc) => ({id:doc.id,like:doc.data()})))\n                                                        \n                                                    \n                                               }   \n                                        ,\n                                        error => {\n                                            console.log(error)\n                                        }\n                \n                                )\n                                if(likes.length!==0){\n                                    console.log(\"if\")\n                                    for(const like_doc in likes ){\n                                        // console.log(likes[like_doc].like.like)\n                                        if(likes[like_doc].id === user.uid){\n                                            // setfavouritesColor(likes[like_doc].like.like)\n                                            setLike(likes[like_doc].like.like)\n                                            console.log(like)\n                                        }\n                                    }\n                       \n                                }\n                                else if(likes.length==0){\n                                    console.log(\"elif\")\n                                    // setfavouritesColor(false)\n                                    setLike(false)\n                                 \n                                    \n                                }\n\n                                // for (const like_doc in likes){\n                                  \n                                       \n                                //         if (likes[like_doc].like.like ===true){\n                                        \n                                //             setLikeCount(likeCount=>likeCount+=1)\n\n                                //         }\n                                    \n                                // }\n                                // setLikeCount(Number([...likes.filter(like => like.id === user.uid).length)+1) \n       \n        \n    \n                  \n        }\n        \n        //when postId,user changes or page loads fire the code above\n},[,postId,user])\n\n\n\n\n//================================================================================================================================================================\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\" >\n                                               {/*avatar managed by@material-ui/core*/}\n                <div className=\"post__userProfile\">\n                <Avatar className=\"post__avatar\" alt={username} src=\"/static/images/avatar/1.jpg\"  onClick={handleHoverModalOpen} />\n                <h3>{username}</h3>\n                </div>\n                <Modal\n                        open={hoverOpen}\n                        onClose={()=>setHoverOpen(false)}\n                        aria-labelledby=\"simple-modal-title\"\n                        aria-describedby=\"simple-modal-description\"\n                    >\n                    <center><img style={{width:\"fit-content\"}} alt={username} src={imageUrl}/></center>\n                </Modal>\n                {/*==================================================================================================================================== */}\n \n                {/* {user.uid === user_id && <Button onClick={addToChats}>Add to chats</Button>} */}\n     \n                {/*initially when chats array does not exists as it is made after calling the addToChats function  */}\n                {/*if the array is empty (initial condition) */}\n                {/* {console.log(\"array length\")}\n                {console.log((Array.isArray(chats_array) && chats_array.length) === 0 )} */}\n                {/* {console.log(chats_array)} */}\n                {/*to check whether the user is present in the chats_array*/}\n                \n\n                { //to stop react from freaking out when the user is not logged in\n                 user && (\n                    //Dont show anything for the post which are written by the user who is logged in\n                    !(user.uid === user_id) &&  \n                    //when there are no chats (chat array is empty)\n                    (\n                         (Array.isArray(chats_array) && chats_array.length) === 0 ? (<Button onClick={addToChats}>Add to chats</Button>) : \n                    (\n                    //when there are chats\n                    //check if the user is present in the chats_array\n                    isPresent? \n                     //if present\n                    ( \n                    chats_array.map((chat)=>(\n                    //chat[0] contains the 'uid' of the 'user' who wrote the post \n                    //find the array element corresponding to the given post\n                    //this is done by mathcing the 'user_id' from 'posts' to chat_user_id (chat[0])\n                    //then check bool chat[1] for whether the element is present in an array or not\n                    //if the element is not present then show <Add to chats> else show <Chat>\n                    <span>{(chat[0]==user_id) && ((chat[1])?(<Button key={user_id} onClick={addToChats}>Add to chats</Button>):(<Button key={user_id}>Chat</Button>))}</span>\n                    ))\n\n                    ):\n                    //if not present\n                    (<Button key={user_id} onClick={addToChats}>Add chats</Button>)\n                        )    \n                            ) \n                                )\n                    }\n                {/* {                chats_array.map((chat)=>{\n                                    console.log(chat+\"chta\")\n                })\n                } */}\n\n                            {/*Report or bookmarks Menu*/}\n                <PostMenu postId={postId} postUsername={username} postUserId={user_id}/>\n                \n             \n            {/*===========================================================================================================================================*/}\n            </div>\n            {/* always run onLoad inside an img tag */}\n            <img className=\"post__image\" src={imageUrl} alt={username+\" \"+caption} />\n            <h4 className=\"post__text\"><strong>{username+\" \"}</strong>:{\" \"+caption}</h4>\n            <div className=\"post__footer\">\n                                                     \n\n                            <div className=\"post__likes\">  \n                                                                                {/*like icon*/}\n                                    <FavoriteIcon   fontsize=\"small\" cursor=\"pointer\" onClick={postLike} style={{color:like?'':'red'}} /> \n                                <FlipMove> \n                                        {likes.map((id,like)=>\n                                            (<p style={{color:'aliceblue'}} id={id}><strong>{user && (user.displayName===like.username?(like.like?(<strong>You{JSON.stringify(like.like)}</strong>):(<strong></strong>)):(like.username))}</strong></p>)\n                                        )}\n                                </FlipMove>\n                                <Typography style={{color:'aliceblue'}}>Liked by {likesCount}</Typography>\n                            </div>\n                            \n                                            {/*collapse  comments*/}\n                                                {/*Comment icon*/}\n                            <div className=\"post__commentsIcon\">\n                                 <IconButton onClick={handleExpandClick} id=\"comments-icon\"   onMouseEnter={handlePopoverOpen} onMouseLeave={handlePopoverClose} disabled={comments.length===0}>\n                                    <ChatBubbleOutlineRoundedIcon fontsize=\"small\" cursor=\"pointer\" aria-expanded={expanded} aria-label=\"show more comments\"/>\n                                </IconButton>\n                                            {/*pop over on hover*/}\n                                            <Popover \n                                            id=\"mouse-over-popover\"\n                                            className={classes.popover}\n                                            classes={{\n                                            paper: classes.paper,\n                                            }}\n                                            open={open}\n                                            anchorEl={anchorEl}\n                                            anchorOrigin={{\n                                            vertical: 'bottom',\n                                            horizontal: 'left',\n                                            }}\n                                            transformOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'left',\n                                            }}\n                                            onClose={handlePopoverClose}\n                                            disableRestoreFocus\n                                        >\n                                            <Typography>Click on the icon to load all comments</Typography>\n                                        </Popover>\n                                                                 {/*no. of comments*/}\n                                <Typography style={{color:'aliceblue'}}>{comments.length} Comments</Typography>\n                            </div>\n\n                                                    {/*share icon*/}\n                            <IconButton>\n                                <ShareIcon fontsize=\"small\" cursor=\"pointer\" onClick={() => {\n                                                if (navigator.share) {\n                                                    navigator.share({\n                                                            title: document.title,\n                                                            text: caption,\n                                                            url: window.location.href,\n                                                        })\n                                                        .then(() => console.log('Successful share'))\n                                                        .catch((error) => alert('Error sharing', error));\n                                                } else {\n                                                    alert(\"Web Share API is not supported in your browser.\")\n                                                }\n                                            }}> \n                                </ShareIcon> \n                            </IconButton>\n                                                    {/*Re-post icon*/}\n                            <IconButton>                       \n                                   <RepeatIcon fontsize=\"small\" cursor=\"pointer\"/>\n                            </IconButton>\n\n                            \n                         \n                                                 \n            </div>\n                                              {/*display the comments from the database */}\n            <div className=\"post__comments\">\n                    <Collapse in={expanded} timeout=\"auto\" unmountOnExit >\n                       { comments.map((comment) => (\n                            //here we are accessing the username and text fields of the doc[comment(iterator)] from 'comments' collection of the DataBase\n                            <p style={{color:\"#dae1e7\"}}><strong>{comment.username+\":\"}</strong>{comment.text}<span>{\" \"+convertToDate(comment.timestamp)}</span></p>\n                        ))\n                       } \n                    </Collapse>\n                    \n            </div>\n                                               {/*post the comment to the database*/}\n            {//if the user is logged in then only show the post comment section\n                user &&(\n                <form className=\"post__commentBox\">\n                    <Input style={{color:\"aliceblue\"}} className=\"post__input\" type=\"text\" placeholder=\"Add a comment...\" value={comment} onChange={(e)=> setComment(e.target.value)}/>\n                    <IconButton  disabled={!comment}  variant ='contained' color=\"primary\" type ='submit' onClick={postComment}>\n                            <SendIcon/>\n                    </IconButton>\n                </form>) \n            }\n        </div>\n    )\n}\n\nexport default Post\n","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",["166"],"import React from 'react'\nimport './Widgets.css'\nimport { Input } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport WidgetsChat from './chat/WidgetsChat'\nimport WigetsDummy from './chat/WigetsDummy'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction Widgets() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"widgets\"> \n            <div className=\"widgets__inputBox\">\n                <SearchIcon className=\"widgets__searchIcon\"/>\n                <Input style={{color:\"aliceblue\"}} className=\"widgets__input\" type= \"text\" placeholder=\"Search Texx\" />\n            </div>\n            <div className=\"widgets___widgetContainer\">\n                {/* if user doesnt exists WidgetsChat component wasthrwoing an error hence I Made a fummy component which doesnt have a user object and \n                will be rendered during refresh transitions when momentarily user is unavailable instead of throwing an error  */}\n                {user?(<WidgetsChat/>):(<WigetsDummy/>)}\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["167","168","169"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction ImageUpload({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                                {/*image input*/}\n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                                                            {/*selected image preview*/}\n                        {image&&(<img className=\"imageUpload__preview\" width=\"20px\" height=\"20px\" src={URL.createObjectURL(image)}/>)}\n                                                             {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["170"],"//structure of standard message\nimport React,{ forwardRef } from 'react';//forwardRef keeps track of what is changing\nimport {Card,Avatar,CardContent,Typography} from '@material-ui/core';\nimport './Message.css';\n\n//====================================================================================================\nconst Message =  forwardRef(({},ref) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    const isUser = true;\n    return (\n        //apply message__user class only if isUser is True\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <Card className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className=\"message__avatar\" alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <Typography className=\"message__username\" variant=\"h\">\n                        {isUser ?`${'You'}`: \"message.username\" || 'Unknown user'}\n                    </Typography>\n                </div>\n                <CardContent>\n                    <Typography className=\"message__message\" color=\"#E6E6E6\" variant=\"h5\" component=\"h2\">\n                        {\"message.message\"}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n        )\n    \n})\n\nexport default Message;","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["171","172","173","174","175","176","177"],"\n//users in sidebar chat (online/offline)\n\nimport React, { useEffect, useState } from 'react'\nimport './WidgetsChat.css'\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {ButtonBase} from '@material-ui/core';\nimport {BrowserRouter, Link} from 'react-router-dom';\nimport {DataBase} from '../firebase'\nimport firebase from 'firebase/app';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { actionTypes } from '../../contexts/reducer';\nimport { Unsubscribe } from '@material-ui/icons';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flex:1,\n    display: 'flex',\n    minWidth:  314,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'2px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsChat() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [messages, setMessages] = useState([]);\n    const [chats, setChats] = useState([])\n    \n\n    useEffect(() => {\n        //if user is logged out it throws an error hence using try catch\n        try {\n            console.log(\"trying widgetsChat\")\n            \n            console.log(user)\n            //this is not working because the user that is being added to 'users' collection from the App.js signup is not creating a valid document\n            DataBase.collection('users').doc(user.uid).collection('chats').onSnapshot((snapshot)=>(\n                setChats(snapshot.docs.map((doc) => doc.data()))\n               \n            ))\n            console.log(chats)\n     }\n        catch (error) {\n        console.log(error.message+\" coming from widgetsChat getting 'chats'collection \")\n        }\n        \n    }, [user]);\n\n    return (\n//==========================================Online members===========================================================\n        <div className=\"widgetsChat\">\n            <div className=\"widgetsChat__online\">\n                 <p className=\"widgetsChat__headerTitle\">Online<span><Badge color=\"primary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p>\n                 {/* <div className=\"widgetsChat__onlineMembers\"> */}\n            {\n                chats.map((chat)=>(\n                <BrowserRouter>\n                            <Link to={`/chats/${chat.chat_user_id}`} key={chat.chat_user_id} onClick={   \n                                ()=>{ //dispatch the chat_user_id when the user clicks on the Link, to the global state\n                                      //later used in App.js to render <SendMessage> and pass 'chatId' to SendMessage\n                                          dispatch(\n                                                        {\n                                                        type:actionTypes.SET_CHAT_INPUT,\n                                                        chatId:chat.chat_user_id,\n                                                        chatInput:true,\n                                                        \n                                                        }); window.location.href= `/chats/${chat.chat_user_id}` }}>\n                            <div className=\"widgetsChat__onlineBox\">\n                                <ButtonBase>\n                                                <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                                                    <Badge\n                                                        overlap=\"circle\"\n                                                        anchorOrigin={{\n                                                        vertical: 'bottom',\n                                                        horizontal: 'right',\n                                                        }}\n                                                       \n                                                    ></Badge>\n                                                <div className={classes.details}>\n                                                        <CardContent className={classes.content}>\n                                                            <Typography component=\"p\" variant=\"p\">\n                                                                {chat.chat_username}\n                                                            </Typography>\n                                                            <Typography className={classes.typoStatus} variant=\"caption\">\n                                                                status like I am using texx\n                                                            </Typography>\n                                                        </CardContent>\n                                                </div>\n                                </ButtonBase>\n                            </div>\n                            </Link>\n                </BrowserRouter>\n                \n                ))\n            }\n                 \n                 </div>\n            {/* </div> */}\n                                                        {/* offline members */}\n            <div className=\"widgetsChat__offline\">\n                 <p className=\"widgetsChat__headerTitle\">Offline<span><Badge color=\"secondary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p> \n                 <div className=\"widgetsChat__offlineMembers\">\n                 {/* <div className=\"widgetsChat__onlineBox\">\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                     </div> */}\n                 </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WidgetsChat\n","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["178"],"import React, { useEffect, useState } from 'react'\nimport Post from './Post';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\n\n\nfunction Feed(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//posts array\nconst [posts, setPosts] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setPosts(snapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            })\n    },[user]);\n    return (\n    <div className=\"feed\">\n            <div className=\"feed__posts\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                posts.map(({id,post})=>(<Post key={post.id} postId={id} username={post.username} user_id={post.user_id} caption={post.caption} imageUrl={post.imageUrl} likesCount={post.likesCount}></Post>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default Feed\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["179","180","181","182","183"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Message from './Message'\nimport './Chat.css'\nimport {DataBase} from '../firebase';\nimport {useStateValue} from '../../contexts/StateProvider';\n\n\n\nfunction Chat() {\n    //set the chat name in the\n    const [chatName,setChatName] = useState('')\n    //get the messages from the database\n    const [messages,setMessages] = useState([])\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const {chatId} = useParams()\n\n\n\n//======================================================GET Messages==========================================\n//everytime chat_user_id (which is basically the doc id inside the chat collection) changes pull the messages for that chat_user_id from the database\nuseEffect(() => {\n    if (user){\n    if (chatId){\n        //here the chat_user_id is taken from the user who posted that particular post to database\n        const unsubscribe = DataBase.collection('users').doc(user.uid).collection('chats').doc(chatId).collection('messages').onSnapshot((snapshot)=>(\n            setMessages(snapshot.data())\n        ))\n    }\n}\n    \n}, [chatId])\n\n\n//=============================================================================================================\n\n    return (                         \n             <div className=\"chat\">\n                <div className=\"chat__header\">\n                This is the beggining of your texx with {}\n                </div>\n                \n                {\n                    messages.map((message)=>(<Message message={message}/>))\n                    \n                }\n             </div> \n\n\n    )\n}\n\nexport default Chat\n","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],"\n//users in sidebar chat (online/offline)\n\nimport React, { useEffect, useState } from 'react'\nimport './WidgetsDummy.css'\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {ButtonBase} from '@material-ui/core';\nimport {Link} from 'react-router-dom';\nimport {DataBase} from '../firebase'\nimport firebase from 'firebase/app';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { Unsubscribe } from '@material-ui/icons';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsDummy() {\n\n    return (\n\n        <div className=\"widgetsChat\">\n            \n        </div>\n    )\n}\n\nexport default WidgetsDummy\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js",["199","200"],"import React, { useState } from 'react'\nimport { Input } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport firebase from 'firebase/app'\nimport {useStateValue} from '../../contexts/StateProvider';\nimport {InsertEmoticon, MicOutlined} from '@material-ui/icons';\nimport {DataBase} from '../firebase';\nimport { useParams } from 'react-router-dom';\nimport './SendMessage.css'\n\nfunction SendMessage(chatId) {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    //set the input \n    const [input, setInput] = useState('');\n  \n//========================================================POST Messages========================================\n\n\n    const sendMessage = () => {\n        if (user){\n            DataBase.collection('users').doc(user.uid).collection('chats').doc(chatId).collection('messages').add(\n                {\n                    text:input,\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n                    author:user.uid,\n                    authorName:user.displayName,\n                    imageUrl:\"\",\n                }\n            )\n            setInput('');\n        }\n    }\n\n//=============================================================================================================\n    return (\n    <div className=\"sendMessage\">\n            <form className=\"chat__inputForm\" onSubmit={(e)=>{e.preventDefault()}}>\n                <InsertEmoticon/>\n                <Input style={{color:\"aliceblue\"}} className=\"sendMessage__input\" value={input} onChange={(e)=>setInput(e.target.value)} type=\"text\" placeholder=\"   Send a texx...\"/>\n                <SendIcon onClick={sendMessage} type=\"submit\"/>\n                <MicOutlined/>\n            </form>\n    </div>\n    )\n}\n\nexport default SendMessage\n","/Users/deeptej/Desktop/react/texx/client/src/components/Event.js",["201"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport './Event.css'\nimport { Paper } from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor:\"#2E3336\",\n  },\n  media: {\n    height: 140,\n  },\n});\nfunction Event({eventId, dateTime, venue, username,title, description, user_id, imageUrl, interestedCount}) {\n\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n//=====\n    const classes = useStyles();\n    return (\n        <div className=\"event\">\n            <div className=\"event__header\">\n                <div className=\"event__headerInfo\">\n                    <Typography className=\"event__title\"  variant=\"h5\">\n                        {title}\n                    </Typography>\n                    <span className=\"event__dateTime\">\n                        Date and time:{\" \"+convertToDate(dateTime)}\n                    </span>\n                    <span  className=\"event__location\">\n                        Venue:{venue}\n                    </span>\n                </div>\n                <MoreVertIcon style={{color:'white'}}/>\n            </div>\n            <Card className={classes.root}>\n\n                <div className=\"event__thubnail\">\n                    <CardActionArea>\n                        <CardMedia\n                        className={classes.media}\n                        image={imageUrl}\n                        />\n                    </CardActionArea>\n                </div>\n\n                <CardContent className=\"event__description\">\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {description}\n                    </Typography>\n                </CardContent>\n\n                <div className=\"event__footer\">\n                    <CardActions className=\"event__interested\">\n                        <Button size=\"small\" >    \n                                I am Interested\n                        </Button>\n                    </CardActions>\n    \n                    <CardActions className=\"event__actions\">\n                            <Button size=\"small\" onClick={() => {\n                                            if (navigator.share) {\n                                                navigator.share({\n                                                        title: document.title,\n                                                        text: \"Event short description\",\n                                                        url: window.location.href,\n                                                    })\n                                                    .then(() => console.log('Successful share'))\n                                                    .catch((error) => alert('Error sharing', error));\n                                            } else {\n                                                alert(\"Web Share API is not supported in your browser.\")\n                                            }\n                                        }} >\n                            Share with friends\n                            </Button>\n                            <Button size=\"small\" >\n                            Learn More\n                            </Button>\n                    </CardActions>\n                </div>\n            </Card>\n        </div>\n    )\n}\n\nexport default Event\n\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js",["202","203","204","205","206","207","208","209","210","211","212","213","214","215"],"/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js",["216","217","218"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function SimpleModal({setHoverOpen,hoverOpen}) {\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = useState(getModalStyle);\n\n  return (\n    <div className=\"avatarHoverModal\">\n\n    </div>\n  );\n}\n",["219","220"],"/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js",["221","222","223"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button, IconButton, Input, Modal,TextField} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateEvent.css'\nimport DateTimeSelect from './DateTimeSelect'\n\nfunction CreateEvent() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //description\n    const [description,setDescription] = useState('');\n    //image \n    const [imageThumbnail,setImageThumbnail] = useState(false);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //title \n    const [title,setTitle] = useState('')\n    //venue/link\n    const [venue,setVenue] = useState('')\n    //Datetime\n    const [dateTime,setdateTime] = useState(new Date())\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleImageChange = (e) =>{\n        if (e.target.files[0]){\n            setImageThumbnail(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (imageThumbnail) {\n            \n            //Access the storage and upolad the image in the 'eventThumbnails' folder and give it the name =image.name\n            const uploadTask = storage.ref(`eventThumbnails/${imageThumbnail.name}`).put(imageThumbnail)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'eventThumbnails' folder in the storage\n                    .ref('eventThumbnails')\n                    //get the name of the image file\n                    .child(imageThumbnail.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('events').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set title\n                                title:title,\n                            //set date amd time\n                                dateTime:dateTime,\n                            //set venue\n                                venue:venue,\n                            //set the description attribute to the description user entered   \n                                description:description,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:user.displayName,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set interestedCount to 0 \n                                interestedCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setTitle(\"\")\n                            setDescription(\"\");\n                            setVenue(\"\")\n                            setImageThumbnail(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"createEventWrapper\">\n            <h2 id=\"createEvent_h2\"> CREATE EVENT </h2>\n        <div className=\"createEvent\">\n                                                         \n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"createEvent__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"createEvent__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"createEvent_formContainer\">\n                <form className=\"createEvent__form\" onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__title\" type=\"text\" placeholder=\"Enter a the name for the event...\" onChange={(e)=>setTitle(e.target.value)} value={title}/>\n                        {/*if image is selected then show selected else show choose an image*/}\n                        <input className=\"createEvent__fileInput\" accept=\"image/*\"  id=\"imageThumbnail-button-file\" type=\"file\" onChange={handleImageChange} />\n                        <label htmlFor=\"imageThumbnail-button-file\" style={{color:\"gray\"}}>\n                            <IconButton color=\"primary\" aria-label=\"upload thumbnail\" component=\"span\">\n                                <AddPhotoAlternateIcon /> \n                            </IconButton>\n                            {imageThumbnail?\"Image selected\":\"Choose a thumnail image\"}\n                        </label>  \n                        {imageThumbnail&&(<img width=\"100px\" height=\"100px\" src={URL.createObjectURL(imageThumbnail)}/>)}\n                        {/*change the 'dateTime' from the <DateTimeSelect/> component*/}\n                        <DateTimeSelect changeDate={dateTime => setdateTime(dateTime)} dateTime={dateTime}/>\n                        <TextField placeholder=\"Enter a decription...\" className = \"createEvent__textarea\" onChange={(e)=>setDescription(e.target.value)} value={description}\n                            id=\"outlined-multiline-static\"\n                            label=\"Multiline description\"\n                            multiline\n                            rows={4}\n                            defaultValue=\"Default Value\"\n                            variant=\"outlined\"\n                            />\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__venue\" type=\"text\" placeholder=\"Enter a Venue/Link...\" onChange={(e)=>setVenue(e.target.value)} value={venue}/>\n                        <Button className=\"createEvent___iButton\" disabled = {!imageThumbnail} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>Create the event</Button>\n                </form>\n           </div>\n        </div>\n    </div>\n    )\n}\n\nexport default CreateEvent;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js",["224","225"],"import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  withStyles,\n  ThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport TextField from \"@material-ui/core/TextField\";\n\n\nconst CURRENT_THEME = {\n  background: \"#111D23\",\n  el1: \"#1B262C\",\n  el2: \"#263137\",\n  el3: \"#3C464B\",\n  text: \"#210124\",\n  textInv: \"#F0EDEE\",\n  main: \"#3857c5\",//change color here \n  secondary: \"#4DBBEB\",\n  mainShadow: \"#556AB5\",\n  danger: \"#DB162F\",\n  warning: \"\",\n  font1: `\"Roboto Slab\", \"Times New Roman\", serif`,\n  font2: `\"Roboto light\"`\n};\n\nconst styles = {\n  paper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: CURRENT_THEME.el3,\n    borderColor: CURRENT_THEME.danger\n  },\n  inputIcons: {\n    padding: 2,\n    color: CURRENT_THEME.textInv\n  },\n  input: {\n    flex: 1,\n    marginLeft: 8,\n    color: CURRENT_THEME.textInv\n  }\n};\n\nconst useStyles = makeStyles(styles);\nconst StyledDateTime = withStyles({\n  \"& .MuiPickersToolbar-toolbar\": {\n    backgroundColor: CURRENT_THEME.textInv\n  },\n  root: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.textInv,\n        \"& .MuiPickersToolbar-toolbar\": {\n          backgroundColor: CURRENT_THEME.textInv\n        }\n      }\n    }\n  }\n})(KeyboardDateTimePicker);\n\nconst CssTextField = withStyles({\n  root: {\n    //all\n    \"& .MuiIconButton-root\": {\n      color: CURRENT_THEME.textInv\n    },\n    // filled\n    \"& .MuiFilledInput-underline\": {\n      \"&:before\": {\n        borderBottomColor: \"transparent\"\n      },\n      \"&:after\": {\n        borderBottomColor: \"transparent\"\n      }\n    },\n    \"& .MuiFilledInput-input\": {\n      color: CURRENT_THEME.textInv\n      // borderRadius: \"50px 50px 0 0\"\n    },\n    \"& .MuiFilledInput-root\": {\n      borderRadius: \"10px 10px 10px 10px\",\n      backgroundColor: CURRENT_THEME.el3,\n      // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n      \"&.Mui-focused\": {\n        borderColor: \"#556AB5\",\n        backgroundColor: CURRENT_THEME.el2,\n        // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n        boxShadow: `0px 0px 10px 0px ${CURRENT_THEME.main}, 0px 0px 40px 0px ${CURRENT_THEME.main}, 0px 0px 80px 0px ${CURRENT_THEME.main}`\n        // boxShadow: '0px 0px 15px 0px #556AB5, 0px 0px 15px 0px #556AB5'\n      }\n    },\n\n    \"& .MuiInputLabel-formControl\": {\n      color: CURRENT_THEME.textInv\n    }\n    // \"& .MuiOutlinedInput-input\": {\n    //   color: CURRENT_THEME.textInv\n    // },\n    // \"& .MuiOutlinedInput-root\": {\n    //   \"& fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     // color: \"#1ab5e1\"\n    //   },\n    //   \"& label\": {\n    //     color: CURRENT_THEME.textInv\n    //   },\n    //   \"&:hover fieldset\": {\n    //     borderColor: \"#1ab5e1\"\n    //   },\n    //   \"&.Mui-focused fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n    //   }\n    // }\n  }\n})(TextField);\n\nconst materialTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CURRENT_THEME.main\n    }\n  },\n  overrides: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.el3\n      }\n    },\n    MuiPickersCalendarHeader: {\n      iconButton: {\n        backgroundColor: \"transparent\",\n        color: CURRENT_THEME.main\n      },\n      dayLabel: {\n        color: CURRENT_THEME.textInv //days in calendar\n      },\n      transitionContainer: {\n        color: CURRENT_THEME.textInv\n      }\n    },\n    MuiPickersBasePicker: {\n      pickerView: {\n        backgroundColor: CURRENT_THEME.background\n      }\n      //   backgroundColor: CURRENT_THEME.el3,\n    },\n    MuiPickersDay: {\n      day: {\n        color: CURRENT_THEME.textInv //days in calendar\n      }\n      //   daySelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n      //   dayDisabled: {\n      //     color: CURRENT_THEME.main, // current day\n      //   },\n      //   current: {\n      //     color: CURRENT_THEME.main,\n      //   },\n    },\n    // MuiButton:{\n    //   textPrimary:{\n    //     color: CURRENT_THEME.main,\n    //   }\n    // },\n\n    MuiDialogActions: {\n      root: {\n        backgroundColor: CURRENT_THEME.background\n      }\n    },\n    MuiPickersClock: {\n      clock: {\n        backgroundColor: CURRENT_THEME.el2\n      }\n      //   pin:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n      // },\n      // MuiPickersClockPointer:{\n      //   pointer:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n    },\n    MuiPickersClockNumber: {\n      clockNumber: {\n        color: CURRENT_THEME.textInv\n      }\n      //   numberSelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n    }\n    // MuiMuiPickersTime:{\n    //   timeSelected: {\n    //     backgroundColor: CURRENT_THEME.main, //calendar circle\n    //   },\n    // },\n    // MuiPickersModal: {\n    //   dialogAction: {\n    //     color: CURRENT_THEME.main, //no se\n    //     backgroundColor: CURRENT_THEME.el3,\n    //   },\n    // },\n  }\n});\n\nfunction DateTimeSelect(props) {\n  const [myDate, setmyDate] = useState();\n\n  return (\n    <ThemeProvider theme={materialTheme}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <div className=\"dateTimeSelect\">\n          <KeyboardDateTimePicker\n            format={'dd-MMM-yyyy:KK:mm a'}\n            label=\"Choose date and time for event\"\n            inputVariant=\"filled\"\n            helperText=\"\"\n            TextFieldComponent={CssTextField}\n            size=\"small\"\n            value={myDate}\n            onChange={setmyDate}\n            //change the 'dateTime' state of the parent from the child\n            onClick={props.changeDate(myDate)}\n          />\n          </div>\n      </MuiPickersUtilsProvider>\n    </ThemeProvider>\n  );\n}\nexport default DateTimeSelect","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js",["226"],"import React, { useEffect, useState } from 'react'\nimport Event from './Event';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './FeedEvents.css'\n\nfunction FeedEvents() {\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//events array\nconst [events, setEvents] = useState([]);\n//====================================Events changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'events' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('events').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and event=doc.data to the fields in the 'event' variable that we defined above\n        console.log(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n        setEvents(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n            })\n    \n        return \n\n    \n    },[user]);\n    return (\n    <div className=\"feedEvents\">\n            <div className=\"feedEvents__events\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                events.map(({id,event})=>(<Event key={event.id} eventId={id} dateTime={event.dateTime} venue={event.venue} title={event.title} username={event.username} user_id={event.user_id} description={event.description} imageUrl={event.imageUrl} interestedCount={event.interestedCount}/>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedEvents\n","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js",["227"],"import React,{useState} from 'react';\nimport {DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button,TextField} from '@material-ui/core';\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateConfessions.css'\n\nfunction CreateConfessions() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store confession\n    const [confession,setConfession] = useState('')\n\n    const handlePost = (e) => {\n        DataBase.collection('confessions').add({\n            confession:confession,\n            user_id:user.uid,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        setConfession('')\n\n    }\n    return (\n        <div className=\"createConfessions\">\n                <form className=\"createConfessions__form\">\n                    <h2 id=\"createConfessions_h2\"> Write a Confession </h2>\n                    <TextField placeholder = \"Write your heart out...\" className = \"createConfessions__textarea\" onChange={(e)=>setConfession(e.target.value)} value={confession}\n                                    id=\"outlined-multiline-static\"\n                                    label=\"Write a confession...\"\n                                    multiline\n                                    rows={15}\n                                    defaultValue=\"Default Value\"\n                                    variant=\"outlined\"\n                                    />\n                    <Button className=\"createConfessions___iButton\" disabled = {!confession} variant ='contained' color=\"primary\" type ='submit' onClick={handlePost}>Post</Button>\n                </form>\n        </div>\n        \n    )\n}\n\nexport default CreateConfessions;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js",["228","229","230","231","232"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport EventIcon from '@material-ui/icons/Event';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport CommentRoundedIcon from '@material-ui/icons/CommentRounded';\nimport HomeIcon from '@material-ui/icons/Home';\nimport './BottomNavigationMobile.css'\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport { Card, Paper } from '@material-ui/core';\nimport {BrowserRouter, Link } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#1A1A1A'\n  },\n});\n\nconst navValues = {\n  '/':1,\n  '/confessionsFeed':2,\n  '/eventsFeed':3,\n  '/chatsFeed':4,\n  '/notificationsFeed':5\n}\n\n//BUG:\n// here everytime we change the value using setValue it causes one additional render\nfunction BottomNavigationMobile() {\n    const classes = useStyles();\n    const pathname = window.location.pathname; // in case user visits the path directly. The BottomNavBar is able to follow suit.\n    const [value, setValue] = useState(navValues[window.location.pathname])\n    return (\n      <Paper elevation={10}>\n        <div className=\"bottomNavigation\"> \n            <BottomNavigation value={value} className={classes.root}>\n              {console.log(value)}\n            {/*Added routers here so that instead of pushing the entire app.js to rerender when we click it will only re-render the specific component inside the app__body <Router>*/}\n            <BottomNavigationAction onClick={()=>{window.location.href= '/';setValue(navValues[window.location.pathname])}} label=\"Home\"  icon={<HomeIcon/>} />\n            <BottomNavigationAction onClick={()=>{window.location.href= '/confessionsFeed';setValue(navValues[window.location.pathname])}} label=\"Confessions\" icon={<WhatshotSharpIcon/>} />\n            <BottomNavigationAction onClick={()=>window.location.href= '/eventsFeed'} label=\"Events\"  icon={<EventIcon/>} />\n            <BottomNavigationAction onClick={()=>window.location.href= '/chatsFeed'} label=\"Chats\"  icon={<CommentRoundedIcon />} />\n            <BottomNavigationAction onClick={()=>window.location.href= '/notificationsFeed'} label=\"Notifications\"  icon={ <NotificationsNoneIcon/>} />\n            </BottomNavigation>\n        </div>\n      </Paper>\n    )\n}\n\nexport default BottomNavigationMobile\n","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js",["233"],"import React, { useEffect, useState } from 'react'\nimport Confessions from './Confessions'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\n\n\nfunction FeedConfessions(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//confessions array\nconst [confessions, setConfessions] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('confessions').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setConfessions(snapshot.docs.map(doc =>({id:doc.id,confession:doc.data()})))\n            })\n    },[user]);\n    return (\n    <div className=\"feedConfessions \">\n            <div className=\"feedConfessions__confessions \"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                confessions.map(({id,confession})=>(<Confessions  key={id} confessionId={id} confession={confession.confession} />))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedConfessions\n","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js",["234","235","236"],"import { Avatar } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport './Confessions.css'\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\nimport {Collapse, IconButton, Input, Typography } from '@material-ui/core';\nimport { DataBase } from './firebase';\nimport firebase from 'firebase';\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction Confessions({confession,confessionId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //comments from DataBase\n    const [confessionComments,setConfessionComments] = useState([])\n    //set comment from input\n    const [confessionComment, setConfessionComment] = useState('')\n    //for commentsIcon onclick collapse\n    const [expanded, setExpanded] =  useState(false);\n    \n    //commentsIcon onclick collapse\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n      };\n    //convert to date\n    const convertToDate = (timestamp) => {\n    console.log(timestamp)\n    let currentDate = firebase.firestore.Timestamp.now();\n    console.log(currentDate)\n    let diff = Math.abs(timestamp - currentDate );\n    const dateInMillis  = diff * 1000;\n    let date = new Date(dateInMillis).toLocaleTimeString();\n    return(date.replace(/:\\d+ /, ' ')+\"hrs ago\")\n}\n//======================================Post comments to the database========================================================================================\nconst postConfessionComment = (e) => {\n    e.preventDefault();\n    //add comment to the 'comments' collection of the particular confession \n    DataBase.collection('confessions').doc(confessionId).collection('comments').add(\n        {\n         text:confessionComment,\n         username:user.displayName,\n         timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        }\n    )\n    //clear the input after posting\n    setConfessionComment('')\n}\n//====================================Get the comments from the database and display=================================================================\n    useEffect(() => {\n        \n        //if a confessionId is passed\n        if (confessionId){\n            //get a snapshot listner for 'comments' collection inside the passed 'confessionId' doc inside the collection 'confessions'\n             DataBase.collection('confessions').doc(confessionId).collection('comments').orderBy('timestamp','desc').onSnapshot(\n                    (snapshot) =>{\n                        //set comments to the data inside the doc\n                                setConfessionComments(snapshot.docs.map((doc) => (doc.data())))\n                                console.log(confessionComments+\" Ccommnets\")\n                    })\n\n                }\n\n},[,user,confessionId])\n//=====================================================================================================\n\n\n    return (\n        <div className=\"confessions\">\n            <div className=\"confessions__header\">\n                <Avatar alt={'username'} src=\"/static/images/avatar/1.jpg\"/> Annonymous\n            </div>\n            <div className=\"confessions__confession\">\n                <p style={{color:\"aliceblue\"}}>{confession}</p>\n            </div>\n            <div className=\"confessions__footer\">\n                                                {/*display the comments from the database */}\n                    <div className=\"confessions__commentsIcon\">\n                                 <IconButton onClick={handleExpandClick} id=\"comments-icon\"  disabled={confessionComments.length===0}>\n                                    <ChatBubbleOutlineRoundedIcon fontsize=\"small\" cursor=\"pointer\" aria-expanded={expanded} aria-label=\"show more comments\"/>\n                                 </IconButton>\n                                                            {/*no. of comments*/}\n                                 <Typography style={{color:'aliceblue'}}>{confessionComments.length} Comments</Typography>\n                    </div>\n\n                            <Collapse in={expanded} timeout=\"auto\" unmountOnExit >\n                            { confessionComments.map((comment) => (\n                                    //here we are accessing the username and text fields of the doc[comment(iterator)] from 'comments' collection of the DataBase\n                                    <p style={{color:\"#dae1e7\"}} key={comment.id}><strong>{comment.username+\":\"}</strong>{comment.text}<span>{\" \"+convertToDate(comment.timestamp)}</span></p>\n                                ))\n                            } \n                            </Collapse>\n                            \n            </div>\n                                                    {/*post the comment to the database*/}\n                    {//if the user is logged in then only show the post comment section\n                        user &&(\n                        <form className=\"confessions__commentBox\">\n                            <Input style={{color:\"aliceblue\"}} className=\"confessions__input\" type=\"text\" placeholder=\"Add a comment...\" value={confessionComment} onChange={(e)=> setConfessionComment(e.target.value)}/>\n                            <IconButton  disabled={!confessionComment}  variant ='contained' color=\"primary\" type ='submit' onClick={postConfessionComment}>\n                                    <SendIcon/>\n                            </IconButton>\n                        </form>) \n                    }\n        </div>\n    )\n}\n\nexport default Confessions\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js",["237","238","239","240"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUploadMobile.css'\nimport {Button, IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction ImageUploadMobile({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUploadMobile\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUploadMobile__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUploadMobile__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"imageUploadMobile__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                        {/*image input*/}\n                        <input className=\"imageUploadMobile__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label style={{color:'gray'}} htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                            {image?\"Image selected\":\"Choose a image to post\"}\n                        </label>\n                                                    {/*selected image preview*/}\n                        {image&&(<img className=\"imageUploadMobile__preview\" width=\"80px\" height=\"80px\" src={URL.createObjectURL(image)}/>)}\n                                                        {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUploadMobile__caption\" type=\"text\" placeholder=\"Enter a caption...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <Button className=\"imageUploadMobile___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            POST\n                        </Button>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUploadMobile;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js",["241","242"],{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":1,"column":45,"nodeType":"249","messageId":"250","endLine":1,"endColumn":49},{"ruleId":"247","severity":1,"message":"251","line":12,"column":8,"nodeType":"249","messageId":"250","endLine":12,"endColumn":12},{"ruleId":"247","severity":1,"message":"252","line":101,"column":10,"nodeType":"249","messageId":"250","endLine":101,"endColumn":15},{"ruleId":"247","severity":1,"message":"253","line":101,"column":16,"nodeType":"249","messageId":"250","endLine":101,"endColumn":25},{"ruleId":"254","severity":1,"message":"255","line":128,"column":28,"nodeType":"256","endLine":128,"endColumn":56},{"ruleId":"247","severity":1,"message":"257","line":3,"column":36,"nodeType":"249","messageId":"250","endLine":3,"endColumn":46},{"ruleId":"247","severity":1,"message":"258","line":45,"column":20,"nodeType":"249","messageId":"250","endLine":45,"endColumn":28},{"ruleId":"247","severity":1,"message":"259","line":55,"column":12,"nodeType":"249","messageId":"250","endLine":55,"endColumn":27},{"ruleId":"247","severity":1,"message":"260","line":55,"column":29,"nodeType":"249","messageId":"250","endLine":55,"endColumn":47},{"ruleId":"247","severity":1,"message":"261","line":57,"column":12,"nodeType":"249","messageId":"250","endLine":57,"endColumn":25},{"ruleId":"247","severity":1,"message":"262","line":57,"column":26,"nodeType":"249","messageId":"250","endLine":57,"endColumn":42},{"ruleId":"247","severity":1,"message":"263","line":58,"column":12,"nodeType":"249","messageId":"250","endLine":58,"endColumn":21},{"ruleId":"247","severity":1,"message":"264","line":58,"column":22,"nodeType":"249","messageId":"250","endLine":58,"endColumn":34},{"ruleId":"247","severity":1,"message":"265","line":69,"column":12,"nodeType":"249","messageId":"250","endLine":69,"endColumn":21},{"ruleId":"247","severity":1,"message":"266","line":69,"column":22,"nodeType":"249","messageId":"250","endLine":69,"endColumn":34},{"ruleId":"247","severity":1,"message":"267","line":79,"column":12,"nodeType":"249","messageId":"250","endLine":79,"endColumn":22},{"ruleId":"247","severity":1,"message":"268","line":101,"column":11,"nodeType":"249","messageId":"250","endLine":101,"endColumn":32},{"ruleId":"269","severity":1,"message":"270","line":179,"column":3,"nodeType":"271","messageId":"272","endLine":179,"endColumn":18},{"ruleId":"254","severity":1,"message":"273","line":218,"column":11,"nodeType":"271","endLine":218,"endColumn":31,"suggestions":"274"},{"ruleId":"269","severity":1,"message":"270","line":218,"column":11,"nodeType":"271","messageId":"272","endLine":218,"endColumn":31},{"ruleId":"275","severity":1,"message":"276","line":287,"column":53,"nodeType":"277","messageId":"278","endLine":287,"endColumn":55},{"ruleId":"254","severity":1,"message":"279","line":313,"column":3,"nodeType":"271","endLine":313,"endColumn":17,"suggestions":"280"},{"ruleId":"269","severity":1,"message":"270","line":313,"column":3,"nodeType":"271","messageId":"272","endLine":313,"endColumn":17},{"ruleId":"275","severity":1,"message":"276","line":366,"column":36,"nodeType":"277","messageId":"278","endLine":366,"endColumn":38},{"ruleId":"247","severity":1,"message":"258","line":11,"column":20,"nodeType":"249","messageId":"250","endLine":11,"endColumn":28},{"ruleId":"247","severity":1,"message":"257","line":1,"column":24,"nodeType":"249","messageId":"250","endLine":1,"endColumn":34},{"ruleId":"247","severity":1,"message":"258","line":13,"column":20,"nodeType":"249","messageId":"250","endLine":13,"endColumn":28},{"ruleId":"281","severity":1,"message":"282","line":124,"column":34,"nodeType":"283","endLine":124,"endColumn":133},{"ruleId":"284","severity":1,"message":"285","line":7,"column":30,"nodeType":"286","messageId":"278","endLine":7,"endColumn":32},{"ruleId":"247","severity":1,"message":"287","line":7,"column":22,"nodeType":"249","messageId":"250","endLine":7,"endColumn":30},{"ruleId":"247","severity":1,"message":"288","line":8,"column":8,"nodeType":"249","messageId":"250","endLine":8,"endColumn":12},{"ruleId":"247","severity":1,"message":"289","line":15,"column":8,"nodeType":"249","messageId":"250","endLine":15,"endColumn":16},{"ruleId":"247","severity":1,"message":"290","line":18,"column":10,"nodeType":"249","messageId":"250","endLine":18,"endColumn":21},{"ruleId":"247","severity":1,"message":"291","line":60,"column":12,"nodeType":"249","messageId":"250","endLine":60,"endColumn":20},{"ruleId":"247","severity":1,"message":"292","line":60,"column":22,"nodeType":"249","messageId":"250","endLine":60,"endColumn":33},{"ruleId":"254","severity":1,"message":"293","line":81,"column":8,"nodeType":"271","endLine":81,"endColumn":14,"suggestions":"294"},{"ruleId":"247","severity":1,"message":"258","line":10,"column":16,"nodeType":"249","messageId":"250","endLine":10,"endColumn":24},{"ruleId":"247","severity":1,"message":"295","line":12,"column":12,"nodeType":"249","messageId":"250","endLine":12,"endColumn":20},{"ruleId":"247","severity":1,"message":"296","line":12,"column":21,"nodeType":"249","messageId":"250","endLine":12,"endColumn":32},{"ruleId":"247","severity":1,"message":"258","line":16,"column":20,"nodeType":"249","messageId":"250","endLine":16,"endColumn":28},{"ruleId":"247","severity":1,"message":"297","line":27,"column":15,"nodeType":"249","messageId":"250","endLine":27,"endColumn":26},{"ruleId":"254","severity":1,"message":"298","line":33,"column":4,"nodeType":"271","endLine":33,"endColumn":12,"suggestions":"299"},{"ruleId":"247","severity":1,"message":"300","line":4,"column":17,"nodeType":"249","messageId":"250","endLine":4,"endColumn":26},{"ruleId":"247","severity":1,"message":"301","line":4,"column":28,"nodeType":"249","messageId":"250","endLine":4,"endColumn":36},{"ruleId":"247","severity":1,"message":"302","line":6,"column":8,"nodeType":"249","messageId":"250","endLine":6,"endColumn":13},{"ruleId":"247","severity":1,"message":"287","line":7,"column":22,"nodeType":"249","messageId":"250","endLine":7,"endColumn":30},{"ruleId":"247","severity":1,"message":"288","line":8,"column":8,"nodeType":"249","messageId":"250","endLine":8,"endColumn":12},{"ruleId":"247","severity":1,"message":"303","line":9,"column":8,"nodeType":"249","messageId":"250","endLine":9,"endColumn":19},{"ruleId":"247","severity":1,"message":"304","line":10,"column":8,"nodeType":"249","messageId":"250","endLine":10,"endColumn":18},{"ruleId":"247","severity":1,"message":"305","line":11,"column":8,"nodeType":"249","messageId":"250","endLine":11,"endColumn":14},{"ruleId":"247","severity":1,"message":"306","line":12,"column":9,"nodeType":"249","messageId":"250","endLine":12,"endColumn":19},{"ruleId":"247","severity":1,"message":"307","line":13,"column":9,"nodeType":"249","messageId":"250","endLine":13,"endColumn":13},{"ruleId":"247","severity":1,"message":"308","line":14,"column":9,"nodeType":"249","messageId":"250","endLine":14,"endColumn":17},{"ruleId":"247","severity":1,"message":"289","line":15,"column":8,"nodeType":"249","messageId":"250","endLine":15,"endColumn":16},{"ruleId":"247","severity":1,"message":"309","line":16,"column":9,"nodeType":"249","messageId":"250","endLine":16,"endColumn":22},{"ruleId":"247","severity":1,"message":"290","line":17,"column":10,"nodeType":"249","messageId":"250","endLine":17,"endColumn":21},{"ruleId":"247","severity":1,"message":"310","line":19,"column":7,"nodeType":"249","messageId":"250","endLine":19,"endColumn":16},{"ruleId":"247","severity":1,"message":"311","line":8,"column":10,"nodeType":"249","messageId":"250","endLine":8,"endColumn":19},{"ruleId":"247","severity":1,"message":"258","line":13,"column":20,"nodeType":"249","messageId":"250","endLine":13,"endColumn":28},{"ruleId":"247","severity":1,"message":"312","line":11,"column":10,"nodeType":"249","messageId":"250","endLine":11,"endColumn":15},{"ruleId":"247","severity":1,"message":"313","line":1,"column":28,"nodeType":"249","messageId":"250","endLine":1,"endColumn":34},{"ruleId":"247","severity":1,"message":"314","line":3,"column":8,"nodeType":"249","messageId":"250","endLine":3,"endColumn":12},{"ruleId":"247","severity":1,"message":"315","line":5,"column":8,"nodeType":"249","messageId":"250","endLine":5,"endColumn":18},{"ruleId":"247","severity":1,"message":"316","line":6,"column":8,"nodeType":"249","messageId":"250","endLine":6,"endColumn":17},{"ruleId":"247","severity":1,"message":"317","line":8,"column":8,"nodeType":"249","messageId":"250","endLine":8,"endColumn":19},{"ruleId":"247","severity":1,"message":"318","line":9,"column":8,"nodeType":"249","messageId":"250","endLine":9,"endColumn":16},{"ruleId":"247","severity":1,"message":"319","line":13,"column":10,"nodeType":"249","messageId":"250","endLine":13,"endColumn":13},{"ruleId":"247","severity":1,"message":"320","line":14,"column":8,"nodeType":"249","messageId":"250","endLine":14,"endColumn":20},{"ruleId":"247","severity":1,"message":"321","line":15,"column":8,"nodeType":"249","messageId":"250","endLine":15,"endColumn":17},{"ruleId":"247","severity":1,"message":"322","line":16,"column":8,"nodeType":"249","messageId":"250","endLine":16,"endColumn":22},{"ruleId":"247","severity":1,"message":"309","line":20,"column":9,"nodeType":"249","messageId":"250","endLine":20,"endColumn":22},{"ruleId":"247","severity":1,"message":"323","line":57,"column":23,"nodeType":"249","messageId":"250","endLine":57,"endColumn":39},{"ruleId":"254","severity":1,"message":"324","line":74,"column":4,"nodeType":"271","endLine":74,"endColumn":11,"suggestions":"325"},{"ruleId":"269","severity":1,"message":"270","line":74,"column":4,"nodeType":"271","messageId":"272","endLine":74,"endColumn":11},{"ruleId":"247","severity":1,"message":"326","line":3,"column":8,"nodeType":"249","messageId":"250","endLine":3,"endColumn":13},{"ruleId":"247","severity":1,"message":"327","line":32,"column":9,"nodeType":"249","messageId":"250","endLine":32,"endColumn":16},{"ruleId":"247","severity":1,"message":"267","line":34,"column":10,"nodeType":"249","messageId":"250","endLine":34,"endColumn":20},{"ruleId":"243","replacedBy":"328"},{"ruleId":"245","replacedBy":"329"},{"ruleId":"247","severity":1,"message":"257","line":1,"column":24,"nodeType":"249","messageId":"250","endLine":1,"endColumn":34},{"ruleId":"247","severity":1,"message":"258","line":13,"column":20,"nodeType":"249","messageId":"250","endLine":13,"endColumn":28},{"ruleId":"281","severity":1,"message":"282","line":141,"column":43,"nodeType":"283","endLine":141,"endColumn":120},{"ruleId":"247","severity":1,"message":"310","line":49,"column":7,"nodeType":"249","messageId":"250","endLine":49,"endColumn":16},{"ruleId":"247","severity":1,"message":"330","line":50,"column":7,"nodeType":"249","messageId":"250","endLine":50,"endColumn":21},{"ruleId":"247","severity":1,"message":"258","line":10,"column":16,"nodeType":"249","messageId":"250","endLine":10,"endColumn":24},{"ruleId":"247","severity":1,"message":"258","line":10,"column":20,"nodeType":"249","messageId":"250","endLine":10,"endColumn":28},{"ruleId":"247","severity":1,"message":"331","line":6,"column":8,"nodeType":"249","messageId":"250","endLine":6,"endColumn":29},{"ruleId":"247","severity":1,"message":"288","line":12,"column":10,"nodeType":"249","messageId":"250","endLine":12,"endColumn":14},{"ruleId":"247","severity":1,"message":"332","line":13,"column":9,"nodeType":"249","messageId":"250","endLine":13,"endColumn":22},{"ruleId":"247","severity":1,"message":"307","line":13,"column":24,"nodeType":"249","messageId":"250","endLine":13,"endColumn":28},{"ruleId":"247","severity":1,"message":"333","line":33,"column":11,"nodeType":"249","messageId":"250","endLine":33,"endColumn":19},{"ruleId":"247","severity":1,"message":"258","line":10,"column":16,"nodeType":"249","messageId":"250","endLine":10,"endColumn":24},{"ruleId":"247","severity":1,"message":"258","line":13,"column":20,"nodeType":"249","messageId":"250","endLine":13,"endColumn":28},{"ruleId":"254","severity":1,"message":"334","line":64,"column":3,"nodeType":"271","endLine":64,"endColumn":23,"suggestions":"335"},{"ruleId":"269","severity":1,"message":"270","line":64,"column":3,"nodeType":"271","messageId":"272","endLine":64,"endColumn":23},{"ruleId":"247","severity":1,"message":"257","line":1,"column":24,"nodeType":"249","messageId":"250","endLine":1,"endColumn":34},{"ruleId":"247","severity":1,"message":"336","line":6,"column":8,"nodeType":"249","messageId":"250","endLine":6,"endColumn":16},{"ruleId":"247","severity":1,"message":"258","line":13,"column":20,"nodeType":"249","messageId":"250","endLine":13,"endColumn":28},{"ruleId":"281","severity":1,"message":"282","line":125,"column":34,"nodeType":"283","endLine":125,"endColumn":139},{"ruleId":"247","severity":1,"message":"337","line":2,"column":8,"nodeType":"249","messageId":"250","endLine":2,"endColumn":14},{"ruleId":"247","severity":1,"message":"258","line":32,"column":20,"nodeType":"249","messageId":"250","endLine":32,"endColumn":28},"no-native-reassign",["338"],"no-negated-in-lhs",["339"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'useId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userFromLocalStorage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'useContext' is defined but never used.","'dispatch' is assigned a value but never used.","'favouritesColor' is assigned a value but never used.","'setfavouritesColor' is assigned a value but never used.","'firstTimeLike' is assigned a value but never used.","'setFirstTimeLike' is assigned a value but never used.","'likeColor' is assigned a value but never used.","'setLikeColor' is assigned a value but never used.","'likeCount' is assigned a value but never used.","'setLikeCount' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'handleHoverModalClose' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'chats_array' and 'user_id'. Either include them or remove the dependency array. If 'setIsPresent' needs the current value of 'user_id', you can also switch to useReducer instead of useState and read 'user_id' in the reducer.",["340"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'like' and 'likes'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLike' needs the current value of 'likes'.",["341"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'useTheme' is defined but never used.","'Card' is defined but never used.","'firebase' is defined but never used.","'Unsubscribe' is defined but never used.","'messages' is assigned a value but never used.","'setMessages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chats'. Either include it or remove the dependency array.",["342"],"'chatName' is assigned a value but never used.","'setChatName' is assigned a value but never used.","'unsubscribe' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["343"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Badge' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'Avatar' is defined but never used.","'ButtonBase' is defined but never used.","'Link' is defined but never used.","'DataBase' is defined but never used.","'useStateValue' is defined but never used.","'useStyles' is assigned a value but never used.","'useParams' is defined but never used.","'Paper' is defined but never used.","'useRef' is defined but never used.","'clsx' is defined but never used.","'CardHeader' is defined but never used.","'CardMedia' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","'red' is defined but never used.","'FavoriteIcon' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'setNumberOfPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["344"],"'Modal' is defined but never used.","'classes' is assigned a value but never used.",["338"],["339"],"'StyledDateTime' is assigned a value but never used.","'AddPhotoAlternateIcon' is defined but never used.","'BrowserRouter' is defined but never used.","'pathname' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'confessionComments'. Either include it or remove the dependency array.",["345"],"'SendIcon' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},"Update the dependencies array to be: [postId, chats, user, user_id, chats_array]",{"range":"358","text":"359"},"Update the dependencies array to be: [like, likes, postId, user]",{"range":"360","text":"361"},"Update the dependencies array to be: [chats, user]",{"range":"362","text":"363"},"Update the dependencies array to be: [chatId, user]",{"range":"364","text":"365"},"Update the dependencies array to be: [user, userInfo]",{"range":"366","text":"367"},"Update the dependencies array to be: [user, confessionId, confessionComments]",{"range":"368","text":"369"},[9196,9216],"[postId, chats, user, user_id, chats_array]",[13759,13773],"[like, likes, postId, user]",[2558,2564],"[chats, user]",[1187,1195],"[chatId, user]",[2686,2693],"[user, userInfo]",[2829,2849],"[user, confessionId, confessionComments]"]