[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js":"16","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js":"17","/Users/deeptej/Desktop/react/texx/client/src/components/Event.js":"18","/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js":"19","/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js":"20","/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js":"21","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js":"22","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js":"23","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js":"24","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js":"25","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js":"26","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js":"27","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js":"28","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js":"29","/Users/deeptej/Desktop/react/texx/client/src/components/YourPosts.js":"30","/Users/deeptej/Desktop/react/texx/client/src/components/SwipeTab.js":"31","/Users/deeptej/Desktop/react/texx/client/src/components/YourEvents.js":"32","/Users/deeptej/Desktop/react/texx/client/src/components/EventsMenu.js":"33","/Users/deeptej/Desktop/react/texx/client/src/components/YourBookmarks.js":"34","/Users/deeptej/Desktop/react/texx/client/src/components/AlertDialog.js":"35","/Users/deeptej/Desktop/react/texx/client/src/components/chat/GetRecentMessage.js":"36","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetMember.js":"37","/Users/deeptej/Desktop/react/texx/client/src/serviceWorkerRegistration.js":"38"},{"size":845,"mtime":1622466685953,"results":"39","hashOfConfig":"40"},{"size":362,"mtime":1617957038337,"results":"41","hashOfConfig":"40"},{"size":22175,"mtime":1623768533798,"results":"42","hashOfConfig":"40"},{"size":24077,"mtime":1623767966002,"results":"43","hashOfConfig":"40"},{"size":2126,"mtime":1622489072429,"results":"44","hashOfConfig":"40"},{"size":1000,"mtime":1621365913360,"results":"45","hashOfConfig":"40"},{"size":1437,"mtime":1622453265774,"results":"46","hashOfConfig":"40"},{"size":6655,"mtime":1621538407171,"results":"47","hashOfConfig":"40"},{"size":415,"mtime":1622466531600,"results":"48","hashOfConfig":"40"},{"size":2350,"mtime":1623590090306,"results":"49","hashOfConfig":"40"},{"size":2967,"mtime":1623436151459,"results":"50","hashOfConfig":"40"},{"size":1887,"mtime":1622018217929,"results":"51","hashOfConfig":"40"},{"size":4292,"mtime":1623759946104,"results":"52","hashOfConfig":"40"},{"size":462,"mtime":1619431538338,"results":"53","hashOfConfig":"40"},{"size":639,"mtime":1621193424922,"results":"54","hashOfConfig":"40"},{"size":1106,"mtime":1621262346397,"results":"55","hashOfConfig":"40"},{"size":3091,"mtime":1623765069509,"results":"56","hashOfConfig":"40"},{"size":6336,"mtime":1623771128327,"results":"57","hashOfConfig":"40"},{"size":6577,"mtime":1623768123199,"results":"58","hashOfConfig":"40"},{"size":961,"mtime":1620716950919,"results":"59","hashOfConfig":"60"},{"size":8908,"mtime":1622455681945,"results":"61","hashOfConfig":"40"},{"size":6094,"mtime":1621533553018,"results":"62","hashOfConfig":"40"},{"size":2167,"mtime":1622490134565,"results":"63","hashOfConfig":"40"},{"size":1981,"mtime":1621578509475,"results":"64","hashOfConfig":"40"},{"size":2144,"mtime":1621268466058,"results":"65","hashOfConfig":"40"},{"size":1908,"mtime":1622489943742,"results":"66","hashOfConfig":"40"},{"size":5608,"mtime":1623772280172,"results":"67","hashOfConfig":"40"},{"size":6737,"mtime":1622455083594,"results":"68","hashOfConfig":"40"},{"size":4021,"mtime":1622454814880,"results":"69","hashOfConfig":"40"},{"size":2274,"mtime":1621954043619,"results":"70","hashOfConfig":"40"},{"size":3337,"mtime":1622455019743,"results":"71","hashOfConfig":"40"},{"size":2084,"mtime":1621954440864,"results":"72","hashOfConfig":"40"},{"size":3855,"mtime":1621520412632,"results":"73","hashOfConfig":"40"},{"size":2843,"mtime":1621954046907,"results":"74","hashOfConfig":"40"},{"size":1150,"mtime":1621537914446,"results":"75","hashOfConfig":"40"},{"size":2333,"mtime":1623762891516,"results":"76","hashOfConfig":"40"},{"size":3509,"mtime":1623765175057,"results":"77","hashOfConfig":"40"},{"size":5064,"mtime":1622466726695,"results":"78","hashOfConfig":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"1qjq3ht",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"81"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"81"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"81"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"81"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"81"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"81"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"81"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},"1caugyp",{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"81"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"81"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"81"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"81"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"81"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"81"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"81"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"81"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"81"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"81"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"81"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"81"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"81"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],["178","179"],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["180","181","182","183","184","185","186","187","188","189","190"],"/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220"],"/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",["221","222"],"import React from 'react'\n//Get material-ui icons\nimport SidebarOptions from './SidebarOptions'\nimport SearchIcon from '@material-ui/icons/Search';\nimport HomeIcon from '@material-ui/icons/Home';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport EventIcon from '@material-ui/icons/Event';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport {Button} from '@material-ui/core';\nimport './Sidebar.css'\nimport { BrowserRouter as Router,Link} from 'react-router-dom'\n\nfunction Sidebar() {\n    return (\n        <div className=\"sidebar\">\n            {/*pass icons as props to SidebarOptions component*/}\n            {/*keep i captial of Icon to let react know you are passing a component*/}\n            <Link to='/'><SidebarOptions active text=\"Home\" Icon={HomeIcon}/></Link>\n            <SidebarOptions text=\"Explore\" Icon={SearchIcon}/>\n            <Link to='/eventsFeed'><SidebarOptions text=\"Events\" Icon={EventIcon}/></Link>\n            <Link to='/confessionsFeed' onClick={()=>window.location.href='/confessionsFeed'}><SidebarOptions text=\"Confessions\" Icon={WhatshotSharpIcon}/></Link>\n            <SidebarOptions text=\"Notifications\" Icon={NotificationsNoneIcon}/>\n            {/* <SidebarOptions text=\"Messages\" Icon={MailOutlineIcon}/> */}\n            <Link to='/profile' onClick={()=>window.location.href='/profile'}><SidebarOptions text=\"Bookmarks\" Icon={BookmarkBorderIcon}/></Link>\n            <SidebarOptions text=\"More\" Icon={MoreHorizIcon}/>\n            <Link to='/createEvent' onClick={()=>window.location.href='/createEvent'}><Button variant=\"outlined\"  className=\"sidebar__event\" fullWidth>New event</Button></Link>\n            <Link to='/createConfessions' onClick={()=>window.location.href='/createConfessions'}><Button variant=\"outlined\"  className=\"sidebar__event\" fullWidth>Write an annonymous confession</Button></Link>\n        </div>\n    )\n}\n\nexport default Sidebar\n","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",["223"],"import React, { Suspense } from 'react'\nimport './Widgets.css'\nimport { Input } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport {useStateValue} from '../contexts/StateProvider'\nimport Skeleton from '@material-ui/lab/Skeleton';\nconst WidgetsChat = React.lazy(()=>import('./chat/WidgetsChat'))\nconst WigetsDummy  = React.lazy(()=>import('./chat/WigetsDummy'))\n\n\nfunction Widgets() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"widgets\"> \n            <div className=\"widgets__inputBox\">\n                <SearchIcon className=\"widgets__searchIcon\"/>\n                <Input style={{color:\"aliceblue\"}} className=\"widgets__input\" type= \"text\" placeholder=\"Search MyPal\" />\n            </div>\n            <div className=\"widgets___widgetContainer\">\n                {/* if user doesnt exists WidgetsChat component wasthrwoing an error hence I Made a fummy component which doesnt have a user object and \n                will be rendered during refresh transitions when momentarily user is unavailable instead of throwing an error  */}\n                {user?(<Suspense fallback={<Skeleton variant=\"rect\" width={100} height={500} />}><WidgetsChat/></Suspense>):(<Suspense fallback={<Skeleton variant=\"rect\" width={100} height={400} />}><WigetsDummy/></Suspense>)}\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["224","225","226"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport AlertDialog from './AlertDialog';\n\nfunction ImageUpload({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n                            \n\n                    })\n                    setOpenAlert(true)\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n                <AlertDialog text={\"New post is up!\"}  openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                                {/*image input*/}\n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                                                            {/*selected image preview*/}\n                        {image&&(<img className=\"imageUpload__preview\" width=\"20px\" height=\"20px\" src={URL.createObjectURL(image)}/>)}\n                                                             {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption for the new post...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["227","228","229"],"//structure of standard message\nimport React,{  useState } from 'react';//forwardRef keeps track of what is changing\nimport {Avatar} from '@material-ui/core';\nimport './Message.css';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport responsiveHOC from 'react-lines-ellipsis/lib/responsiveHOC'\nconst ResponsiveEllipsis = responsiveHOC()(LinesEllipsis)\n\n//====================================================================================================\n//whenver you are using forwardref first argumnet is the props from the parent component and second parameter is the ref \n//that ref parameter is then assigned to one of the elements of the given function\nconst Message = ({message}) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const [isUser, setIsUser] = useState(user.uid === message.author);\n    // if (user){\n    // setIsUser(user.uid === message.author)\n    // }\n    return (\n        //apply message__user class only if isUser is True\n        <div className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <div className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className=\"message__avatar\" alt={message.authorName} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <p className=\"message__username\" variant=\"h\">\n                        {isUser ? 'You': message.authorName || 'Unknown user'}\n                    </p>\n                </div>\n                <div className=\"message__message\">\n                        {/*react-lines-ellipsis component for clamping long messages*/}\n                        {/* <ResponsiveEllipsis\n                        text= {message.text}\n                        maxLine='8'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                        /> */}\n                        {message.text}\n                </div>\n            </div>\n        </div>\n        )\n    \n}\n\nexport default Message;","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["230","231","232","233","234"],"\n//users in sidebar chat (online/offline)\n\nimport React, { Suspense, useEffect, useState } from 'react'\nimport './WidgetsChat.css'\nimport { makeStyles} from '@material-ui/core/styles';\nimport {Link} from 'react-router-dom';\nimport {DataBase, realtime} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider';\nimport Skeleton from '@material-ui/lab/Skeleton';\nconst WidgetMember = React.lazy(() => import('./WidgetMember'))\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flex:1,\n    display: 'flex',\n    minWidth:  314,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'2px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsChat() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [chats, setChats] = useState([])\n    \n\n\n    useEffect(() => {\n        //if user is logged out it throws an error hence using try catch\n        try {\n        \n          //get all the chatIds for logged in user\n          DataBase.collection('users').doc(user.uid).collection('chats').onSnapshot((snapshot)=>(\n            setChats(snapshot.docs.map((doc) => doc.data()))\n        ))\n        console.log(chats)\n        \n           \n        }\n        catch (error) {\n            console.log(error.message+\" coming from widgetsChat getting 'chats'collection \")\n            }\n    }, [,user]);\n    console.log(chats)\n\n\n    return (\n//==========================================ALL CHATS LIST===========================================================\n        <div className=\"widgetsChat\">\n          CHATS\n          {chats.length!==0 &&  \n                (chats.map((chat)=>(\n                    <Suspense fallback={\n                        <div><Skeleton variant=\"text\" />\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={chat.key}>\n                        <Link to={`/chats/${chat.chat_user_id}`} >\n                          <WidgetMember chatId={chat.chat_user_id} chat_username= {chat.chat_username} />\n                        </Link>\n                        {console.log(chat.chat_user_id)}\n                    </Suspense>\n                ))\n            )\n            }            \n        </div>\n    )\n}\n\nexport default WidgetsChat\n","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["235"],"import React, { Suspense, useEffect, useState } from 'react'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nfunction Feed(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//posts array\nconst [posts, setPosts] = useState([]);\n//lazy loading\nconst Post = React.lazy(() => import('./Post'))\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setPosts(snapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            })\n\n\n        \n    },[user]);\n    return (\n    <div className=\"feed\">\n            <div className=\"feed__posts\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                posts.map(({id,post})=>(\n                <Suspense fallback={\n                    <div><Skeleton variant=\"text\" />\n                    <Skeleton variant=\"circle\" width={40} height={40} />\n                    <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                        <Post postId={id} username={post.username} user_id={post.user_id} caption={post.caption} imageUrl={post.imageUrl} likesCount={post.likesCount}>\n                        </Post>\n                </Suspense>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default Feed\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["236","237","238"],"/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js",["239"],"\n//users in sidebar chat (online/offline)\n\nimport React from 'react'\nimport './WidgetsDummy.css'\nimport { makeStyles } from '@material-ui/core/styles';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsDummy() {\n\n    return (\n\n        <div className=\"widgetsChat\">\n            \n        </div>\n    )\n}\n\nexport default WidgetsDummy\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js",["240","241","242","243"],"/Users/deeptej/Desktop/react/texx/client/src/components/Event.js",["244","245","246","247","248"],"/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js",["249","250","251","252","253"],"/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js",["254","255","256"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function SimpleModal({setHoverOpen,hoverOpen}) {\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = useState(getModalStyle);\n\n  return (\n    <div className=\"avatarHoverModal\">\n\n    </div>\n  );\n}\n",["257","258"],"/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js",["259","260"],"import React,{Suspense, useState} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button, IconButton, Input, Modal,TextField} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateEvent.css'\nimport AlertDialog from './AlertDialog'\nimport Skeleton from '@material-ui/lab/Skeleton';\nconst DateTimeSelect = React.lazy(()=>import('./DateTimeSelect')) \n\nfunction CreateEvent() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //description\n    const [description,setDescription] = useState('');\n    //image \n    const [imageThumbnail,setImageThumbnail] = useState(false);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //title \n    const [title,setTitle] = useState('')\n    //venue/link\n    const [venue,setVenue] = useState('')\n    //Datetime\n    const [dateTime,setdateTime] = useState(new Date())\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n    console.log(openAlert)\n    //get the name of the first image file you selected (image as a file)\n    const handleImageChange = (e) =>{\n        if (e.target.files[0]){\n            setImageThumbnail(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (imageThumbnail) {\n            \n            //Access the storage and upolad the image in the 'eventThumbnails' folder and give it the name =image.name\n            const uploadTask = storage.ref(`eventThumbnails/${imageThumbnail.name}`).put(imageThumbnail)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'eventThumbnails' folder in the storage\n                    .ref('eventThumbnails')\n                    //get the name of the image file\n                    .child(imageThumbnail.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('events').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set title\n                                title:title,\n                            //set date amd time\n                                dateTime:dateTime,\n                            //set venue\n                                venue:venue,\n                            //set the description attribute to the description user entered   \n                                description:description,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:user.displayName,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set interestedCount to 0 \n                                interestedCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setTitle(\"\")\n                            setDescription(\"\");\n                            setVenue(\"\")\n                            setImageThumbnail(null)\n                            \n                            \n                            \n                            \n\n                    })\n                    setOpenAlert(true)\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"createEventWrapper\">\n            <h2 id=\"createEvent_h2\"> CREATE EVENT </h2>\n        <div className=\"createEvent\">\n                                                         \n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"createEvent__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"createEvent__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n                <AlertDialog text={\"Your new event is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n\n                                                        {/*post upload form */}\n            <div className=\"createEvent_formContainer\">\n                <form className=\"createEvent__form\" onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__title\" type=\"text\" placeholder=\"Enter a the name for the event...\" onChange={(e)=>setTitle(e.target.value)} value={title}/>\n                        {/*if image is selected then show selected else show choose an image*/}\n                        <input className=\"createEvent__fileInput\" accept=\"image/*\"  id=\"imageThumbnail-button-file\" type=\"file\" onChange={handleImageChange} />\n                        <label htmlFor=\"imageThumbnail-button-file\" style={{color:\"gray\"}}>\n                            <IconButton color=\"primary\" aria-label=\"upload thumbnail\" component=\"span\">\n                                <AddPhotoAlternateIcon /> \n                            </IconButton>\n                            {imageThumbnail?\"Image selected\":\"Choose a thumnail image\"}\n                        </label>  \n                        {imageThumbnail&&(<img width=\"100px\" height=\"100px\" src={URL.createObjectURL(imageThumbnail)}/>)}\n                        {/*change the 'dateTime' from the <DateTimeSelect/> component*/}\n                        <Suspense fallback={\n                            <div><Skeleton variant=\"text\" />\n                            <Skeleton variant=\"circle\" width={40} height={40} />\n                            <Skeleton variant=\"rect\" width={210} height={118} /></div>} >\n                                <DateTimeSelect changeDate={dateTime => setdateTime(dateTime)} dateTime={dateTime}/>\n                            </Suspense>                                            \n                        <TextField placeholder=\"Enter a decription...\" className = \"createEvent__textarea\" onChange={(e)=>setDescription(e.target.value)} value={description}\n                            id=\"outlined-multiline-static\"\n                            label=\"Multiline description\"\n                            multiline\n                            rows={4}\n                            defaultValue=\"Default Value\"\n                            variant=\"outlined\"\n                            />\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__venue\" type=\"text\" placeholder=\"Enter a Venue/Link...\" onChange={(e)=>setVenue(e.target.value)} value={venue}/>\n                        <Button className=\"createEvent___iButton\" disabled = {!imageThumbnail} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>Create the event</Button>\n                </form>\n           </div>\n        </div>\n    </div>\n    )\n}\n\nexport default CreateEvent;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js",["261","262"],"import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  withStyles,\n  ThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport TextField from \"@material-ui/core/TextField\";\n\n\nconst CURRENT_THEME = {\n  background: \"#111D23\",\n  el1: \"#1B262C\",\n  el2: \"#263137\",\n  el3: \"#3C464B\",\n  text: \"#210124\",\n  textInv: \"#F0EDEE\",\n  main: \"#3857c5\",//change color here \n  secondary: \"#4DBBEB\",\n  mainShadow: \"#556AB5\",\n  danger: \"#DB162F\",\n  warning: \"\",\n  font1: `\"Roboto Slab\", \"Times New Roman\", serif`,\n  font2: `\"Roboto light\"`\n};\n\nconst styles = {\n  paper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: CURRENT_THEME.el3,\n    borderColor: CURRENT_THEME.danger\n  },\n  inputIcons: {\n    padding: 2,\n    color: CURRENT_THEME.textInv\n  },\n  input: {\n    flex: 1,\n    marginLeft: 8,\n    color: CURRENT_THEME.textInv\n  }\n};\n\nconst useStyles = makeStyles(styles);\nconst StyledDateTime = withStyles({\n  \"& .MuiPickersToolbar-toolbar\": {\n    backgroundColor: CURRENT_THEME.textInv\n  },\n  root: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.textInv,\n        \"& .MuiPickersToolbar-toolbar\": {\n          backgroundColor: CURRENT_THEME.textInv\n        }\n      }\n    }\n  }\n})(KeyboardDateTimePicker);\n\nconst CssTextField = withStyles({\n  root: {\n    //all\n    \"& .MuiIconButton-root\": {\n      color: CURRENT_THEME.textInv\n    },\n    // filled\n    \"& .MuiFilledInput-underline\": {\n      \"&:before\": {\n        borderBottomColor: \"transparent\"\n      },\n      \"&:after\": {\n        borderBottomColor: \"transparent\"\n      }\n    },\n    \"& .MuiFilledInput-input\": {\n      color: CURRENT_THEME.textInv\n      // borderRadius: \"50px 50px 0 0\"\n    },\n    \"& .MuiFilledInput-root\": {\n      borderRadius: \"10px 10px 10px 10px\",\n      backgroundColor: CURRENT_THEME.el3,\n      // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n      \"&.Mui-focused\": {\n        borderColor: \"#556AB5\",\n        backgroundColor: CURRENT_THEME.el2,\n        // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n        boxShadow: `0px 0px 10px 0px ${CURRENT_THEME.main}, 0px 0px 40px 0px ${CURRENT_THEME.main}, 0px 0px 80px 0px ${CURRENT_THEME.main}`\n        // boxShadow: '0px 0px 15px 0px #556AB5, 0px 0px 15px 0px #556AB5'\n      }\n    },\n\n    \"& .MuiInputLabel-formControl\": {\n      color: CURRENT_THEME.textInv\n    }\n    // \"& .MuiOutlinedInput-input\": {\n    //   color: CURRENT_THEME.textInv     \n    // },\n    // \"& .MuiOutlinedInput-root\": {\n    //   \"& fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     // color: \"#1ab5e1\"\n    //   },\n    //   \"& label\": {\n    //     color: CURRENT_THEME.textInv\n    //   },\n    //   \"&:hover fieldset\": {\n    //     borderColor: \"#1ab5e1\"\n    //   },\n    //   \"&.Mui-focused fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n    //   }\n    // }\n  }\n})(TextField);\n\nconst materialTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CURRENT_THEME.main\n    }\n  },\n  overrides: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.el3\n      }\n    },\n    MuiPickersCalendarHeader: {\n      iconButton: {\n        backgroundColor: \"transparent\",\n        color: CURRENT_THEME.main\n      },\n      dayLabel: {\n        color: CURRENT_THEME.textInv //days in calendar\n      },\n      transitionContainer: {\n        color: CURRENT_THEME.textInv\n      }\n    },\n    MuiPickersBasePicker: {\n      pickerView: {\n        backgroundColor: CURRENT_THEME.background\n      }\n      //   backgroundColor: CURRENT_THEME.el3,\n    },\n    MuiPickersDay: {\n      day: {\n        color: CURRENT_THEME.textInv //days in calendar\n      }\n      //   daySelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n      //   dayDisabled: {\n      //     color: CURRENT_THEME.main, // current day\n      //   },\n      //   current: {\n      //     color: CURRENT_THEME.main,\n      //   },\n    },\n    // MuiButton:{\n    //   textPrimary:{\n    //     color: CURRENT_THEME.main,\n    //   }\n    // },\n\n    MuiDialogActions: {\n      root: {\n        backgroundColor: CURRENT_THEME.background\n      }\n    },\n    MuiPickersClock: {\n      clock: {\n        backgroundColor: CURRENT_THEME.el2\n      }\n      //   pin:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n      // },\n      // MuiPickersClockPointer:{\n      //   pointer:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n    },\n    MuiPickersClockNumber: {\n      clockNumber: {\n        color: CURRENT_THEME.textInv\n      }\n      //   numberSelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n    }\n    // MuiMuiPickersTime:{\n    //   timeSelected: {\n    //     backgroundColor: CURRENT_THEME.main, //calendar circle\n    //   },\n    // },\n    // MuiPickersModal: {\n    //   dialogAction: {\n    //     color: CURRENT_THEME.main, //no se\n    //     backgroundColor: CURRENT_THEME.el3,\n    //   },\n    // },\n  }\n});\n\nfunction DateTimeSelect(props) {\n  //select the date here with myDate\n  //once date is selected, pass it on to parent component\n  const [myDate, setmyDate] = useState();\n\n  return (\n    <ThemeProvider theme={materialTheme}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <div className=\"dateTimeSelect\">\n          <KeyboardDateTimePicker\n            format={'dd-MMM-yyyy:KK:mm a'}\n            label=\"Choose date and time for event\"\n            inputVariant=\"filled\"\n            helperText=\"\"\n            TextFieldComponent={CssTextField}\n            size=\"small\"\n            value={myDate}\n            onChange={setmyDate}\n            //change the 'dateTime' state of the parent from the child\n            onClick={props.changeDate(myDate)}\n          />\n          </div>\n      </MuiPickersUtilsProvider>\n    </ThemeProvider>\n  );\n}\nexport default DateTimeSelect","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js",["263"],"import React, { useEffect, useState } from 'react'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './FeedEvents.css'\nimport { Suspense } from 'react'\nimport Skeleton from '@material-ui/lab/Skeleton'\n\nconst Event = React.lazy(()=>import('./Event'))\nfunction FeedEvents() {\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//events array\nconst [events, setEvents] = useState([]);\n//====================================Events changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'events' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('events').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and event=doc.data to the fields in the 'event' variable that we defined above\n        console.log(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n        setEvents(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n            })\n    \n        return \n\n    \n    },[user]);\n    return (\n    <div className=\"feedEvents\">\n            <div className=\"feedEvents__events\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                events.map(({id,event})=>(\n                    <Suspense fallback={\n                        <div><Skeleton variant=\"text\" />\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                            <Event key={event.id} eventId={id} dateTime={event.dateTime} venue={event.venue} title={event.title} username={event.username} user_id={event.user_id} description={event.description} imageUrl={event.imageUrl} interestedCount={event.interestedCount}/>\n                    </Suspense>\n                ))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedEvents\n","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js",["264"],"import React,{useState} from 'react';\nimport {DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button,TextField} from '@material-ui/core';\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateConfessions.css'\nimport AlertDialog from './AlertDialog';\n\nfunction CreateConfessions() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store confession\n    const [confession,setConfession] = useState('')\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n    const handlePost = (e) => {\n        DataBase.collection('confessions').add({\n            confession:confession,\n            user_id:user.uid,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        setConfession('')\n        setOpenAlert(true)\n\n    }\n    return (\n        <div className=\"createConfessions\">\n            <AlertDialog text={\"Your new confession is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n                <form className=\"createConfessions__form\">\n                    <h2 id=\"createConfessions_h2\"> Write a Confession </h2>\n                    <TextField className = \"createConfessions__textarea\" onChange={(e)=>setConfession(e.target.value)} value={confession}\n                                    id=\"outlined-multiline-static\"\n                                    label=\"Write a confession...\"\n                                    multiline\n                                    rows={15}\n                                    defaultValue=\"Default Value\"\n                                    variant=\"outlined\"\n                                    />\n                    <Button className=\"createConfessions___iButton\" disabled = {!confession} variant ='contained' color=\"primary\" type ='submit' onClick={handlePost}>Post</Button>\n                </form>\n        </div>\n        \n    )\n}\n\nexport default CreateConfessions;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js",["265","266","267"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport EventIcon from '@material-ui/icons/Event';\nimport CommentRoundedIcon from '@material-ui/icons/CommentRounded';\nimport HomeIcon from '@material-ui/icons/Home';\nimport './BottomNavigationMobile.css'\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport { Paper } from '@material-ui/core';\nimport {BrowserRouter, Link } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#1A1A1A'\n  },\n});\n\nconst navValues = {\n  '/':1,\n  '/confessionsFeed':2,\n  '/eventsFeed':3,\n  '/chatsFeed':4,\n  '/notificationsFeed':5\n}\n\n//BUG:\n// here everytime we change the value using setValue it causes one additional render\nfunction BottomNavigationMobile() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState('Home');\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n    return (\n      <Paper elevation={10}>\n        <div className=\"bottomNavigation\"> \n            <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\n            <BottomNavigationAction component={Link} to ='/' value=\"Home\"  label=\"Home\"  icon={<HomeIcon/>} />\n            <BottomNavigationAction component={Link} to= '/confessionsFeed' value=\"Confessions\" label=\"Confessions\" icon={<WhatshotSharpIcon/>} />\n            <BottomNavigationAction component={Link} to='/eventsFeed' value=\"Events\" label=\"Events\"  icon={<EventIcon/>} />\n            <BottomNavigationAction component={Link} to= '/chatsFeed' value=\"Chats\"  label=\"Chats\"  icon={<CommentRoundedIcon />} />\n            <BottomNavigationAction component={Link} to= '/notificationsFeed' value=\"Notifications\" label=\"Notifications\"  icon={ <NotificationsNoneIcon/>} />\n            </BottomNavigation>\n        </div>\n      </Paper>\n    )\n}\n\nexport default BottomNavigationMobile\n","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js",["268"],"import React, { useEffect, useState, Suspense } from 'react'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\nconst Confessions = React.lazy(()=>import('./Confessions'))\nfunction FeedConfessions(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//confessions array\nconst [confessions, setConfessions] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('confessions').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setConfessions(snapshot.docs.map(doc =>({id:doc.id,confession:doc.data()})))\n            })\n    },[user]);\n    return (\n    <div className=\"feedConfessions \">\n            <div className=\"feedConfessions__confessions \"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                confessions.map(({id,confession})=>(\n                    <Suspense fallback={\n                        <div><Skeleton variant=\"text\" />\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                            <Confessions confessionId={id} confession={confession.confession} />\n                    </Suspense>\n                ))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedConfessions\n","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js",["269","270","271","272"],"/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js",["273","274"],"import React,{useState} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUploadMobile.css'\nimport {Button, IconButton, Input, Modal} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport AlertDialog from './AlertDialog';\n\nfunction ImageUploadMobile({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n                            \n\n                    })\n\n                    setOpenAlert(true)\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUploadMobile\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUploadMobile__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUploadMobile__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n                <AlertDialog text={\"New post is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n\n                                                        {/*post upload form */}\n            <div className=\"imageUploadMobile__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                        {/*image input*/}\n                        <input className=\"imageUploadMobile__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label style={{color:'gray'}} htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                            {image?\"Image selected\":\"Choose a image to post\"}\n                        </label>\n                                                    {/*selected image preview*/}\n                        {image&&(<img className=\"imageUploadMobile__preview\" width=\"80px\" height=\"80px\" src={URL.createObjectURL(image)}/>)}\n                                                        {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUploadMobile__caption\" type=\"text\" placeholder=\"Enter a caption for the new post...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <Button className=\"imageUploadMobile___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            POST\n                        </Button>\n                </form>\n           </div> \n        </div>\n    )\n}\n\nexport default ImageUploadMobile;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js",["275"],"import React from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport firebase from 'firebase/app'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction PostMenu({postId,postUsername,postUserId,postCaption,postImage}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add report collection of the particular post \n        DataBase.collection('posts').doc(postId).collection('Report').doc(postId).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedPostId:postId,\n             reportedPostUsername:postUsername,\n             reportedPostUserId:postUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n      alert(\"Thank you for your concern we are looking into the matter!\")\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add bookmark\n      DataBase.collection('users').doc(user.uid).collection('bookmarksPost').doc(postId).set(\n          {\n           bookmarkPostId:postId,\n           bookmarkPostImage:postImage,\n           bookmarkPostCaption:postCaption,\n           bookmarkPostUsername:postUsername,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n    alert(\"Added to bookmarks\")\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default PostMenu\n","/Users/deeptej/Desktop/react/texx/client/src/components/YourPosts.js",["276","277","278"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport './YourPosts.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: '#3F4347',\n  },\n  gridList:{\n    flex:1,\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: '#363A3E',\n    overflowY: 'scroll', \n    width:'100%',\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n}));\n\nexport default function YourPosts() {\n    const classes = useStyles();\n\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //posts array\n    const [posts, setPosts] = useState([]);\n//====================================GET user created posts=========================================\n    useEffect( () => {\n        //grab the posts which belong to the logged in user from the db\n        DataBase.collection('posts').where(\"user_id\", \"==\", user.uid).get()\n        .then((querySnapshot) => {\n            setPosts(querySnapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            console.log(posts)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n        \n    },[user]);\n    \n\n  return (\n      <GridList cellHeight={180} className={classes.gridList}>\n            {posts.map((post) => (\n            <GridListTile key={post.id}>\n                <img src={post.post.imageUrl} alt={post.post.caption} />\n                <GridListTileBar\n                title={post.post.caption}\n                actionIcon={\n                    <IconButton aria-label={`info about ${post.post.caption}`} className={classes.icon}>\n                            <InfoIcon />\n                    </IconButton>\n                }\n                />\n            </GridListTile>\n            ))}\n      </GridList>\n  );\n}\n","/Users/deeptej/Desktop/react/texx/client/src/components/SwipeTab.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/YourEvents.js",["279","280"],"import { Card, CardContent, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport './YourEvents.css'\n\nfunction YourEvents() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store user's events\n    const [events,setEvents] = useState([])\n    //convert date\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n    //====================================GET user created events=========================================\n    useEffect( () => {\n        //grab the events which belong to the logged in user from the db\n        DataBase.collection('events').where(\"user_id\", \"==\", user.uid).get()\n        .then((querySnapshot) => {\n            setEvents(querySnapshot.docs.map(doc =>doc.data()))\n            console.log(events)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n        \n    },[user]);\n    return (\n        <div className=\"yourevents\">\n            {events.map(event=>(\n                    <Card className=\"yourevents__event\" key={event.id}>\n                        <CardContent className=\"yourevents__eventContent\">\n                            <Typography  component={'span'}>Event: {event.title}</Typography>\n                            <Typography  component={'span'}>Date: {convertToDate(event.dateTime)}</Typography>\n                            <Typography  component={'span'}>Venue: {event.venue}</Typography>\n                            <Typography  component={'span'}>Interested people: {event.interestedCount}</Typography>\n                        </CardContent>\n                    </Card>\n            ))}\n        </div>\n    )\n}\n\nexport default YourEvents\n","/Users/deeptej/Desktop/react/texx/client/src/components/EventsMenu.js",["281"],"import React from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport firebase from 'firebase/app'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      zIndex:1000,\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction EventsMenu({eventId,eventUsername,eventUserId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add report collection of the particular post \n        DataBase.collection('events').doc(eventId).collection('Report').doc(eventId).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedEventId:eventId,\n             reportedEventUsername:eventUsername,\n             reportedEventUserId:eventUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add bookmark\n      DataBase.collection('users').doc(user.uid).collection('bookmarksEvents').doc(eventId).set(\n          {\n           bookmarkEventUserId:eventId,\n           bookmarkEventUsername:eventUsername,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default EventsMenu\n","/Users/deeptej/Desktop/react/texx/client/src/components/YourBookmarks.js",["282","283","284","285","286","287"],"import { Card, CardContent, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport './YourBookmarks.css'\n\n\nfunction YourBookmarks() {\n     //get the user from the provider\n     const [{user}, dispatch] = useStateValue();\n     //store user's event bookmarks\n     const [eventBookmarks,setEventBookmarks] = useState([])\n     //store user's post bookmarks\n     const [postBookmarks,setPostBookmarks] = useState([])\n    //convert date\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n\n    useEffect(() => {\n        DataBase.collection('users').doc(user.uid).collection('bookmarksPost').orderBy('timestamp','desc').onSnapshot(\n            (snapshot) =>{\n                    setEventBookmarks(snapshot.docs.map((doc) => doc.data()))\n                        })\n\n        DataBase.collection('users').doc(user.uid).collection('bookmarksEvents').orderBy('timestamp','desc').onSnapshot(\n            (snapshot) =>{\n                setPostBookmarks(snapshot.docs.map((doc) => doc.data()))\n                console.log(postBookmarks)\n                        })\n                        \n    }, [,user])\n    return (\n        <div className=\"bookmarks\">\n            <div className=\"bookmarks__postBookmarks\">\n                   {postBookmarks.map(post=>(\n                    <Card className=\"yourevents__event\">\n                        <CardContent>\n                            <Typography  component={'span'}>Caption: {post.bookmarkPostCaption}</Typography>\n                            <img src={post.bookmarkPostImage}/>\n                            <Typography  component={'span'}>Posted By: {post.bookmarkPostUsername}</Typography>\n                        </CardContent>\n                    </Card>\n                     ))}\n            </div>\n            <div className=\"bookmarks__postBookmarks\">\n                    {/* {eventBookmarks.map(event=>(\n                    <Card className=\"yourevents__event\">\n                        <CardContent>\n                            <Typography>Event: {event.title}</Typography>\n                            <Typography>Date: {convertToDate(event.dateTime)}</Typography>\n                            <Typography>Venue: {event.venue}</Typography>\n                            <Typography>Interested people: {event.interestedCount}</Typography>\n                        </CardContent>\n                    </Card>\n                     ))} */}\n            </div>\n        </div>\n    )\n}\n\nexport default YourBookmarks\n","/Users/deeptej/Desktop/react/texx/client/src/components/AlertDialog.js",["288","289","290"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function AlertDialog({text,openAlert,changeAlert}) {\n  const handleClose = () => {\n    changeAlert(false);\n  };\n\n  return (\n    <div className=\"alertDialog\">\n      <Dialog\n        open={openAlert}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{text}</DialogTitle>\n        {/* <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n                \n          </DialogContentText>\n        </DialogContent> */}\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Cool!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/GetRecentMessage.js",["291","292","293","294","295","296"],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetMember.js",["297","298","299"],"/Users/deeptej/Desktop/react/texx/client/src/serviceWorkerRegistration.js",[],{"ruleId":"300","replacedBy":"301"},{"ruleId":"302","replacedBy":"303"},{"ruleId":"304","severity":1,"message":"305","line":1,"column":45,"nodeType":"306","messageId":"307","endLine":1,"endColumn":49},{"ruleId":"304","severity":1,"message":"308","line":12,"column":8,"nodeType":"306","messageId":"307","endLine":12,"endColumn":12},{"ruleId":"304","severity":1,"message":"309","line":16,"column":8,"nodeType":"306","messageId":"307","endLine":16,"endColumn":19},{"ruleId":"310","severity":1,"message":"311","line":78,"column":10,"nodeType":"312","messageId":"313","endLine":78,"endColumn":12},{"ruleId":"304","severity":1,"message":"314","line":87,"column":10,"nodeType":"306","messageId":"307","endLine":87,"endColumn":22},{"ruleId":"304","severity":1,"message":"315","line":87,"column":23,"nodeType":"306","messageId":"307","endLine":87,"endColumn":38},{"ruleId":"304","severity":1,"message":"316","line":99,"column":10,"nodeType":"306","messageId":"307","endLine":99,"endColumn":16},{"ruleId":"304","severity":1,"message":"317","line":99,"column":17,"nodeType":"306","messageId":"307","endLine":99,"endColumn":26},{"ruleId":"318","severity":1,"message":"319","line":127,"column":28,"nodeType":"320","endLine":127,"endColumn":56},{"ruleId":"304","severity":1,"message":"321","line":156,"column":11,"nodeType":"306","messageId":"307","endLine":156,"endColumn":22},{"ruleId":"318","severity":1,"message":"322","line":161,"column":17,"nodeType":"323","endLine":161,"endColumn":29},{"ruleId":"304","severity":1,"message":"324","line":3,"column":36,"nodeType":"306","messageId":"307","endLine":3,"endColumn":46},{"ruleId":"304","severity":1,"message":"325","line":6,"column":65,"nodeType":"306","messageId":"307","endLine":6,"endColumn":72},{"ruleId":"304","severity":1,"message":"326","line":6,"column":74,"nodeType":"306","messageId":"307","endLine":6,"endColumn":84},{"ruleId":"304","severity":1,"message":"327","line":14,"column":8,"nodeType":"306","messageId":"307","endLine":14,"endColumn":16},{"ruleId":"304","severity":1,"message":"328","line":43,"column":11,"nodeType":"306","messageId":"307","endLine":43,"endColumn":18},{"ruleId":"304","severity":1,"message":"329","line":45,"column":20,"nodeType":"306","messageId":"307","endLine":45,"endColumn":28},{"ruleId":"304","severity":1,"message":"330","line":51,"column":12,"nodeType":"306","messageId":"307","endLine":51,"endColumn":17},{"ruleId":"304","severity":1,"message":"331","line":51,"column":19,"nodeType":"306","messageId":"307","endLine":51,"endColumn":27},{"ruleId":"304","severity":1,"message":"332","line":54,"column":12,"nodeType":"306","messageId":"307","endLine":54,"endColumn":27},{"ruleId":"304","severity":1,"message":"333","line":54,"column":29,"nodeType":"306","messageId":"307","endLine":54,"endColumn":47},{"ruleId":"304","severity":1,"message":"334","line":56,"column":12,"nodeType":"306","messageId":"307","endLine":56,"endColumn":25},{"ruleId":"304","severity":1,"message":"335","line":56,"column":26,"nodeType":"306","messageId":"307","endLine":56,"endColumn":42},{"ruleId":"304","severity":1,"message":"336","line":57,"column":12,"nodeType":"306","messageId":"307","endLine":57,"endColumn":21},{"ruleId":"304","severity":1,"message":"337","line":57,"column":22,"nodeType":"306","messageId":"307","endLine":57,"endColumn":34},{"ruleId":"304","severity":1,"message":"338","line":73,"column":12,"nodeType":"306","messageId":"307","endLine":73,"endColumn":22},{"ruleId":"304","severity":1,"message":"339","line":75,"column":12,"nodeType":"306","messageId":"307","endLine":75,"endColumn":17},{"ruleId":"304","severity":1,"message":"340","line":75,"column":18,"nodeType":"306","messageId":"307","endLine":75,"endColumn":26},{"ruleId":"304","severity":1,"message":"341","line":77,"column":12,"nodeType":"306","messageId":"307","endLine":77,"endColumn":21},{"ruleId":"304","severity":1,"message":"342","line":77,"column":22,"nodeType":"306","messageId":"307","endLine":77,"endColumn":34},{"ruleId":"304","severity":1,"message":"343","line":80,"column":12,"nodeType":"306","messageId":"307","endLine":80,"endColumn":15},{"ruleId":"304","severity":1,"message":"344","line":80,"column":16,"nodeType":"306","messageId":"307","endLine":80,"endColumn":22},{"ruleId":"304","severity":1,"message":"345","line":84,"column":11,"nodeType":"306","messageId":"307","endLine":84,"endColumn":16},{"ruleId":"304","severity":1,"message":"346","line":91,"column":11,"nodeType":"306","messageId":"307","endLine":91,"endColumn":15},{"ruleId":"304","severity":1,"message":"347","line":106,"column":11,"nodeType":"306","messageId":"307","endLine":106,"endColumn":32},{"ruleId":"318","severity":1,"message":"348","line":191,"column":3,"nodeType":"349","endLine":191,"endColumn":12,"suggestions":"350"},{"ruleId":"351","severity":1,"message":"352","line":191,"column":3,"nodeType":"349","messageId":"353","endLine":191,"endColumn":12},{"ruleId":"318","severity":1,"message":"354","line":229,"column":11,"nodeType":"349","endLine":229,"endColumn":31,"suggestions":"355"},{"ruleId":"351","severity":1,"message":"352","line":229,"column":11,"nodeType":"349","messageId":"353","endLine":229,"endColumn":31},{"ruleId":"351","severity":1,"message":"352","line":252,"column":3,"nodeType":"349","messageId":"353","endLine":252,"endColumn":18},{"ruleId":"356","severity":1,"message":"357","line":381,"column":49,"nodeType":"358","messageId":"313","endLine":381,"endColumn":51},{"ruleId":"304","severity":1,"message":"359","line":7,"column":8,"nodeType":"306","messageId":"307","endLine":7,"endColumn":23},{"ruleId":"304","severity":1,"message":"360","line":14,"column":27,"nodeType":"306","messageId":"307","endLine":14,"endColumn":33},{"ruleId":"304","severity":1,"message":"329","line":13,"column":20,"nodeType":"306","messageId":"307","endLine":13,"endColumn":28},{"ruleId":"304","severity":1,"message":"324","line":1,"column":24,"nodeType":"306","messageId":"307","endLine":1,"endColumn":34},{"ruleId":"304","severity":1,"message":"329","line":14,"column":20,"nodeType":"306","messageId":"307","endLine":14,"endColumn":28},{"ruleId":"361","severity":1,"message":"362","line":128,"column":34,"nodeType":"363","endLine":128,"endColumn":133},{"ruleId":"304","severity":1,"message":"364","line":8,"column":7,"nodeType":"306","messageId":"307","endLine":8,"endColumn":25},{"ruleId":"304","severity":1,"message":"329","line":17,"column":20,"nodeType":"306","messageId":"307","endLine":17,"endColumn":28},{"ruleId":"304","severity":1,"message":"365","line":18,"column":20,"nodeType":"306","messageId":"307","endLine":18,"endColumn":29},{"ruleId":"304","severity":1,"message":"366","line":8,"column":19,"nodeType":"306","messageId":"307","endLine":8,"endColumn":27},{"ruleId":"304","severity":1,"message":"329","line":51,"column":20,"nodeType":"306","messageId":"307","endLine":51,"endColumn":28},{"ruleId":"304","severity":1,"message":"328","line":52,"column":11,"nodeType":"306","messageId":"307","endLine":52,"endColumn":18},{"ruleId":"318","severity":1,"message":"367","line":72,"column":8,"nodeType":"349","endLine":72,"endColumn":15,"suggestions":"368"},{"ruleId":"351","severity":1,"message":"352","line":72,"column":8,"nodeType":"349","messageId":"353","endLine":72,"endColumn":15},{"ruleId":"304","severity":1,"message":"329","line":9,"column":16,"nodeType":"306","messageId":"307","endLine":9,"endColumn":24},{"ruleId":"304","severity":1,"message":"329","line":19,"column":20,"nodeType":"306","messageId":"307","endLine":19,"endColumn":28},{"ruleId":"318","severity":1,"message":"369","line":65,"column":4,"nodeType":"349","endLine":65,"endColumn":22,"suggestions":"370"},{"ruleId":"351","severity":1,"message":"352","line":65,"column":4,"nodeType":"349","messageId":"353","endLine":65,"endColumn":22},{"ruleId":"304","severity":1,"message":"371","line":8,"column":7,"nodeType":"306","messageId":"307","endLine":8,"endColumn":16},{"ruleId":"304","severity":1,"message":"372","line":6,"column":9,"nodeType":"306","messageId":"307","endLine":6,"endColumn":23},{"ruleId":"304","severity":1,"message":"373","line":6,"column":25,"nodeType":"306","messageId":"307","endLine":6,"endColumn":36},{"ruleId":"304","severity":1,"message":"374","line":7,"column":9,"nodeType":"306","messageId":"307","endLine":7,"endColumn":17},{"ruleId":"304","severity":1,"message":"329","line":13,"column":20,"nodeType":"306","messageId":"307","endLine":13,"endColumn":28},{"ruleId":"304","severity":1,"message":"375","line":5,"column":8,"nodeType":"306","messageId":"307","endLine":5,"endColumn":19},{"ruleId":"304","severity":1,"message":"376","line":11,"column":10,"nodeType":"306","messageId":"307","endLine":11,"endColumn":15},{"ruleId":"304","severity":1,"message":"377","line":12,"column":8,"nodeType":"306","messageId":"307","endLine":12,"endColumn":20},{"ruleId":"304","severity":1,"message":"329","line":37,"column":20,"nodeType":"306","messageId":"307","endLine":37,"endColumn":28},{"ruleId":"318","severity":1,"message":"378","line":75,"column":4,"nodeType":"349","endLine":75,"endColumn":24,"suggestions":"379"},{"ruleId":"304","severity":1,"message":"380","line":4,"column":8,"nodeType":"306","messageId":"307","endLine":4,"endColumn":19},{"ruleId":"304","severity":1,"message":"381","line":48,"column":8,"nodeType":"306","messageId":"307","endLine":48,"endColumn":21},{"ruleId":"304","severity":1,"message":"382","line":48,"column":23,"nodeType":"306","messageId":"307","endLine":48,"endColumn":39},{"ruleId":"318","severity":1,"message":"383","line":65,"column":4,"nodeType":"349","endLine":65,"endColumn":11,"suggestions":"384"},{"ruleId":"351","severity":1,"message":"352","line":65,"column":4,"nodeType":"349","messageId":"353","endLine":65,"endColumn":11},{"ruleId":"304","severity":1,"message":"385","line":3,"column":8,"nodeType":"306","messageId":"307","endLine":3,"endColumn":13},{"ruleId":"304","severity":1,"message":"328","line":32,"column":9,"nodeType":"306","messageId":"307","endLine":32,"endColumn":16},{"ruleId":"304","severity":1,"message":"338","line":34,"column":10,"nodeType":"306","messageId":"307","endLine":34,"endColumn":20},{"ruleId":"300","replacedBy":"386"},{"ruleId":"302","replacedBy":"387"},{"ruleId":"304","severity":1,"message":"329","line":15,"column":20,"nodeType":"306","messageId":"307","endLine":15,"endColumn":28},{"ruleId":"361","severity":1,"message":"362","line":150,"column":43,"nodeType":"363","endLine":150,"endColumn":120},{"ruleId":"304","severity":1,"message":"371","line":49,"column":7,"nodeType":"306","messageId":"307","endLine":49,"endColumn":16},{"ruleId":"304","severity":1,"message":"388","line":50,"column":7,"nodeType":"306","messageId":"307","endLine":50,"endColumn":21},{"ruleId":"304","severity":1,"message":"329","line":12,"column":16,"nodeType":"306","messageId":"307","endLine":12,"endColumn":24},{"ruleId":"304","severity":1,"message":"329","line":11,"column":20,"nodeType":"306","messageId":"307","endLine":11,"endColumn":28},{"ruleId":"304","severity":1,"message":"389","line":1,"column":17,"nodeType":"306","messageId":"307","endLine":1,"endColumn":25},{"ruleId":"304","severity":1,"message":"390","line":12,"column":9,"nodeType":"306","messageId":"307","endLine":12,"endColumn":22},{"ruleId":"304","severity":1,"message":"391","line":20,"column":7,"nodeType":"306","messageId":"307","endLine":20,"endColumn":16},{"ruleId":"304","severity":1,"message":"329","line":11,"column":16,"nodeType":"306","messageId":"307","endLine":11,"endColumn":24},{"ruleId":"304","severity":1,"message":"326","line":6,"column":38,"nodeType":"306","messageId":"307","endLine":6,"endColumn":48},{"ruleId":"304","severity":1,"message":"329","line":13,"column":20,"nodeType":"306","messageId":"307","endLine":13,"endColumn":28},{"ruleId":"318","severity":1,"message":"392","line":64,"column":3,"nodeType":"349","endLine":64,"endColumn":23,"suggestions":"393"},{"ruleId":"351","severity":1,"message":"352","line":64,"column":3,"nodeType":"349","messageId":"353","endLine":64,"endColumn":23},{"ruleId":"304","severity":1,"message":"329","line":13,"column":20,"nodeType":"306","messageId":"307","endLine":13,"endColumn":28},{"ruleId":"361","severity":1,"message":"362","line":130,"column":34,"nodeType":"363","endLine":130,"endColumn":139},{"ruleId":"304","severity":1,"message":"329","line":31,"column":20,"nodeType":"306","messageId":"307","endLine":31,"endColumn":28},{"ruleId":"304","severity":1,"message":"394","line":6,"column":8,"nodeType":"306","messageId":"307","endLine":6,"endColumn":21},{"ruleId":"304","severity":1,"message":"329","line":35,"column":20,"nodeType":"306","messageId":"307","endLine":35,"endColumn":28},{"ruleId":"318","severity":1,"message":"395","line":50,"column":7,"nodeType":"349","endLine":50,"endColumn":13,"suggestions":"396"},{"ruleId":"304","severity":1,"message":"329","line":9,"column":20,"nodeType":"306","messageId":"307","endLine":9,"endColumn":28},{"ruleId":"318","severity":1,"message":"397","line":32,"column":7,"nodeType":"349","endLine":32,"endColumn":13,"suggestions":"398"},{"ruleId":"304","severity":1,"message":"329","line":32,"column":20,"nodeType":"306","messageId":"307","endLine":32,"endColumn":28},{"ruleId":"304","severity":1,"message":"329","line":10,"column":21,"nodeType":"306","messageId":"307","endLine":10,"endColumn":29},{"ruleId":"304","severity":1,"message":"399","line":12,"column":13,"nodeType":"306","messageId":"307","endLine":12,"endColumn":27},{"ruleId":"304","severity":1,"message":"400","line":16,"column":11,"nodeType":"306","messageId":"307","endLine":16,"endColumn":24},{"ruleId":"318","severity":1,"message":"401","line":36,"column":8,"nodeType":"349","endLine":36,"endColumn":15,"suggestions":"402"},{"ruleId":"351","severity":1,"message":"352","line":36,"column":8,"nodeType":"349","messageId":"353","endLine":36,"endColumn":15},{"ruleId":"361","severity":1,"message":"362","line":44,"column":29,"nodeType":"363","endLine":44,"endColumn":64},{"ruleId":"304","severity":1,"message":"389","line":1,"column":17,"nodeType":"306","messageId":"307","endLine":1,"endColumn":25},{"ruleId":"304","severity":1,"message":"403","line":5,"column":8,"nodeType":"306","messageId":"307","endLine":5,"endColumn":21},{"ruleId":"304","severity":1,"message":"404","line":6,"column":8,"nodeType":"306","messageId":"307","endLine":6,"endColumn":25},{"ruleId":"304","severity":1,"message":"374","line":4,"column":10,"nodeType":"306","messageId":"307","endLine":4,"endColumn":18},{"ruleId":"304","severity":1,"message":"405","line":6,"column":8,"nodeType":"306","messageId":"307","endLine":6,"endColumn":16},{"ruleId":"304","severity":1,"message":"329","line":10,"column":20,"nodeType":"306","messageId":"307","endLine":10,"endColumn":28},{"ruleId":"318","severity":1,"message":"369","line":50,"column":4,"nodeType":"349","endLine":50,"endColumn":22,"suggestions":"406"},{"ruleId":"351","severity":1,"message":"352","line":50,"column":4,"nodeType":"349","messageId":"353","endLine":50,"endColumn":22},{"ruleId":"356","severity":1,"message":"407","line":56,"column":93,"nodeType":"358","messageId":"313","endLine":56,"endColumn":95},{"ruleId":"304","severity":1,"message":"329","line":43,"column":20,"nodeType":"306","messageId":"307","endLine":43,"endColumn":28},{"ruleId":"351","severity":1,"message":"352","line":56,"column":9,"nodeType":"349","messageId":"353","endLine":56,"endColumn":39},{"ruleId":"356","severity":1,"message":"357","line":73,"column":45,"nodeType":"358","messageId":"313","endLine":73,"endColumn":47},"no-native-reassign",["408"],"no-negated-in-lhs",["409"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'SendMessage' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'openRequired' is assigned a value but never used.","'setOpenRequired' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userFromLocalStorage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'unsubscribe' is assigned a value but never used.","Assignments to the 'user_Id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","'useContext' is defined but never used.","'Popover' is defined but never used.","'Typography' is defined but never used.","'FlipMove' is defined but never used.","'classes' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'likes' is assigned a value but never used.","'setLikes' is assigned a value but never used.","'favouritesColor' is assigned a value but never used.","'setfavouritesColor' is assigned a value but never used.","'firstTimeLike' is assigned a value but never used.","'setFirstTimeLike' is assigned a value but never used.","'likeColor' is assigned a value but never used.","'setLikeColor' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'liked' is assigned a value but never used.","'setLiked' is assigned a value but never used.","'likedData' is assigned a value but never used.","'setLikedData' is assigned a value but never used.","'uid' is assigned a value but never used.","'setUid' is assigned a value but never used.","'count' is assigned a value but never used.","'open' is assigned a value but never used.","'handleHoverModalClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'like', 'likeCount', and 'user.uid'. Either include them or remove the dependency array.","ArrayExpression",["410"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'chats_array' and 'user_id'. Either include them or remove the dependency array. If 'setIsPresent' needs the current value of 'user_id', you can also switch to useReducer instead of useState and read 'user_id' in the reducer.",["411"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'MailOutlineIcon' is defined but never used.","'Router' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ResponsiveEllipsis' is assigned a value but never used.","'setIsUser' is assigned a value but never used.","'realtime' is defined but never used.","React Hook useEffect has a missing dependency: 'chats'. Either include it or remove the dependency array.",["412"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["413"],"'useStyles' is assigned a value but never used.","'InsertEmoticon' is defined but never used.","'MicOutlined' is defined but never used.","'DataBase' is defined but never used.","'CardActions' is defined but never used.","'Paper' is defined but never used.","'MoreVertIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.",["414"],"'CardContent' is defined but never used.","'numberOfPosts' is assigned a value but never used.","'setNumberOfPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["415"],"'Modal' is defined but never used.",["408"],["409"],"'StyledDateTime' is assigned a value but never used.","'useState' is defined but never used.","'BrowserRouter' is defined but never used.","'navValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'confessionComments'. Either include it or remove the dependency array.",["416"],"'ListSubheader' is defined but never used.","React Hook useEffect has a missing dependency: 'posts'. Either include it or remove the dependency array.",["417"],"React Hook useEffect has a missing dependency: 'events'. Either include it or remove the dependency array.",["418"],"'eventBookmarks' is assigned a value but never used.","'convertToDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'postBookmarks'. Either include it or remove the dependency array.",["419"],"'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'firebase' is defined but never used.",["420"],"Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"427","fix":"441"},"Update the dependencies array to be: [like, likeCount, postId, user.uid]",{"range":"442","text":"443"},"Update the dependencies array to be: [postId, chats, user, user_id, chats_array]",{"range":"444","text":"445"},"Update the dependencies array to be: [chats, user]",{"range":"446","text":"447"},"Update the dependencies array to be: [chatId, messages, user]",{"range":"448","text":"449"},"Update the dependencies array to be: [eventId, interested, user.uid]",{"range":"450","text":"451"},"Update the dependencies array to be: [user, userInfo]",{"range":"452","text":"453"},"Update the dependencies array to be: [user, confessionId, confessionComments]",{"range":"454","text":"455"},"Update the dependencies array to be: [posts, user]",{"range":"456","text":"457"},"Update the dependencies array to be: [events, user]",{"range":"458","text":"459"},"Update the dependencies array to be: [postBookmarks, user]",{"range":"460","text":"461"},{"range":"462","text":"449"},[7468,7477],"[like, likeCount, postId, user.uid]",[9375,9395],"[postId, chats, user, user_id, chats_array]",[1998,2005],"[chats, user]",[2478,2496],"[chatId, messages, user]",[2954,2974],"[eventId, interested, user.uid]",[2217,2224],"[user, userInfo]",[2829,2849],"[user, confessionId, confessionComments]",[1646,1652],"[posts, user]",[1297,1303],"[events, user]",[1487,1494],"[postBookmarks, user]",[1862,1880]]