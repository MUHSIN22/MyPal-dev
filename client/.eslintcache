[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js":"16","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js":"17","/Users/deeptej/Desktop/react/texx/client/src/components/Event.js":"18","/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js":"19","/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js":"20","/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js":"21","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js":"22","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js":"23","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js":"24","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js":"25","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js":"26","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js":"27","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js":"28","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js":"29"},{"size":730,"mtime":1618602690657,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1617957038337,"results":"32","hashOfConfig":"31"},{"size":21757,"mtime":1621366051376,"results":"33","hashOfConfig":"31"},{"size":24621,"mtime":1621368289099,"results":"34","hashOfConfig":"31"},{"size":2045,"mtime":1621273339104,"results":"35","hashOfConfig":"31"},{"size":1000,"mtime":1621365913360,"results":"36","hashOfConfig":"31"},{"size":1161,"mtime":1621276038750,"results":"37","hashOfConfig":"31"},{"size":6313,"mtime":1620800413495,"results":"38","hashOfConfig":"31"},{"size":415,"mtime":1619523406365,"results":"39","hashOfConfig":"31"},{"size":1931,"mtime":1621402612891,"results":"40","hashOfConfig":"31"},{"size":5948,"mtime":1621422192086,"results":"41","hashOfConfig":"31"},{"size":1464,"mtime":1620400342393,"results":"42","hashOfConfig":"31"},{"size":2622,"mtime":1621415089136,"results":"43","hashOfConfig":"31"},{"size":462,"mtime":1619431538338,"results":"44","hashOfConfig":"31"},{"size":639,"mtime":1621193424922,"results":"45","hashOfConfig":"31"},{"size":1106,"mtime":1621262346397,"results":"46","hashOfConfig":"31"},{"size":2378,"mtime":1621415086990,"results":"47","hashOfConfig":"31"},{"size":4045,"mtime":1620459681667,"results":"48","hashOfConfig":"31"},{"size":7712,"mtime":1621187298662,"results":"49","hashOfConfig":"31"},{"size":961,"mtime":1620716950919,"results":"50","hashOfConfig":"31"},{"size":8015,"mtime":1621187345490,"results":"51","hashOfConfig":"31"},{"size":5994,"mtime":1620236179812,"results":"52","hashOfConfig":"31"},{"size":1719,"mtime":1620566280215,"results":"53","hashOfConfig":"31"},{"size":1729,"mtime":1620889179559,"results":"54","hashOfConfig":"31"},{"size":2144,"mtime":1621268466058,"results":"55","hashOfConfig":"31"},{"size":1491,"mtime":1621163863527,"results":"56","hashOfConfig":"31"},{"size":5594,"mtime":1621163932391,"results":"57","hashOfConfig":"31"},{"size":6393,"mtime":1621187322636,"results":"58","hashOfConfig":"31"},{"size":3872,"mtime":1621187307021,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1caugyp",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"62"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"62"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"62"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"62"},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],["137","138"],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["139","140","141","142","143","144","145","146","147"],"/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166"],"/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",["167"],"import React from 'react'\n//Get material-ui icons\nimport SidebarOptions from './SidebarOptions'\nimport SearchIcon from '@material-ui/icons/Search';\nimport HomeIcon from '@material-ui/icons/Home';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport EventIcon from '@material-ui/icons/Event';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport {Button} from '@material-ui/core';\nimport './Sidebar.css'\nimport { BrowserRouter as Router,Link} from 'react-router-dom'\n\nfunction Sidebar() {\n    return (\n        <div className=\"sidebar\">\n            {/*pass icons as props to SidebarOptions component*/}\n            {/*keep i captial of Icon to let react know you are passing a component*/}\n            <Link to='/'><SidebarOptions active text=\"Home\" Icon={HomeIcon}/></Link>\n            <SidebarOptions text=\"Explore\" Icon={SearchIcon}/>\n            <Link to='/eventsFeed'><SidebarOptions text=\"Events\" Icon={EventIcon}/></Link>\n            <Link to='/confessionsFeed' onClick={()=>window.location.href='/confessionsFeed'}><SidebarOptions text=\"Confessions\" Icon={WhatshotSharpIcon}/></Link>\n            <SidebarOptions text=\"Notifications\" Icon={NotificationsNoneIcon}/>\n            <SidebarOptions text=\"Messages\" Icon={MailOutlineIcon}/>\n            <SidebarOptions text=\"Bookmarks\" Icon={BookmarkBorderIcon}/>\n            <SidebarOptions text=\"More\" Icon={MoreHorizIcon}/>\n            <Link to='/createEvent' onClick={()=>window.location.href='/createEvent'}><Button variant=\"outlined\"  className=\"sidebar__event\" fullWidth>New event</Button></Link>\n            <Link to='/createConfessions' onClick={()=>window.location.href='/createConfessions'}><Button variant=\"outlined\"  className=\"sidebar__event\" fullWidth>Write an annonymous confession</Button></Link>\n        </div>\n    )\n}\n\nexport default Sidebar\n","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",["168"],"import React from 'react'\nimport './Widgets.css'\nimport { Input } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport WidgetsChat from './chat/WidgetsChat'\nimport WigetsDummy from './chat/WigetsDummy'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction Widgets() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"widgets\"> \n            <div className=\"widgets__inputBox\">\n                <SearchIcon className=\"widgets__searchIcon\"/>\n                <Input style={{color:\"aliceblue\"}} className=\"widgets__input\" type= \"text\" placeholder=\"Search MyPal\" />\n            </div>\n            <div className=\"widgets___widgetContainer\">\n                {/* if user doesnt exists WidgetsChat component wasthrwoing an error hence I Made a fummy component which doesnt have a user object and \n                will be rendered during refresh transitions when momentarily user is unavailable instead of throwing an error  */}\n                {user?(<WidgetsChat/>):(<WigetsDummy/>)}\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["169","170","171"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction ImageUpload({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                                {/*image input*/}\n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                                                            {/*selected image preview*/}\n                        {image&&(<img className=\"imageUpload__preview\" width=\"20px\" height=\"20px\" src={URL.createObjectURL(image)}/>)}\n                                                             {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["172","173","174","175","176","177"],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["178","179","180","181","182","183"],"/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["184"],"import React, { useEffect, useState } from 'react'\nimport Post from './Post';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\n\n\nfunction Feed(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//posts array\nconst [posts, setPosts] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setPosts(snapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            })\n    },[user]);\n    return (\n    <div className=\"feed\">\n            <div className=\"feed__posts\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                posts.map(({id,post})=>(<Post key={post.id} postId={id} username={post.username} user_id={post.user_id} caption={post.caption} imageUrl={post.imageUrl} likesCount={post.likesCount}></Post>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default Feed\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["185","186"],"/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js",["187"],"\n//users in sidebar chat (online/offline)\n\nimport React from 'react'\nimport './WidgetsDummy.css'\nimport { makeStyles } from '@material-ui/core/styles';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsDummy() {\n\n    return (\n\n        <div className=\"widgetsChat\">\n            \n        </div>\n    )\n}\n\nexport default WidgetsDummy\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js",["188","189"],"/Users/deeptej/Desktop/react/texx/client/src/components/Event.js",["190"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport './Event.css'\nimport { Paper } from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor:\"#2E3336\",\n  },\n  media: {\n    height: 140,\n  },\n});\nfunction Event({eventId, dateTime, venue, username,title, description, user_id, imageUrl, interestedCount}) {\n\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n//=====\n    const classes = useStyles();\n    return (\n        <div className=\"event\">\n            <div className=\"event__header\">\n                <div className=\"event__headerInfo\">\n                    <Typography className=\"event__title\"  variant=\"h5\">\n                        {title}\n                    </Typography>\n                    <span className=\"event__dateTime\">\n                        Date and time:{\" \"+convertToDate(dateTime)}\n                    </span>\n                    <span  className=\"event__location\">\n                        Venue:{venue}\n                    </span>\n                </div>\n                <MoreVertIcon style={{color:'white'}}/>\n            </div>\n            <Card className={classes.root}>\n\n                <div className=\"event__thubnail\">\n                    <CardActionArea>\n                        <CardMedia\n                        className={classes.media}\n                        image={imageUrl}\n                        />\n                    </CardActionArea>\n                </div>\n\n                <CardContent className=\"event__description\">\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {description}\n                    </Typography>\n                </CardContent>\n\n                <div className=\"event__footer\">\n                    <CardActions className=\"event__interested\">\n                        <Button size=\"small\" >    \n                                I am Interested\n                        </Button>\n                    </CardActions>\n    \n                    <CardActions className=\"event__actions\">\n                            <Button size=\"small\" onClick={() => {\n                                            if (navigator.share) {\n                                                navigator.share({\n                                                        title: document.title,\n                                                        text: \"Event short description\",\n                                                        url: window.location.href,\n                                                    })\n                                                    .then(() => console.log('Successful share'))\n                                                    .catch((error) => alert('Error sharing', error));\n                                            } else {\n                                                alert(\"Web Share API is not supported in your browser.\")\n                                            }\n                                        }} >\n                            Share with friends\n                            </Button>\n                            <Button size=\"small\" >\n                            Learn More\n                            </Button>\n                    </CardActions>\n                </div>\n            </Card>\n        </div>\n    )\n}\n\nexport default Event\n\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js",["191","192","193"],"import React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport './Profile.css'\nimport { Button, Input } from '@material-ui/core';\nimport { auth, DataBase } from './firebase';\nimport firebase from 'firebase/app'\n\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar:{\n        width: theme.spacing(15),\n        height: theme.spacing(15),\n        marginTop:10,\n        marginLeft:10,\n        marginBottom:10,\n        marginRight:10,\n      },\n}));\n\nfunction Profile() {\n//get user from firebase\nconst user = firebase.auth().currentUser\nconst classes = useStyles();\n//store the user fields from the database \nconst [userInfo,setUserInfo] = useState([])\n//store the number of posts inside posts collection\nconst [numberOfPosts, setNumberOfPosts] = useState(0)\n//show or hide edit options\nconst [showEditInput, setShowEditInput] = useState(false);\n//===========================================================================================\nuseEffect(() => {\n    //load the user info from Database on load or when user changes\n    const unsubscribe = DataBase.collection('users').doc(user?.uid).onSnapshot(snapshot=>{\n                                setUserInfo(snapshot.data());\n                                console.log(userInfo)\n    })\n\n                      //   DataBase.collection('users').doc(user.uid).collection('posts').onSnapshot(snapshot=>{\n                      //           setNumberOfPosts(snapshot.size)\n                      //   })\n    return () => {\n        unsubscribe()\n    }\n}, [,user])\n//displayName to edit the existing username\nconst [displayName,setDisplayName] = useState(user?.displayName);\n// edit bio\nconst [bio,setBio] = useState(userInfo?.bio);\nconsole.log(bio)\n//==================================================Log out =======================================\nconst logout = () => {\n    //remove the user from the local storage\n    // localStorage.setItem('user','null')\n    auth.signOut().then(() => {\n      console.log(\"sucessfully singned out\")\n    }).catch((error) => {\n      alert(error.message)\n    });\n    }\n//============================================================================================\n    //edit button event\n    const handleEditInputShow = () => {\n        setShowEditInput(true)\n    }\n    //save changes \n    const handleProfileUpdate = () => {\n        //if displayName is changed\n        if (user.displayName !== displayName){\n            user.updateProfile({\n            displayName: displayName,\n          }).then(function(result) {\n            console.log(result)\n          }).catch(function(err) {\n            alert(err.message)\n          });\n        }\n        //if bio is changed\n        else if (bio !== userInfo?.bio){\n            DataBase.collection('users').doc(user.uid).set({\n                bio:bio\n            })\n        }\n    //close edit mode\n    setShowEditInput(false)\n    }\n\n\n    return (\n        <div className=\"profile\">\n                <Card className=\"profile__card\" elevation={1}>\n                    <div className=\"profile__header\">\n                        <div className=\"profile__headerTop\">\n                                <Avatar className={classes.avatar} alt={'username'} src=\"/static/images/avatar/1.jpg\" ></Avatar>\n                                <div className=\"profle__headerInfo\">\n                                    {/*if show edit input is true then show the input elements for edit else show normal elements*/}\n                                                {/*username*/}\n                                    {!showEditInput &&<Typography>{user?.displayName}</Typography>}\n                                                {/*username edit input box*/}\n                                    {showEditInput && <Input value={displayName} onChange={(e)=>{setDisplayName(e.target.value)}}/>}\n                                    <Typography>{`Joined on \" + ${'Joining date'}`}</Typography>\n                                </div>\n                            <IconButton aria-label=\"settings\">\n                                <MoreVertIcon />\n                            </IconButton>\n                        </div>\n                                              {/*Edit button*/}\n                        <center className=\"profile__headerEditButton\">\n                            {!showEditInput &&<Button onClick={handleEditInputShow}>Edit Profile</Button>}\n                                                {/*save changes button*/}\n                            <div className=\"profile__headerSaveButton\">\n                                {showEditInput && <Button id=\"saveButton\" variant=\"outlined\" color=\"primary\" onClick={handleProfileUpdate}>Save changes</Button>}\n                                {showEditInput && <Button id=\"discardButton\" color=\"primary\" onClick={()=>{setShowEditInput(false)}}>Discard changes</Button>}\n                            </div>\n                        </center>\n                        <div className=\"profile__headerTypography\">\n                                                {/*user bio*/}\n                            {!showEditInput && <Typography>{userInfo?.bio}</Typography>}\n                                                {/*user bio edit*/}\n                            {showEditInput && <Input value={bio} onChange={(e)=>{setBio(e.target.value)}}/>}\n                            <Typography>Interests</Typography>\n                        </div>\n\n                                            {/*log out button*/}\n                        <Button className=\"profile__logoutButton\" onClick={logout}>Log out</Button>\n                    </div>\n                    <div className=\"profile__footer\">\n                    <CardContent>\n                        <Typography variant=\"h5\">\n                            STATS\n                        </Typography>\n                        <div className=\"profile__footerStats\">\n                            <div className=\"profile__footerStatsPosts\">\n                                 \n                                <Typography variant=\"body2\" >\n                                    Posts\n                                </Typography>\n                                <p>{numberOfPosts}</p>\n                                  \n                               \n                            </div>\n                            <div className=\"profile__footerStatsEvents\">\n                                <Typography variant=\"body2\" >\n                                    EVENTS\n                                </Typography>\n                                <p>{'#events'}</p>\n                            </div>\n                            <div className=\"profile__footerStatsFriends\">\n                                <Typography variant=\"body2\" >\n                                    FRIENDS\n                                </Typography>\n                                <p>{'#friends'}</p>\n                            </div>\n                        </div>\n                    </CardContent>\n                    </div>\n                    </Card>\n        </div>\n    )\n}\n\nexport default Profile\n","/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js",["194","195","196"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function SimpleModal({setHoverOpen,hoverOpen}) {\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = useState(getModalStyle);\n\n  return (\n    <div className=\"avatarHoverModal\">\n\n    </div>\n  );\n}\n",["197","198"],"/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js",["199","200"],"import React,{useState} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button, IconButton, Input, Modal,TextField} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateEvent.css'\nimport DateTimeSelect from './DateTimeSelect'\n\nfunction CreateEvent() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //description\n    const [description,setDescription] = useState('');\n    //image \n    const [imageThumbnail,setImageThumbnail] = useState(false);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //title \n    const [title,setTitle] = useState('')\n    //venue/link\n    const [venue,setVenue] = useState('')\n    //Datetime\n    const [dateTime,setdateTime] = useState(new Date())\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleImageChange = (e) =>{\n        if (e.target.files[0]){\n            setImageThumbnail(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (imageThumbnail) {\n            \n            //Access the storage and upolad the image in the 'eventThumbnails' folder and give it the name =image.name\n            const uploadTask = storage.ref(`eventThumbnails/${imageThumbnail.name}`).put(imageThumbnail)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'eventThumbnails' folder in the storage\n                    .ref('eventThumbnails')\n                    //get the name of the image file\n                    .child(imageThumbnail.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('events').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set title\n                                title:title,\n                            //set date amd time\n                                dateTime:dateTime,\n                            //set venue\n                                venue:venue,\n                            //set the description attribute to the description user entered   \n                                description:description,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:user.displayName,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set interestedCount to 0 \n                                interestedCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setTitle(\"\")\n                            setDescription(\"\");\n                            setVenue(\"\")\n                            setImageThumbnail(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"createEventWrapper\">\n            <h2 id=\"createEvent_h2\"> CREATE EVENT </h2>\n        <div className=\"createEvent\">\n                                                         \n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"createEvent__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"createEvent__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"createEvent_formContainer\">\n                <form className=\"createEvent__form\" onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__title\" type=\"text\" placeholder=\"Enter a the name for the event...\" onChange={(e)=>setTitle(e.target.value)} value={title}/>\n                        {/*if image is selected then show selected else show choose an image*/}\n                        <input className=\"createEvent__fileInput\" accept=\"image/*\"  id=\"imageThumbnail-button-file\" type=\"file\" onChange={handleImageChange} />\n                        <label htmlFor=\"imageThumbnail-button-file\" style={{color:\"gray\"}}>\n                            <IconButton color=\"primary\" aria-label=\"upload thumbnail\" component=\"span\">\n                                <AddPhotoAlternateIcon /> \n                            </IconButton>\n                            {imageThumbnail?\"Image selected\":\"Choose a thumnail image\"}\n                        </label>  \n                        {imageThumbnail&&(<img width=\"100px\" height=\"100px\" src={URL.createObjectURL(imageThumbnail)}/>)}\n                        {/*change the 'dateTime' from the <DateTimeSelect/> component*/}\n                        <DateTimeSelect changeDate={dateTime => setdateTime(dateTime)} dateTime={dateTime}/>\n                        <TextField placeholder=\"Enter a decription...\" className = \"createEvent__textarea\" onChange={(e)=>setDescription(e.target.value)} value={description}\n                            id=\"outlined-multiline-static\"\n                            label=\"Multiline description\"\n                            multiline\n                            rows={4}\n                            defaultValue=\"Default Value\"\n                            variant=\"outlined\"\n                            />\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__venue\" type=\"text\" placeholder=\"Enter a Venue/Link...\" onChange={(e)=>setVenue(e.target.value)} value={venue}/>\n                        <Button className=\"createEvent___iButton\" disabled = {!imageThumbnail} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>Create the event</Button>\n                </form>\n           </div>\n        </div>\n    </div>\n    )\n}\n\nexport default CreateEvent;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js",["201","202"],"import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  withStyles,\n  ThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport TextField from \"@material-ui/core/TextField\";\n\n\nconst CURRENT_THEME = {\n  background: \"#111D23\",\n  el1: \"#1B262C\",\n  el2: \"#263137\",\n  el3: \"#3C464B\",\n  text: \"#210124\",\n  textInv: \"#F0EDEE\",\n  main: \"#3857c5\",//change color here \n  secondary: \"#4DBBEB\",\n  mainShadow: \"#556AB5\",\n  danger: \"#DB162F\",\n  warning: \"\",\n  font1: `\"Roboto Slab\", \"Times New Roman\", serif`,\n  font2: `\"Roboto light\"`\n};\n\nconst styles = {\n  paper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: CURRENT_THEME.el3,\n    borderColor: CURRENT_THEME.danger\n  },\n  inputIcons: {\n    padding: 2,\n    color: CURRENT_THEME.textInv\n  },\n  input: {\n    flex: 1,\n    marginLeft: 8,\n    color: CURRENT_THEME.textInv\n  }\n};\n\nconst useStyles = makeStyles(styles);\nconst StyledDateTime = withStyles({\n  \"& .MuiPickersToolbar-toolbar\": {\n    backgroundColor: CURRENT_THEME.textInv\n  },\n  root: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.textInv,\n        \"& .MuiPickersToolbar-toolbar\": {\n          backgroundColor: CURRENT_THEME.textInv\n        }\n      }\n    }\n  }\n})(KeyboardDateTimePicker);\n\nconst CssTextField = withStyles({\n  root: {\n    //all\n    \"& .MuiIconButton-root\": {\n      color: CURRENT_THEME.textInv\n    },\n    // filled\n    \"& .MuiFilledInput-underline\": {\n      \"&:before\": {\n        borderBottomColor: \"transparent\"\n      },\n      \"&:after\": {\n        borderBottomColor: \"transparent\"\n      }\n    },\n    \"& .MuiFilledInput-input\": {\n      color: CURRENT_THEME.textInv\n      // borderRadius: \"50px 50px 0 0\"\n    },\n    \"& .MuiFilledInput-root\": {\n      borderRadius: \"10px 10px 10px 10px\",\n      backgroundColor: CURRENT_THEME.el3,\n      // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n      \"&.Mui-focused\": {\n        borderColor: \"#556AB5\",\n        backgroundColor: CURRENT_THEME.el2,\n        // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n        boxShadow: `0px 0px 10px 0px ${CURRENT_THEME.main}, 0px 0px 40px 0px ${CURRENT_THEME.main}, 0px 0px 80px 0px ${CURRENT_THEME.main}`\n        // boxShadow: '0px 0px 15px 0px #556AB5, 0px 0px 15px 0px #556AB5'\n      }\n    },\n\n    \"& .MuiInputLabel-formControl\": {\n      color: CURRENT_THEME.textInv\n    }\n    // \"& .MuiOutlinedInput-input\": {\n    //   color: CURRENT_THEME.textInv\n    // },\n    // \"& .MuiOutlinedInput-root\": {\n    //   \"& fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     // color: \"#1ab5e1\"\n    //   },\n    //   \"& label\": {\n    //     color: CURRENT_THEME.textInv\n    //   },\n    //   \"&:hover fieldset\": {\n    //     borderColor: \"#1ab5e1\"\n    //   },\n    //   \"&.Mui-focused fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n    //   }\n    // }\n  }\n})(TextField);\n\nconst materialTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CURRENT_THEME.main\n    }\n  },\n  overrides: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.el3\n      }\n    },\n    MuiPickersCalendarHeader: {\n      iconButton: {\n        backgroundColor: \"transparent\",\n        color: CURRENT_THEME.main\n      },\n      dayLabel: {\n        color: CURRENT_THEME.textInv //days in calendar\n      },\n      transitionContainer: {\n        color: CURRENT_THEME.textInv\n      }\n    },\n    MuiPickersBasePicker: {\n      pickerView: {\n        backgroundColor: CURRENT_THEME.background\n      }\n      //   backgroundColor: CURRENT_THEME.el3,\n    },\n    MuiPickersDay: {\n      day: {\n        color: CURRENT_THEME.textInv //days in calendar\n      }\n      //   daySelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n      //   dayDisabled: {\n      //     color: CURRENT_THEME.main, // current day\n      //   },\n      //   current: {\n      //     color: CURRENT_THEME.main,\n      //   },\n    },\n    // MuiButton:{\n    //   textPrimary:{\n    //     color: CURRENT_THEME.main,\n    //   }\n    // },\n\n    MuiDialogActions: {\n      root: {\n        backgroundColor: CURRENT_THEME.background\n      }\n    },\n    MuiPickersClock: {\n      clock: {\n        backgroundColor: CURRENT_THEME.el2\n      }\n      //   pin:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n      // },\n      // MuiPickersClockPointer:{\n      //   pointer:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n    },\n    MuiPickersClockNumber: {\n      clockNumber: {\n        color: CURRENT_THEME.textInv\n      }\n      //   numberSelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n    }\n    // MuiMuiPickersTime:{\n    //   timeSelected: {\n    //     backgroundColor: CURRENT_THEME.main, //calendar circle\n    //   },\n    // },\n    // MuiPickersModal: {\n    //   dialogAction: {\n    //     color: CURRENT_THEME.main, //no se\n    //     backgroundColor: CURRENT_THEME.el3,\n    //   },\n    // },\n  }\n});\n\nfunction DateTimeSelect(props) {\n  const [myDate, setmyDate] = useState();\n\n  return (\n    <ThemeProvider theme={materialTheme}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <div className=\"dateTimeSelect\">\n          <KeyboardDateTimePicker\n            format={'dd-MMM-yyyy:KK:mm a'}\n            label=\"Choose date and time for event\"\n            inputVariant=\"filled\"\n            helperText=\"\"\n            TextFieldComponent={CssTextField}\n            size=\"small\"\n            value={myDate}\n            onChange={setmyDate}\n            //change the 'dateTime' state of the parent from the child\n            onClick={props.changeDate(myDate)}\n          />\n          </div>\n      </MuiPickersUtilsProvider>\n    </ThemeProvider>\n  );\n}\nexport default DateTimeSelect","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js",["203"],"import React, { useEffect, useState } from 'react'\nimport Event from './Event';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './FeedEvents.css'\n\nfunction FeedEvents() {\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//events array\nconst [events, setEvents] = useState([]);\n//====================================Events changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'events' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('events').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and event=doc.data to the fields in the 'event' variable that we defined above\n        console.log(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n        setEvents(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n            })\n    \n        return \n\n    \n    },[user]);\n    return (\n    <div className=\"feedEvents\">\n            <div className=\"feedEvents__events\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                events.map(({id,event})=>(<Event key={event.id} eventId={id} dateTime={event.dateTime} venue={event.venue} title={event.title} username={event.username} user_id={event.user_id} description={event.description} imageUrl={event.imageUrl} interestedCount={event.interestedCount}/>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedEvents\n","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js",["204"],"import React,{useState} from 'react';\nimport {DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button,TextField} from '@material-ui/core';\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateConfessions.css'\n\nfunction CreateConfessions() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store confession\n    const [confession,setConfession] = useState('')\n\n    const handlePost = (e) => {\n        DataBase.collection('confessions').add({\n            confession:confession,\n            user_id:user.uid,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        setConfession('')\n\n    }\n    return (\n        <div className=\"createConfessions\">\n                <form className=\"createConfessions__form\">\n                    <h2 id=\"createConfessions_h2\"> Write a Confession </h2>\n                    <TextField placeholder = \"Write your heart out...\" className = \"createConfessions__textarea\" onChange={(e)=>setConfession(e.target.value)} value={confession}\n                                    id=\"outlined-multiline-static\"\n                                    label=\"Write a confession...\"\n                                    multiline\n                                    rows={15}\n                                    defaultValue=\"Default Value\"\n                                    variant=\"outlined\"\n                                    />\n                    <Button className=\"createConfessions___iButton\" disabled = {!confession} variant ='contained' color=\"primary\" type ='submit' onClick={handlePost}>Post</Button>\n                </form>\n        </div>\n        \n    )\n}\n\nexport default CreateConfessions;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js",["205","206","207"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport EventIcon from '@material-ui/icons/Event';\nimport CommentRoundedIcon from '@material-ui/icons/CommentRounded';\nimport HomeIcon from '@material-ui/icons/Home';\nimport './BottomNavigationMobile.css'\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport { Paper } from '@material-ui/core';\nimport {BrowserRouter, Link } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#1A1A1A'\n  },\n});\n\nconst navValues = {\n  '/':1,\n  '/confessionsFeed':2,\n  '/eventsFeed':3,\n  '/chatsFeed':4,\n  '/notificationsFeed':5\n}\n\n//BUG:\n// here everytime we change the value using setValue it causes one additional render\nfunction BottomNavigationMobile() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState('Home');\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n    return (\n      <Paper elevation={10}>\n        <div className=\"bottomNavigation\"> \n            <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\n            <BottomNavigationAction component={Link} to ='/' value=\"Home\"  label=\"Home\"  icon={<HomeIcon/>} />\n            <BottomNavigationAction component={Link} to= '/confessionsFeed' value=\"Confessions\" label=\"Confessions\" icon={<WhatshotSharpIcon/>} />\n            <BottomNavigationAction component={Link} to='/eventsFeed' value=\"Events\" label=\"Events\"  icon={<EventIcon/>} />\n            <BottomNavigationAction component={Link} to= '/chatsFeed' value=\"Chats\"  label=\"Chats\"  icon={<CommentRoundedIcon />} />\n            <BottomNavigationAction component={Link} to= '/notificationsFeed' value=\"Notifications\" label=\"Notifications\"  icon={ <NotificationsNoneIcon/>} />\n            </BottomNavigation>\n        </div>\n      </Paper>\n    )\n}\n\nexport default BottomNavigationMobile\n","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js",["208"],"import React, { useEffect, useState } from 'react'\nimport Confessions from './Confessions'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\n\n\nfunction FeedConfessions(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//confessions array\nconst [confessions, setConfessions] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('confessions').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setConfessions(snapshot.docs.map(doc =>({id:doc.id,confession:doc.data()})))\n            })\n    },[user]);\n    return (\n    <div className=\"feedConfessions \">\n            <div className=\"feedConfessions__confessions \"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                confessions.map(({id,confession})=>(<Confessions  key={id} confessionId={id} confession={confession.confession} />))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedConfessions\n","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js",["209","210","211"],"import { Avatar } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport './Confessions.css'\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\nimport {Collapse, IconButton, Input, Typography } from '@material-ui/core';\nimport { DataBase } from './firebase';\nimport firebase from 'firebase';\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction Confessions({confession,confessionId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //comments from DataBase\n    const [confessionComments,setConfessionComments] = useState([])\n    //set comment from input\n    const [confessionComment, setConfessionComment] = useState('')\n    //for commentsIcon onclick collapse\n    const [expanded, setExpanded] =  useState(false);\n    \n    //commentsIcon onclick collapse\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n      };\n    //convert to date\n    const convertToDate = (timestamp) => {\n    console.log(timestamp)\n    let currentDate = firebase.firestore.Timestamp.now();\n    console.log(currentDate)\n    let diff = Math.abs(timestamp - currentDate );\n    const dateInMillis  = diff * 1000;\n    let date = new Date(dateInMillis).toLocaleTimeString();\n    return(date.replace(/:\\d+ /, ' ')+\"hrs ago\")\n}\n//======================================Post comments to the database========================================================================================\nconst postConfessionComment = (e) => {\n    e.preventDefault();\n    //add comment to the 'comments' collection of the particular confession \n    DataBase.collection('confessions').doc(confessionId).collection('comments').add(\n        {\n         text:confessionComment,\n         username:user.displayName,\n         timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        }\n    )\n    //clear the input after posting\n    setConfessionComment('')\n}\n//====================================Get the comments from the database and display=================================================================\n    useEffect(() => {\n        \n        //if a confessionId is passed\n        if (confessionId){\n            //get a snapshot listner for 'comments' collection inside the passed 'confessionId' doc inside the collection 'confessions'\n             DataBase.collection('confessions').doc(confessionId).collection('comments').orderBy('timestamp','desc').onSnapshot(\n                    (snapshot) =>{\n                        //set comments to the data inside the doc\n                                setConfessionComments(snapshot.docs.map((doc) => (doc.data())))\n                                console.log(confessionComments+\" Ccommnets\")\n                    })\n\n                }\n\n},[,user,confessionId])\n//=====================================================================================================\n\n\n    return (\n        <div className=\"confessions\">\n            <div className=\"confessions__header\">\n                <Avatar alt={'username'} src=\"/static/images/avatar/1.jpg\"/> Annonymous\n            </div>\n            <div className=\"confessions__confession\">\n                <p style={{color:\"aliceblue\"}}>{confession}</p>\n            </div>\n            <div className=\"confessions__footer\">\n                                                {/*display the comments from the database */}\n                    <div className=\"confessions__commentsIcon\">\n                                 <IconButton onClick={handleExpandClick} id=\"comments-icon\"  disabled={confessionComments.length===0}>\n                                    <ChatBubbleOutlineRoundedIcon fontsize=\"small\" cursor=\"pointer\" aria-expanded={expanded} aria-label=\"show more comments\"/>\n                                 </IconButton>\n                                                            {/*no. of comments*/}\n                                 <Typography style={{color:'aliceblue'}}>{confessionComments.length} Comments</Typography>\n                    </div>\n\n                            <Collapse in={expanded} timeout=\"auto\" unmountOnExit >\n                            { confessionComments.map((comment) => (\n                                    //here we are accessing the username and text fields of the doc[comment(iterator)] from 'comments' collection of the DataBase\n                                    <p style={{color:\"#dae1e7\"}} key={comment.id}><strong>{comment.username+\":\"}</strong>{comment.text}<span>{\" \"+convertToDate(comment.timestamp)}</span></p>\n                                ))\n                            } \n                            </Collapse>\n                            \n            </div>\n                                                    {/*post the comment to the database*/}\n                    {//if the user is logged in then only show the post comment section\n                        user &&(\n                        <form className=\"confessions__commentBox\">\n                            <Input style={{color:\"aliceblue\"}} className=\"confessions__input\" type=\"text\" placeholder=\"Add a comment...\" value={confessionComment} onChange={(e)=> setConfessionComment(e.target.value)}/>\n                            <IconButton  disabled={!confessionComment}  variant ='contained' color=\"primary\" type ='submit' onClick={postConfessionComment}>\n                                    <SendIcon/>\n                            </IconButton>\n                        </form>) \n                    }\n        </div>\n    )\n}\n\nexport default Confessions\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js",["212","213"],"import React,{useState} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUploadMobile.css'\nimport {Button, IconButton, Input, Modal} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction ImageUploadMobile({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUploadMobile\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUploadMobile__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUploadMobile__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"imageUploadMobile__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                        {/*image input*/}\n                        <input className=\"imageUploadMobile__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label style={{color:'gray'}} htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                            {image?\"Image selected\":\"Choose a image to post\"}\n                        </label>\n                                                    {/*selected image preview*/}\n                        {image&&(<img className=\"imageUploadMobile__preview\" width=\"80px\" height=\"80px\" src={URL.createObjectURL(image)}/>)}\n                                                        {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUploadMobile__caption\" type=\"text\" placeholder=\"Enter a caption...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <Button className=\"imageUploadMobile___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            POST\n                        </Button>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUploadMobile;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js",["214"],"import React from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport firebase from 'firebase/app'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction PostMenu({postId,postUsername,postUserId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add comment to the 'comments' collection of the particular post \n        DataBase.collection('posts').doc(postId).collection('Report').doc(postId).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedPostId:postId,\n             reportedPostUsername:postUsername,\n             reportedPostUserId:postUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add comment to the 'comments' collection of the particular post \n      DataBase.collection('users').doc(user.uid).collection('bookmarksPost').doc(postId).set(\n          {\n           bookmarkPostId:postId,\n           bookmarkPostUser:user.uid,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default PostMenu\n",{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":1,"column":45,"nodeType":"221","messageId":"222","endLine":1,"endColumn":49},{"ruleId":"219","severity":1,"message":"223","line":12,"column":8,"nodeType":"221","messageId":"222","endLine":12,"endColumn":12},{"ruleId":"219","severity":1,"message":"224","line":16,"column":8,"nodeType":"221","messageId":"222","endLine":16,"endColumn":19},{"ruleId":"225","severity":1,"message":"226","line":80,"column":10,"nodeType":"227","messageId":"228","endLine":80,"endColumn":12},{"ruleId":"219","severity":1,"message":"229","line":89,"column":10,"nodeType":"221","messageId":"222","endLine":89,"endColumn":22},{"ruleId":"219","severity":1,"message":"230","line":89,"column":23,"nodeType":"221","messageId":"222","endLine":89,"endColumn":38},{"ruleId":"219","severity":1,"message":"231","line":101,"column":10,"nodeType":"221","messageId":"222","endLine":101,"endColumn":16},{"ruleId":"219","severity":1,"message":"232","line":101,"column":17,"nodeType":"221","messageId":"222","endLine":101,"endColumn":26},{"ruleId":"233","severity":1,"message":"234","line":127,"column":28,"nodeType":"235","endLine":127,"endColumn":56},{"ruleId":"219","severity":1,"message":"236","line":3,"column":36,"nodeType":"221","messageId":"222","endLine":3,"endColumn":46},{"ruleId":"219","severity":1,"message":"237","line":45,"column":20,"nodeType":"221","messageId":"222","endLine":45,"endColumn":28},{"ruleId":"219","severity":1,"message":"238","line":55,"column":12,"nodeType":"221","messageId":"222","endLine":55,"endColumn":27},{"ruleId":"219","severity":1,"message":"239","line":55,"column":29,"nodeType":"221","messageId":"222","endLine":55,"endColumn":47},{"ruleId":"219","severity":1,"message":"240","line":57,"column":12,"nodeType":"221","messageId":"222","endLine":57,"endColumn":25},{"ruleId":"219","severity":1,"message":"241","line":57,"column":26,"nodeType":"221","messageId":"222","endLine":57,"endColumn":42},{"ruleId":"219","severity":1,"message":"242","line":58,"column":12,"nodeType":"221","messageId":"222","endLine":58,"endColumn":21},{"ruleId":"219","severity":1,"message":"243","line":58,"column":22,"nodeType":"221","messageId":"222","endLine":58,"endColumn":34},{"ruleId":"219","severity":1,"message":"244","line":69,"column":12,"nodeType":"221","messageId":"222","endLine":69,"endColumn":21},{"ruleId":"219","severity":1,"message":"245","line":69,"column":22,"nodeType":"221","messageId":"222","endLine":69,"endColumn":34},{"ruleId":"219","severity":1,"message":"246","line":79,"column":12,"nodeType":"221","messageId":"222","endLine":79,"endColumn":22},{"ruleId":"219","severity":1,"message":"247","line":101,"column":11,"nodeType":"221","messageId":"222","endLine":101,"endColumn":32},{"ruleId":"248","severity":1,"message":"249","line":179,"column":3,"nodeType":"250","messageId":"251","endLine":179,"endColumn":18},{"ruleId":"233","severity":1,"message":"252","line":218,"column":11,"nodeType":"250","endLine":218,"endColumn":31,"suggestions":"253"},{"ruleId":"248","severity":1,"message":"249","line":218,"column":11,"nodeType":"250","messageId":"251","endLine":218,"endColumn":31},{"ruleId":"254","severity":1,"message":"255","line":297,"column":53,"nodeType":"256","messageId":"228","endLine":297,"endColumn":55},{"ruleId":"233","severity":1,"message":"257","line":323,"column":3,"nodeType":"250","endLine":323,"endColumn":17,"suggestions":"258"},{"ruleId":"248","severity":1,"message":"249","line":323,"column":3,"nodeType":"250","messageId":"251","endLine":323,"endColumn":17},{"ruleId":"254","severity":1,"message":"255","line":376,"column":36,"nodeType":"256","messageId":"228","endLine":376,"endColumn":38},{"ruleId":"219","severity":1,"message":"259","line":14,"column":27,"nodeType":"221","messageId":"222","endLine":14,"endColumn":33},{"ruleId":"219","severity":1,"message":"237","line":11,"column":20,"nodeType":"221","messageId":"222","endLine":11,"endColumn":28},{"ruleId":"219","severity":1,"message":"236","line":1,"column":24,"nodeType":"221","messageId":"222","endLine":1,"endColumn":34},{"ruleId":"219","severity":1,"message":"237","line":13,"column":20,"nodeType":"221","messageId":"222","endLine":13,"endColumn":28},{"ruleId":"260","severity":1,"message":"261","line":124,"column":34,"nodeType":"262","endLine":124,"endColumn":133},{"ruleId":"219","severity":1,"message":"263","line":2,"column":16,"nodeType":"221","messageId":"222","endLine":2,"endColumn":26},{"ruleId":"219","severity":1,"message":"264","line":3,"column":9,"nodeType":"221","messageId":"222","endLine":3,"endColumn":13},{"ruleId":"219","severity":1,"message":"265","line":3,"column":21,"nodeType":"221","messageId":"222","endLine":3,"endColumn":32},{"ruleId":"219","severity":1,"message":"266","line":3,"column":33,"nodeType":"221","messageId":"222","endLine":3,"endColumn":43},{"ruleId":"219","severity":1,"message":"237","line":15,"column":20,"nodeType":"221","messageId":"222","endLine":15,"endColumn":28},{"ruleId":"219","severity":1,"message":"267","line":16,"column":20,"nodeType":"221","messageId":"222","endLine":16,"endColumn":29},{"ruleId":"219","severity":1,"message":"268","line":12,"column":9,"nodeType":"221","messageId":"222","endLine":12,"endColumn":22},{"ruleId":"219","severity":1,"message":"269","line":15,"column":10,"nodeType":"221","messageId":"222","endLine":15,"endColumn":21},{"ruleId":"219","severity":1,"message":"237","line":55,"column":20,"nodeType":"221","messageId":"222","endLine":55,"endColumn":28},{"ruleId":"219","severity":1,"message":"270","line":57,"column":12,"nodeType":"221","messageId":"222","endLine":57,"endColumn":20},{"ruleId":"219","severity":1,"message":"271","line":57,"column":22,"nodeType":"221","messageId":"222","endLine":57,"endColumn":33},{"ruleId":"233","severity":1,"message":"272","line":76,"column":8,"nodeType":"250","endLine":76,"endColumn":14,"suggestions":"273"},{"ruleId":"219","severity":1,"message":"237","line":10,"column":16,"nodeType":"221","messageId":"222","endLine":10,"endColumn":24},{"ruleId":"219","severity":1,"message":"237","line":17,"column":20,"nodeType":"221","messageId":"222","endLine":17,"endColumn":28},{"ruleId":"233","severity":1,"message":"274","line":47,"column":4,"nodeType":"250","endLine":47,"endColumn":12,"suggestions":"275"},{"ruleId":"219","severity":1,"message":"276","line":8,"column":7,"nodeType":"221","messageId":"222","endLine":8,"endColumn":16},{"ruleId":"219","severity":1,"message":"277","line":2,"column":10,"nodeType":"221","messageId":"222","endLine":2,"endColumn":16},{"ruleId":"219","severity":1,"message":"237","line":13,"column":20,"nodeType":"221","messageId":"222","endLine":13,"endColumn":28},{"ruleId":"219","severity":1,"message":"278","line":11,"column":10,"nodeType":"221","messageId":"222","endLine":11,"endColumn":15},{"ruleId":"219","severity":1,"message":"279","line":47,"column":23,"nodeType":"221","messageId":"222","endLine":47,"endColumn":39},{"ruleId":"233","severity":1,"message":"280","line":64,"column":4,"nodeType":"250","endLine":64,"endColumn":11,"suggestions":"281"},{"ruleId":"248","severity":1,"message":"249","line":64,"column":4,"nodeType":"250","messageId":"251","endLine":64,"endColumn":11},{"ruleId":"219","severity":1,"message":"282","line":3,"column":8,"nodeType":"221","messageId":"222","endLine":3,"endColumn":13},{"ruleId":"219","severity":1,"message":"283","line":32,"column":9,"nodeType":"221","messageId":"222","endLine":32,"endColumn":16},{"ruleId":"219","severity":1,"message":"246","line":34,"column":10,"nodeType":"221","messageId":"222","endLine":34,"endColumn":20},{"ruleId":"215","replacedBy":"284"},{"ruleId":"217","replacedBy":"285"},{"ruleId":"219","severity":1,"message":"237","line":13,"column":20,"nodeType":"221","messageId":"222","endLine":13,"endColumn":28},{"ruleId":"260","severity":1,"message":"261","line":141,"column":43,"nodeType":"262","endLine":141,"endColumn":120},{"ruleId":"219","severity":1,"message":"276","line":49,"column":7,"nodeType":"221","messageId":"222","endLine":49,"endColumn":16},{"ruleId":"219","severity":1,"message":"286","line":50,"column":7,"nodeType":"221","messageId":"222","endLine":50,"endColumn":21},{"ruleId":"219","severity":1,"message":"237","line":10,"column":16,"nodeType":"221","messageId":"222","endLine":10,"endColumn":24},{"ruleId":"219","severity":1,"message":"237","line":10,"column":20,"nodeType":"221","messageId":"222","endLine":10,"endColumn":28},{"ruleId":"219","severity":1,"message":"287","line":1,"column":17,"nodeType":"221","messageId":"222","endLine":1,"endColumn":25},{"ruleId":"219","severity":1,"message":"268","line":12,"column":9,"nodeType":"221","messageId":"222","endLine":12,"endColumn":22},{"ruleId":"219","severity":1,"message":"288","line":20,"column":7,"nodeType":"221","messageId":"222","endLine":20,"endColumn":16},{"ruleId":"219","severity":1,"message":"237","line":10,"column":16,"nodeType":"221","messageId":"222","endLine":10,"endColumn":24},{"ruleId":"219","severity":1,"message":"237","line":13,"column":20,"nodeType":"221","messageId":"222","endLine":13,"endColumn":28},{"ruleId":"233","severity":1,"message":"289","line":64,"column":3,"nodeType":"250","endLine":64,"endColumn":23,"suggestions":"290"},{"ruleId":"248","severity":1,"message":"249","line":64,"column":3,"nodeType":"250","messageId":"251","endLine":64,"endColumn":23},{"ruleId":"219","severity":1,"message":"237","line":12,"column":20,"nodeType":"221","messageId":"222","endLine":12,"endColumn":28},{"ruleId":"260","severity":1,"message":"261","line":124,"column":34,"nodeType":"262","endLine":124,"endColumn":139},{"ruleId":"219","severity":1,"message":"237","line":31,"column":20,"nodeType":"221","messageId":"222","endLine":31,"endColumn":28},"no-native-reassign",["291"],"no-negated-in-lhs",["292"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'SendMessage' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'openRequired' is assigned a value but never used.","'setOpenRequired' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userFromLocalStorage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'useContext' is defined but never used.","'dispatch' is assigned a value but never used.","'favouritesColor' is assigned a value but never used.","'setfavouritesColor' is assigned a value but never used.","'firstTimeLike' is assigned a value but never used.","'setFirstTimeLike' is assigned a value but never used.","'likeColor' is assigned a value but never used.","'setLikeColor' is assigned a value but never used.","'likeCount' is assigned a value but never used.","'setLikeCount' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'handleHoverModalClose' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'chats_array' and 'user_id'. Either include them or remove the dependency array. If 'setIsPresent' needs the current value of 'user_id', you can also switch to useReducer instead of useState and read 'user_id' in the reducer.",["293"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has missing dependencies: 'like' and 'likes'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLike' needs the current value of 'likes'.",["294"],"'Router' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'forwardRef' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'setIsUser' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'actionTypes' is defined but never used.","'messages' is assigned a value but never used.","'setMessages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chats'. Either include it or remove the dependency array.",["295"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["296"],"'useStyles' is assigned a value but never used.","'Button' is defined but never used.","'Paper' is defined but never used.","'setNumberOfPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["297"],"'Modal' is defined but never used.","'classes' is assigned a value but never used.",["291"],["292"],"'StyledDateTime' is assigned a value but never used.","'useState' is defined but never used.","'navValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'confessionComments'. Either include it or remove the dependency array.",["298"],"no-global-assign","no-unsafe-negation",{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},"Update the dependencies array to be: [postId, chats, user, user_id, chats_array]",{"range":"311","text":"312"},"Update the dependencies array to be: [like, likes, postId, user]",{"range":"313","text":"314"},"Update the dependencies array to be: [chats, user]",{"range":"315","text":"316"},"Update the dependencies array to be: [chatId, user]",{"range":"317","text":"318"},"Update the dependencies array to be: [user, userInfo]",{"range":"319","text":"320"},"Update the dependencies array to be: [user, confessionId, confessionComments]",{"range":"321","text":"322"},[9196,9216],"[postId, chats, user, user_id, chats_array]",[14233,14247],"[like, likes, postId, user]",[2242,2248],"[chats, user]",[1765,1773],"[chatId, user]",[2167,2174],"[user, userInfo]",[2829,2849],"[user, confessionId, confessionComments]"]