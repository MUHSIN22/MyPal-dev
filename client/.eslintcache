[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js":"16","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js":"17","/Users/deeptej/Desktop/react/texx/client/src/components/Event.js":"18","/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js":"19","/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js":"20","/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js":"21","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js":"22","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js":"23","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js":"24","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js":"25","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js":"26","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js":"27","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js":"28","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js":"29","/Users/deeptej/Desktop/react/texx/client/src/components/YourPosts.js":"30","/Users/deeptej/Desktop/react/texx/client/src/components/SwipeTab.js":"31","/Users/deeptej/Desktop/react/texx/client/src/components/YourEvents.js":"32","/Users/deeptej/Desktop/react/texx/client/src/components/EventsMenu.js":"33","/Users/deeptej/Desktop/react/texx/client/src/components/YourBookmarks.js":"34","/Users/deeptej/Desktop/react/texx/client/src/components/AlertDialog.js":"35","/Users/deeptej/Desktop/react/texx/client/src/components/chat/GetRecentMessage.js":"36","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetMember.js":"37","/Users/deeptej/Desktop/react/texx/client/src/serviceWorkerRegistration.js":"38","/Users/deeptej/Desktop/react/texx/client/src/components/Home.js":"39","/Users/deeptej/Desktop/react/texx/client/src/components/SearchHits.js":"40","/Users/deeptej/Desktop/react/texx/client/src/components/UserProfile.js":"41","/Users/deeptej/Desktop/react/texx/client/src/components/UserSwipeTab.js":"42","/Users/deeptej/Desktop/react/texx/client/src/components/UserEvents.js":"43","/Users/deeptej/Desktop/react/texx/client/src/components/UserPosts.js":"44"},{"size":845,"mtime":1622466685953,"results":"45","hashOfConfig":"46"},{"size":362,"mtime":1617957038337,"results":"47","hashOfConfig":"46"},{"size":22912,"mtime":1625592127406,"results":"48","hashOfConfig":"46"},{"size":24158,"mtime":1623958535095,"results":"49","hashOfConfig":"46"},{"size":2126,"mtime":1622489072429,"results":"50","hashOfConfig":"46"},{"size":1000,"mtime":1624117043430,"results":"51","hashOfConfig":"46"},{"size":3278,"mtime":1625593138607,"results":"52","hashOfConfig":"46"},{"size":6655,"mtime":1621538407171,"results":"53","hashOfConfig":"46"},{"size":415,"mtime":1622466531600,"results":"54","hashOfConfig":"46"},{"size":2589,"mtime":1625505929445,"results":"55","hashOfConfig":"46"},{"size":3557,"mtime":1625478357250,"results":"56","hashOfConfig":"46"},{"size":1887,"mtime":1622018217929,"results":"57","hashOfConfig":"46"},{"size":4296,"mtime":1623914447880,"results":"58","hashOfConfig":"46"},{"size":462,"mtime":1619431538338,"results":"59","hashOfConfig":"46"},{"size":639,"mtime":1621193424922,"results":"60","hashOfConfig":"46"},{"size":1106,"mtime":1621262346397,"results":"61","hashOfConfig":"46"},{"size":3679,"mtime":1625478386806,"results":"62","hashOfConfig":"46"},{"size":6336,"mtime":1623771128327,"results":"63","hashOfConfig":"46"},{"size":6577,"mtime":1625585573077,"results":"64","hashOfConfig":"46"},{"size":961,"mtime":1620716950919,"results":"65","hashOfConfig":"66"},{"size":8908,"mtime":1622455681945,"results":"67","hashOfConfig":"46"},{"size":6094,"mtime":1621533553018,"results":"68","hashOfConfig":"46"},{"size":2167,"mtime":1622490134565,"results":"69","hashOfConfig":"46"},{"size":1981,"mtime":1621578509475,"results":"70","hashOfConfig":"46"},{"size":2144,"mtime":1621268466058,"results":"71","hashOfConfig":"46"},{"size":1908,"mtime":1622489943742,"results":"72","hashOfConfig":"46"},{"size":5608,"mtime":1623772280172,"results":"73","hashOfConfig":"46"},{"size":6737,"mtime":1622455083594,"results":"74","hashOfConfig":"46"},{"size":4021,"mtime":1622454814880,"results":"75","hashOfConfig":"46"},{"size":2274,"mtime":1621954043619,"results":"76","hashOfConfig":"46"},{"size":3337,"mtime":1622455019743,"results":"77","hashOfConfig":"46"},{"size":2084,"mtime":1621954440864,"results":"78","hashOfConfig":"46"},{"size":3855,"mtime":1621520412632,"results":"79","hashOfConfig":"46"},{"size":2843,"mtime":1621954046907,"results":"80","hashOfConfig":"46"},{"size":1150,"mtime":1621537914446,"results":"81","hashOfConfig":"46"},{"size":3549,"mtime":1625475960165,"results":"82","hashOfConfig":"46"},{"size":4307,"mtime":1625505743575,"results":"83","hashOfConfig":"46"},{"size":5064,"mtime":1622466726695,"results":"84","hashOfConfig":"46"},{"size":178,"mtime":1624116001686,"results":"85","hashOfConfig":"46"},{"size":444,"mtime":1625479858560,"results":"86","hashOfConfig":"46"},{"size":4157,"mtime":1625638997995,"results":"87","hashOfConfig":"46"},{"size":3373,"mtime":1625638928764,"results":"88","hashOfConfig":"46"},{"size":2005,"mtime":1625639816557,"results":"89","hashOfConfig":"46"},{"size":2194,"mtime":1625639812747,"results":"90","hashOfConfig":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"1qjq3ht",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"93"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"93"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"93"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"93"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"93"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"93"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"93"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"93"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"93"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"93"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"143"},"1caugyp",{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"93"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"93"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"93"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"93"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"93"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"93"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"93"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"93"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"93"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"93"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"93"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"93"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"93"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"93"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"93"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"93"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],["209","210"],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["211","212","213","214","215","216","217","218","219","220","221"],"/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248"],"//post component\n\nimport React , {useState,useEffect, useRef} from 'react'\nimport './Post.css'\nimport Avatar from '@material-ui/core/Avatar';\nimport {Button, Collapse, IconButton, Input, makeStyles, Modal, Popover} from '@material-ui/core';\nimport {DataBase, realtime} from './firebase'\nimport firebase from 'firebase';\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\nimport RepeatIcon from '@material-ui/icons/Repeat'\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport SendIcon from '@material-ui/icons/Send';\nimport {useStateValue} from '../contexts/StateProvider'\nimport ShareIcon from '@material-ui/icons/Share';\nimport PostMenu from './PostMenu'\n\n\n//============================================Comments pop-over styles==================================== \n    const useStyles = makeStyles((theme) => ({\n        popover: {\n          pointerEvents: 'none',\n        },\n        paper: {\n          padding: theme.spacing(1),\n          backgroundColor:'#363A3E',\n          color:'aliceblue'\n        },\n      }));\n//=============================================Modal styles============================================\n  function getModalStyle() {\n    const top = -50 ;\n    const left = -50 ;  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n  }\n  \n//=======================================================================================================\nfunction Post({postId,username,user_id,caption,imageUrl,likesCount}) {\n    const classes = useStyles();\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store comments from the database for a praticular post in an array (GET from DataBase)\n    const [comments, setComments] = useState([]);\n    //input comment for a post from the user  (POST to DataBase)\n    const [comment, setComment] = useState('');\n    //store likes from the database for a praticular post in an array (GET from DataBase)\n    const [likes, setLikes] = useState([]);\n    //input comment for a post from the user  (POST to DataBase)\n    //change color of the like button on click\n    const [favouritesColor, setfavouritesColor] = useState(false)\n    //to make sure user likes the post only once\n    const [firstTimeLike,setFirstTimeLike] = useState(true) \n    const [likeColor,setLikeColor] = useState('')\n    //to store users in chat list after getting them from the database\n    const [chats,setChats] = useState([]) \n    //the problem with let here is  it is making everything empty after \n    //to store uid and bool for if the user is present in the chat list\n    const [chats_array,setChats_array]= useState([])\n    const [isPresent,setIsPresent] = useState(false)\n    //for commentsIcon onclick collapse\n    const [expanded, setExpanded] =  useState(false);\n    //for commentsIcon onhover popup\n    const [anchorEl, setAnchorEl] =  useState(null);\n    //number of likes\n    const [likeCount,setLikeCount] = useState(likesCount)\n    //avatar hover modal\n    const [hoverOpen, setHoverOpen] = useState(false)\n    //modal styles\n    const [modalStyle] = useState(getModalStyle);\n    //no. of liked docs\n    const [liked,setLiked] = useState([])\n    //like data of already liked doc\n    const [likedData,setLikedData] = useState([])\n    //if like=true or not\n    const [like, setLike] = useState(false);\n    const [uid,setUid] =useState(user.uid)\n    //like ref\n    const likeCountRef = useRef(0)\n    //\n    const count = useRef(0)\n\n    //commentsIcon onclick collapse\n    const handleExpandClick = () => {\n      setExpanded(!expanded);\n    };\n    //commentsIcon onhover popup\n    const open = Boolean(anchorEl);\n    //open the popover that we open on hover on commentsIcon\n    const handlePopoverOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n      };\n    //close the popover that we open on hover on commentsIcon\n      const handlePopoverClose = () => {\n        setAnchorEl(null);\n      };\n\n    //open the Avatar modal\n    const handleHoverModalOpen = () => {\n        setHoverOpen(true)\n    }\n    //close the Avatar modal\n    const handleHoverModalClose = () => {\n        setHoverOpen(false)\n    }\n    //convert to date\n    const convertToDate = (timestamp) => {\n        // console.log(timestamp)\n        let currentDate = firebase.firestore.Timestamp.now();\n        // console.log(currentDate)\n        let diff = Math.abs(timestamp - currentDate );\n        const dateInMillis  = diff * 1000;\n        let date = new Date(dateInMillis).toLocaleTimeString();\n        return(date.replace(/:\\d+ /, ' ')+\"hrs ago\")\n    }\n//======================================Post likes to the database===================================================================================\nconst postLike = () => {\n    const newLikeValue = !like;\n    const newLikeCount = like ? likeCount - 1 : likeCount + 1;\n    setLike(!like);\n\n    setLikeCount(newLikeCount);\n    setLike(newLikeValue);\n    DataBase\n    .collection('posts').doc(postId)\n    .collection('postLikes').doc(user.uid)\n    .set(\n      { \n        like:newLikeValue,\n        username:user.displayName,\n        timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n      }\n    ).catch((err)=>{console.log(\"something wrong happened \"+err.message)})\n}\n//====================================Get the comments and likes from the database and display=================================================================\nuseEffect(() => {\n       \n    \n    //if a postId is passed\n    if (postId){\n        //get a snapshot listner for 'comments' collection inside the passed 'postId' doc inside the collection 'posts'\n        DataBase.collection('posts').doc(postId).collection('comments').orderBy('timestamp','desc').onSnapshot(\n                (snapshot) =>{\n                    //set comments to the data inside the doc\n                            setComments(snapshot.docs.map((doc) => (doc.data())))\n                })\n\n\n        \n    //check if the user already liked the doc or not\n    setTimeout(() => {\n            DataBase.collection('posts').doc(postId).collection('postLikes').doc(user.uid).get().then((doc) => {\n                if (doc.exists) {\n                    console.log(doc.data().like)\n                    setLike(doc.data().like)\n                    console.log(like + \" 1\")\n                    console.log(\"likedData\")\n                } else {\n                    // doc.data() will be undefined in this case\n                    console.log(\"Not liked\");\n                }\n            }).catch((error) => {\n                console.log(\"Error getting document:\", error);\n            });\n        }, 500);\n\n        \n            //    grab the docs which have like=true \n            setTimeout(() => {\n                DataBase.collection('posts').doc(postId).collection('postLikes').where(\"like\", \"==\", true).get()\n                .then((querySnapshot) => {\n                    setLikeCount((querySnapshot.docs.map(doc =>doc.data())).length)\n                    console.log(likeCount +\" likes count\")\n                    likeCountRef.current=likeCount\n                })\n                .catch((error) => {\n                    console.log(\"Error getting documents: \", error);\n                });\n            }, 400);\n                \n\n            \n            \n              \n    }\n    //when postId,user changes or page loads fire the code above\n},[,postId])  \n//========================================================================================================================\n\nuseEffect(() => {\n    //Run this function when the post component loads or there are changes in user object or chats object \n        //because we want to run this function only after the data from the database has been fetched and the component in which we are mapping this data (Button) that,\n        //loads after the component which calls for this function (<Avatar>) is loaded  \n        // console.log(\"running AddButton\")\n            //loop through the object list of 'chats' \n            // if the 'chat_user_id' is already present in the chats object, then set the the second dimension true\n            //convert each object into an array and loop through it\n            let cha =[];\n            //to store the return from the function if the user is present in the chat list \n            for (const chat of Object.entries(chats)){\n                if (user_id===chat.chat_user_id){\n                    \n                    // console.log([chat[1].chat_user_id,true])\n                    // console.log([chat[1].chat_user_id,true][0])\n                    // first dimension is for uid \n                    // second dimension is a bool for checking whether the 'chat_user_id' is already present in the chats\n               \n                    cha.push([chat[1].chat_user_id,true])\n                    // console.log(\"chats_array \"+chats_array)\n                    \n                    \n                }\n                else{\n                    cha.push([chat[1].chat_user_id,false])\n                    // console.log(\"chats_array \"+chats_array)\n                    \n                }\n               \n\n            }\n            setChats_array(cha)\n            setIsPresent(isPresentInChats(user_id,chats_array))\n            // console.log(isPresent)\n\n        },[,postId,chats,user])\n//==================================================check whether user is present in the chat list=========================================================================\n    const isPresentInChats = (user_id,chats_array) => {\n        for (const chat of chats_array){\n            if (chat[0]===user_id){\n                return true\n            }\n        }\n\n}\n//======================================Get the list of users in chatlist===============================================================================\nuseEffect(()=>{\n    \n    if (user)\n    {const unsubscribe = DataBase.collection('users').doc(user.uid).collection('chats').orderBy('timestamp','desc').onSnapshot((snapshot)=>{\n                        setChats(snapshot.docs.map((doc) => (doc.data())))\n                    \n    \n                    })\n    return  unsubscribe()\n    }\n\n//when postId changes fire the code above\n},[,user_id,user])\n\n//======================================Add the selected user to chats list============================================\nconst addToChats = () => {\n    //if the document by the user_id already exists then it wont change it\n    //if logged in user 'user.uid' == 'user_id' user who wrote the post  then dont add it to chats list\n    if(!(user.uid===user_id)){\n    //==============Add user_id to Firestore as well as to Realtime database=======================\n\n    // //===================Add to Firestore============\n    // DataBase.collection('users').doc(user.uid).collection('chats').doc(user_id).set({\n    //     chat_username:username,\n    //     //user id of the user who wrote the post\n    //     chat_user_id:user_id,\n    //     timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n    //     })\n    // //add the user1 who added user2 to chatlist of user1 to chatlist of user2\n    // //also later write the code to send notification to user2 that he has been added to the chatlist by user1\n    // DataBase.collection('users').doc(user_id).collection('chats').doc(user.uid).set({\n    //     chat_username:user.displayName,\n    //     //user id of the user who wrote the post\n    //     chat_user_id:user.uid,\n    //     timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n    //     })\n    \n\n    //===================Add to Realtime============\n    realtime\n    .ref(`/'chats'/${user.uid}/${user_id}`)\n    .set({     \n        chat_username:username,\n        //user id of the user who wrote the post\n        chat_user_id:user_id,\n        timestamp:firebase.database.ServerValue.TIMESTAMP,\n        lastchatAt:firebase.database.ServerValue.TIMESTAMP},\n        (error) => {\n        if (error) {\n        alert(error.message)\n        } else {\n        \n        }\n    \n    })\n   //add the user1 who added user2 to chatlist of user1 to chatlist of user2\n   //also later write the code to send notification to user2 that he has been added to the chatlist by user1\n   realtime\n   .ref(`/'chats'/${user_id}/${user.uid}`)\n   .set({     \n        chat_username:user.displayName,\n       //user id of the user who wrote the post\n       chat_user_id:user.uid,\n       timestamp:firebase.database.ServerValue.TIMESTAMP,\n       lastchatAt:firebase.database.ServerValue.TIMESTAMP},\n       (error) => {\n       if (error) {\n       alert(error.message)\n       } else {\n       \n       }\n   \n   })\n\n    }\n    \n} \n//======================================Post comments to the database========================================================================================\nconst postComment = (e) => {\n    e.preventDefault();\n    //add comment to the 'comments' collection of the particular post \n    DataBase.collection('posts').doc(postId).collection('comments').add(\n        {\n         text:comment,\n         username:user.displayName,\n         timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        }\n    )\n    //clear the input after posting\n    setComment('')\n}\n\n\n//================================================================================================================================================================\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\" >\n                                               {/*avatar managed by@material-ui/core*/}\n                <div className=\"post__userProfile\">\n                <Avatar className=\"post__avatar\" alt={username} src=\"/static/images/avatar/1.jpg\"  onClick={handleHoverModalOpen} />\n                <h3>{username}</h3>\n                </div>\n                <Modal\n                        open={hoverOpen}\n                        onClose={()=>setHoverOpen(false)}\n                        aria-labelledby=\"simple-modal-title\"\n                        aria-describedby=\"simple-modal-description\"\n                    >\n                    <center><img style={{width:\"fit-content\"}} alt={username} src={imageUrl}/></center>\n                </Modal>\n                {/*==================================================================================================================================== */}\n \n                {/* {user.uid === user_id && <Button onClick={addToChats}>Add to chats</Button>} */}\n     \n                {/*initially when chats array does not exists as it is made after calling the addToChats function  */}\n                {/*if the array is empty (initial condition) */}\n                {/* {console.log(\"array length\")}\n                {console.log((Array.isArray(chats_array) && chats_array.length) === 0 )} */}\n                {/* {console.log(chats_array)} */}\n                {/*to check whether the user is present in the chats_array*/}\n                \n\n                { //to stop react from freaking out when the user is not logged in\n                 user && (\n                    //Dont show anything for the post which are written by the user who is logged in\n                    !(user.uid === user_id) &&  \n                    //when there are no chats (chat array is empty)\n                    (\n                         (Array.isArray(chats_array) && chats_array.length) === 0 ? (<Button size=\"small\" onClick={addToChats}>Add to chats</Button>) : \n                    (\n                    //when there are chats\n                    //check if the user is present in the chats_array\n                    isPresent? \n                     //if present\n                    ( \n                    chats_array.map((chat)=>(\n                    //chat[0] contains the 'uid' of the 'user' who wrote the post \n                    //find the array element corresponding to the given post\n                    //this is done by mathcing the 'user_id' from 'posts' to chat_user_id (chat[0])\n                    //then check bool chat[1] for whether the element is present in an array or not\n                    //if the element is not present then show <Add to chats> else show <Chat>\n                    <span id={chat[0]}>{(chat[0]==user_id) && ((chat[1])?(<Button size=\"small\" onClick={addToChats}>Add to chats</Button>):(<Button size=\"small\" >Chat</Button>))}</span>\n                    ))\n\n                    ):\n                    //if not present\n                    (<Button size=\"small\" key={user_id} onClick={addToChats}>Add chats</Button>)\n                        )    \n                            ) \n                                )\n                    }\n                {/* {                chats_array.map((chat)=>{\n                                    console.log(chat+\"chta\")\n                })\n                } */}\n\n                            {/*Report or bookmarks Menu*/}\n                <PostMenu postId={postId} postUsername={username} postUserId={user_id} postImage={imageUrl} postCaption={caption}/>\n                \n             \n            {/*===========================================================================================================================================*/}\n            </div>\n            {/* always run onLoad inside an img tag */}\n            <img className=\"post__image\" src={imageUrl} alt={username+\" \"+caption} />\n            <h4 className=\"post__text\"><strong>{username+\" \"}</strong>:{\" \"+caption}</h4>\n            <div className=\"post__footer\">\n                                                     \n\n                            <div className=\"post__likes\">  \n                                                                                {/*like icon*/}\n                                                                             \n                              \n                                        {like?\n                                            (<Button onClick={postLike} ><FavoriteIcon   fontsize=\"small\" cursor=\"pointer\" style={{color:'red'}}/></Button> ):(<Button onClick={postLike} ><FavoriteIcon   fontsize=\"small\" cursor=\"pointer\"  /> </Button>)\n                                            \n                                        }\n                                    \n                                   \n                                {/* <FlipMove> \n                                        {likes.map((id,like)=>\n                                            (<p style={{color:'aliceblue'}} id={id}><strong>{user && (user.displayName===like.username?(like.like?(<strong>You{JSON.stringify(like.like)}</strong>):(<strong></strong>)):(like.username))}</strong></p>)\n                                        )}\n                                </FlipMove> */}\n                                <p className=\"post__likesCount\"  component={'span'}>Likes {likeCount}</p>\n                            </div>\n                            \n                                            {/*collapse  comments*/}\n                                                {/*Comment icon*/}\n                            <div className=\"post__commentsIcon\">\n                                 <Button onClick={handleExpandClick} id=\"comments-icon\"   onMouseEnter={handlePopoverOpen} onMouseLeave={handlePopoverClose} disabled={comments.length===0}>\n                                    <ChatBubbleOutlineRoundedIcon fontsize=\"small\" cursor=\"pointer\" aria-expanded={expanded} aria-label=\"show more comments\"/>\n                                </Button>\n                                            {/*pop over on hover*/}\n                                            {/* <Popover \n                                            id=\"mouse-over-popover\"\n                                            className={classes.popover}\n                                            classes={{\n                                            paper: classes.paper,\n                                            }}          \n                                            open={open}        \n                                            anchorEl={anchorEl}\n                                            anchorOrigin={{\n                                            vertical: 'bottom',\n                                            horizontal: 'left',\n                                            }}\n                                            transformOrigin={{\n                                            vertical: 'top',\n                                            horizontal: 'left',\n                                            }}\n                                            onClose={handlePopoverClose}\n                                            disableRestoreFocus\n                                        >\n                                            <p style={{color:'aliceblue',fontSize:'small'}}>Click on the icon to load all comments</p>\n                                        </Popover> */}\n                                                                 {/*no. of comments*/}\n                                <p className=\"post__commentsIconCommentsCount\">{comments.length} Comments</p>\n                            </div>\n\n                                                    {/*share icon*/}\n                            <Button>\n                                <ShareIcon fontsize=\"small\" cursor=\"pointer\" onClick={() => {\n                                                if (navigator.share) {\n                                                    navigator.share({\n                                                            title: document.title,\n                                                            text: caption,\n                                                            url: window.location.href,\n                                                        })\n                                                        .then(() => console.log('Successful share'))\n                                                        .catch((error) => alert('Error sharing', error));\n                                                } else {\n                                                    alert(\"Web Share API is not supported in your browser.\")\n                                                }\n                                            }}> \n                                </ShareIcon> \n                            </Button>\n                                                    {/*Re-post icon*/}\n                            <IconButton>                       \n                                   <RepeatIcon fontsize=\"small\" cursor=\"pointer\"/>\n                            </IconButton>\n\n                            \n                         \n                                                 \n            </div>\n                                              {/*display the comments from the database */}\n            <div className=\"post__comments\">\n                    <Collapse in={expanded} timeout=\"auto\" unmountOnExit >\n                       { comments.map((comment) => (\n                            //here we are accessing the username and text fields of the doc[comment(iterator)] from 'comments' collection of the DataBase\n                            <p className=\"post__commentsComment\" key={comment.id}><strong>{comment.username+\":\"}</strong>{comment.text}<span>{\" \"+convertToDate(comment.timestamp)}</span></p>\n                        ))\n                       } \n                    </Collapse>\n                    \n            </div>\n                                               {/*post the comment to the database*/}\n            {//if the user is logged in then only show the post comment section\n                user &&(\n                <form className=\"post__commentBox\">\n                    <Input style={{color:\"aliceblue\"}} className=\"post__input\" type=\"text\" placeholder=\"Add a comment...\" value={comment} onChange={(e)=> setComment(e.target.value)}/>\n                    <IconButton  disabled={!comment}  variant ='contained' color=\"primary\" type ='submit' onClick={postComment}>\n                            <SendIcon/>\n                    </IconButton>\n                </form>) \n            }\n        </div>\n    )\n}\n\nexport default Post\n","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",["249","250"],"import React from 'react'\n//Get material-ui icons\nimport SidebarOptions from './SidebarOptions'\nimport SearchIcon from '@material-ui/icons/Search';\nimport HomeIcon from '@material-ui/icons/Home';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport EventIcon from '@material-ui/icons/Event';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport {Button} from '@material-ui/core';\nimport './Sidebar.css'\nimport { BrowserRouter as Router,Link} from 'react-router-dom'\n\nfunction Sidebar() {\n    return (\n        <div className=\"sidebar\">\n            {/*pass icons as props to SidebarOptions component*/}\n            {/*keep i captial of Icon to let react know you are passing a component*/}\n            <Link to='/'><SidebarOptions active text=\"Home\" Icon={HomeIcon}/></Link>\n            <SidebarOptions text=\"Explore\" Icon={SearchIcon}/>\n            <Link to='/eventsFeed'><SidebarOptions text=\"Events\" Icon={EventIcon}/></Link>\n            <Link to='/confessionsFeed' onClick={()=>window.location.href='/confessionsFeed'}><SidebarOptions text=\"Confessions\" Icon={WhatshotSharpIcon}/></Link>\n            <SidebarOptions text=\"Notifications\" Icon={NotificationsNoneIcon}/>\n            {/* <SidebarOptions text=\"Messages\" Icon={MailOutlineIcon}/> */}\n            <Link to='/profile' onClick={()=>window.location.href='/profile'}><SidebarOptions text=\"Bookmarks\" Icon={BookmarkBorderIcon}/></Link>\n            <SidebarOptions text=\"More\" Icon={MoreHorizIcon}/>\n            <Link to='/createEvent' onClick={()=>window.location.href='/createEvent'}><Button variant=\"outlined\"  className=\"sidebar__event\" fullWidth>New event</Button></Link>\n            <Link to='/createConfessions' onClick={()=>window.location.href='/createConfessions'}><Button variant=\"outlined\"  className=\"sidebar__event\" fullWidth>Write an annonymous confession</Button></Link>\n        </div>\n    )\n}\n\nexport default Sidebar\n","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",["251"],"/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["252","253","254"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport AlertDialog from './AlertDialog';\n\nfunction ImageUpload({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n                            \n\n                    })\n                    setOpenAlert(true)\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n                <AlertDialog text={\"New post is up!\"}  openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                                {/*image input*/}\n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                                                            {/*selected image preview*/}\n                        {image&&(<img className=\"imageUpload__preview\" width=\"20px\" height=\"20px\" src={URL.createObjectURL(image)}/>)}\n                                                             {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption for the new post...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["255","256","257","258"],"//structure of standard message\nimport React,{  useState } from 'react';//forwardRef keeps track of what is changing\nimport {Avatar} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './Message.css';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport responsiveHOC from 'react-lines-ellipsis/lib/responsiveHOC'\n// const ResponsiveEllipsis = responsiveHOC()(LinesEllipsis)\n\nconst useStyles = makeStyles((theme) => ({\n    //keep the avatar size small\n    small: {\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n      fontSize: 'x-small',\n    },\n  }));\n\n//====================================================================================================\n//whenver you are using forwardref first argumnet is the props from the parent component and second parameter is the ref \n//that ref parameter is then assigned to one of the elements of the given function\nconst Message = ({message}) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const isUser = user.uid === message.author;\n    const classes = useStyles();\n    return (\n        //apply message__user class only if isUser is True\n        <div className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <div className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className={`\"message__avatar\"  ${classes.small}`} alt={isUser?(user.displayName):(message.authorName)} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <p className=\"message__username\" variant=\"h\">\n                        {isUser ? 'You': message.authorName || 'Unknown user'}\n                    </p>\n                </div>\n                <div className=\"message__message\">\n                        {/*react-lines-ellipsis component for clamping long messages*/}\n                        {/* <ResponsiveEllipsis\n                        text= {message.text}\n                        maxLine='8'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                        /> */}\n                        {message.text}\n                </div>\n            </div>\n        </div>\n        )\n    \n}\n\nexport default Message;","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["259","260","261","262","263"],"\n//users in sidebar chat (online/offline)\n\nimport React, { Suspense, useEffect, useState } from 'react'\nimport './WidgetsChat.css'\nimport { makeStyles} from '@material-ui/core/styles';\nimport {Link} from 'react-router-dom';\nimport {DataBase, realtime} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport FlipMove from 'react-flip-move';\n\nconst WidgetMember = React.lazy(() => import('./WidgetMember'))\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flex:1,\n    display: 'flex',\n    minWidth:  314,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'2px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsChat() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [chats, setChats] = useState([])\n    \n    useEffect(() => {\n        //if user is logged out it throws an error hence using try catch\n        try {\n        // console.log(chats)\n\n          //get the username of the person we are chatting with \n          realtime.ref(`/'chats'/${user.uid}`).orderByChild('lastchatAt').on('value', (snapshot) => {\n                //store chats of the particular user\n                const chatsArray = [] \n            if (snapshot.exists()){\n                snapshot.forEach((child)=>{\n                  chatsArray.push(child.val())\n                })\n                // console.log(snapshot.val())\n                // console.log(chatsArray)\n\n                //.orderByChild works in ascending order\n                //we want in descending order hence reverse tha array\n                setChats(chatsArray.reverse())\n\n            // setChats(snapshot.val())\n            }\n        });\n           \n        }\n        catch (error) {\n            console.log(error.message+\" coming from widgetsChat getting 'chats'collection \")\n            }\n    }, [,user,chats.length]);\n    // console.log(chats)\n\n\n    return (\n//==========================================ALL CHATS LIST===========================================================\n        <div className=\"widgetsChat\">\n          CHATS\n          {chats.length!==0 &&  \n                (chats.map((chat)=>(\n                    <Suspense fallback={\n                        <div>\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={50} /></div>} key={chat.key}>\n                      \n                        <Link to={`/chats/${chat.chat_user_id}`} >\n                          <WidgetMember lastchatAt={chat.lastchatAt} chatId={chat.chat_user_id} chat_username= {chat.chat_username} />\n                        </Link>\n\n                        {/* {console.log(chat.chat_user_id)} */}\n                    </Suspense>\n                ))\n            )\n            }            \n        </div>\n    )\n}\n\nexport default WidgetsChat\n","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["264"],"import React, { Suspense, useEffect, useState } from 'react'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nfunction Feed(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//posts array\nconst [posts, setPosts] = useState([]);\n//lazy loading\nconst Post = React.lazy(() => import('./Post'))\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setPosts(snapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            })\n\n\n        \n    },[user]);\n    return (\n    <div className=\"feed\">\n            <div className=\"feed__posts\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                posts.map(({id,post})=>(\n                <Suspense fallback={\n                    <div><Skeleton variant=\"text\" />\n                    <Skeleton variant=\"circle\" width={40} height={40} />\n                    <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                        <Post postId={id} username={post.username} user_id={post.user_id} caption={post.caption} imageUrl={post.imageUrl} likesCount={post.likesCount}>\n                        </Post>\n                </Suspense>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default Feed\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["265","266"],"import React, { useEffect, useRef, useState } from 'react'\nimport './Chat.css'\nimport {realtime} from '../firebase';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { useParams } from 'react-router-dom';\nimport SendMessage from './SendMessage'\nimport { Suspense } from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\n\nconst Message = React.lazy(()=>import('./Message'))\nfunction Chat() {\n    //set the chat name in the\n    const [chatName,setChatName] = useState('')\n    //get the messages from the database\n    const [messages,setMessages] = useState([])\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    //get the slug from the url  (remeber that component using useParams should be inside <Router>)\n    const {chatId} = useParams()\n    //\n    const scrollRef = useRef([])\n    //\n    const messageScrollRef = useRef(null)\n\n//======================================================GET Messages==========================================\n//everytime chat_user_id (which is basically the doc id inside the chat collection) changes pull the messages for that chat_user_id from the database\nuseEffect(() => {\n    if (user){\n    if (chatId){\n    \n            //here the chat_user_id (chatId) is taken from the user (user.uid) who posted that particular post to database\n            const messagesArray = [];\n            realtime.ref(`/'messages'/${user.uid}/${chatId}`).orderByChild('timestamp').on('value', (snapshot) => {\n                //get all the messages for that particular chatId\n    \n                snapshot.forEach((child)=>{\n                    messagesArray.push(child.val())\n                })\n                setMessages(messagesArray)\n                // console.log(\"messages array \"+ messagesArray)\n                \n                });\n\n                //get the username of the person we are chatting with \n                realtime.ref(`/'chats'/${user.uid}/${chatId}`).on('value', (snapshot) => {\n                if (snapshot.exists()){\n                    // console.log(snapshot.val())\n                setChatName(snapshot.val())\n                }\n            });\n\n            return () => {\n                //unsubscribe to the database\n                realtime.ref(`/'messages'/${user.uid}/${chatId}`).off()\n                realtime.ref(`/'chats'/${user.uid}/${chatId}`).off()\n            }\n      \n    }\n\n\n}\n //when chatId changes/messages are added/page is re-rendered  run this   \n}, [,user,chatId,messages])\n\n//scroll to bottom when new messages are added.\nuseEffect(() => {\n \n        scrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\n        console.log(\"scrollHeight \"+messageScrollRef.current.scrollHeight)\n        console.log(\"amount of scroll user has done \"+messageScrollRef.current.scrollTop)\n    }\n    //using messages.length because firebase is constantly fetching messages from realtime db which changes messages state constantly\n    //but messages.length only changes when a new message is added\n,[messages.length])\n\n\n//=============================================================================================================\n\n    return (                         \n             <div className=\"chat\" >\n                <div className=\"chat__body\">\n                    <div className=\"chat__header\" >\n                        This is the beggining of your texx with  {chatName.chat_username}\n                    </div>\n                        <div className=\"chat__messages\" ref={messageScrollRef}>\n                        {\n                            messages.map((message)=>(\n                                <Suspense fallback={\n                                    <div><Skeleton variant=\"rect\" width={210} height={10} /></div>} key={message.key}>\n                                        <Message message={message} key={message.key}/>\n                                </Suspense>\n                                ))\n                            \n                        }\n                        </div>\n                <div ref={scrollRef}>\n                </div>\n\n                </div>\n                <div className=\"chat__sendMessage\">\n                    <SendMessage chatId={chatId} />\n                </div>\n             </div> \n             \n\n\n    )\n}\n\nexport default Chat\n","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js",["267"],"\n//users in sidebar chat (online/offline)\n\nimport React from 'react'\nimport './WidgetsDummy.css'\nimport { makeStyles } from '@material-ui/core/styles';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsDummy() {\n\n    return (\n\n        <div className=\"widgetsChat\">\n            \n        </div>\n    )\n}\n\nexport default WidgetsDummy\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js",["268","269","270","271"],"import React, { useState } from 'react'\nimport {IconButton, Input } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport firebase from 'firebase/app'\nimport {useStateValue} from '../../contexts/StateProvider';\nimport {InsertEmoticon, MicOutlined} from '@material-ui/icons';\nimport {DataBase, realtime} from '../firebase';\nimport './SendMessage.css'\n\n\nfunction SendMessage({chatId}) {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    //set the input \n    const [input, setInput] = useState('');\n  \n//========================================================POST Messages========================================\n\nconst sendMessage = () => {\n    if (user){\n                   //add message to user1's database (sender)\n                   realtime\n                   .ref(`/'messages'/${user.uid}/${chatId}`)\n                   //push create a unique id for each new doc \n                   .push({\n                       text:input,\n                       timestamp:firebase.database.ServerValue.TIMESTAMP,\n                       author:user.uid,\n                       authorName:user.displayName,\n                       imageUrl:\"\",},\n                       (error) => {\n                       if (error) {\n                       alert(error.message)\n                       } else {\n                       //successful!!\n                       }         \n                   })\n                   //add message to user2's database (sendee)\n                   //add to realtime db \n                       realtime\n                       .ref(`/'messages'/${chatId}/${user.uid}`)\n                       //push create a unique id for each new doc \n                       .push({     \n                               text:input,\n                               timestamp:firebase.database.ServerValue.TIMESTAMP,\n                               author:user.uid,\n                               authorName:user.displayName,\n                               imageUrl:\"\",\n                           },\n                           (error) => {\n                           if (error) {\n                           alert(error.message)\n                           } else {\n                           //successful!!\n                           }\n                       \n                       })\n                    //post the time at which we sent a text to that user/received a text from that user lately\n                    realtime.ref(`/'chats'/${user.uid}/${chatId}`).update(\n                        {\n                            lastchatAt:firebase.database.ServerValue.TIMESTAMP\n                        }\n                    )\n                    realtime.ref(`/'chats'/${chatId}/${user.uid}`).update(\n                        {\n                            lastchatAt:firebase.database.ServerValue.TIMESTAMP\n                        }\n                    )\n                    \n\n        setInput('');\n    }\n}\n\n//=============================================================================================================\n    return (\n    <div className=\"sendMessage\">\n            <form className=\"chat__inputForm\" onSubmit={(e)=>{e.preventDefault()}}>\n                {/* <InsertEmoticon/> */}\n                <Input style={{color:\"aliceblue\"}} className=\"sendMessage__input\" value={input} onChange={(e)=>setInput(e.target.value)} type=\"text\" placeholder=\"   Send a texx...\"/>\n                <IconButton  variant ='contained' color=\"primary\"disabled={!input} onClick={sendMessage} type=\"submit\"><SendIcon /></IconButton>\n                {/* <MicOutlined/> */}\n            </form>\n    </div>\n    )\n}\n\nexport default SendMessage\n","/Users/deeptej/Desktop/react/texx/client/src/components/Event.js",["272","273","274","275","276"],"import React, { Suspense, useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport './Event.css'\nimport { Paper } from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { DataBase } from './firebase';\nimport { useStateValue } from '../contexts/StateProvider';\nimport firebase from 'firebase/app'\nimport Skeleton from '@material-ui/lab/Skeleton';\nconst EventsMenu = React.lazy(()=>import('./EventsMenu'))\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor:\"#2E3336\",\n  },\n  media: {\n    height: 140,\n  },\n});\nfunction Event({eventId, dateTime, venue, username,title, description, user_id, imageUrl, interestedCount}) {\n    const classes = useStyles();\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //bool to check if the current event is already subscribed or not\n    const [interested,setInterested] = useState(false) \n    //disable the interested button after click\n    const [onclickDisable,setOnclickDisable] = useState(false)\n\n//===================================Add event to interested====================================\n    const addInterested = () => {\n    DataBase.collection('users').doc(user.uid).collection('interestedEvents').doc(eventId).set(\n        {   eventTitle:title,\n            eventId:eventId,\n            dateTime:dateTime,\n            venue:venue,\n            eventDescription:description,\n            eventOrganizedByName:username,\n            eventOrganizedById:user_id,\n        }\n    )\n    //increase the interested count\n    DataBase.collection('events').doc(eventId).update(\"interestedCount\", firebase.firestore.FieldValue.increment(1))\n\n    setOnclickDisable(true)\n}\n\n//=====================================check if the user already registered for the event ==========================\nuseEffect(() => {\n\n    DataBase.collection('users').doc(user.uid).collection('interestedEvents').doc(eventId).get().then((doc) => {\n        if (doc.exists) {\n            setInterested(true)\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    }).catch((error) => {\n        console.log(\"Error getting document:\", error);\n    });\n    \n}, [eventId,interested])\n\n//===============================================================================================\n    return (\n        <div className=\"event\">\n            <div className=\"event__header\">\n                <div className=\"event__headerInfo\">\n                    <Typography className=\"event__title\"  variant=\"h5\">\n                        {title}\n                    </Typography>\n                    <span className=\"event__dateTime\">\n                        Date and time:<b>{\" \"+ convertToDate(dateTime)}</b>\n                    </span>\n                    <span  className=\"event__location\">\n                        Venue:{venue}\n                    </span>\n                </div>\n                <Suspense fallback={\n                        <div><Skeleton variant=\"text\" /></div>} >\n                            <EventsMenu eventId={eventId} eventUsername={username} eventUserId={user_id}/>\n                </Suspense>\n            </div>\n            <Card className={classes.root}>\n\n                <div className=\"event__thubnail\">\n                    <CardActionArea>\n                        <CardMedia\n                        className={classes.media}\n                        image={imageUrl}\n                        />\n                    </CardActionArea>\n                </div>\n\n                <CardContent className=\"event__description\">\n                    <Typography variant=\"body2\" color=\"textSecondary\"  component={'span'}>\n                        {description}\n                    </Typography>\n                </CardContent>\n\n                <div className=\"event__footer\">\n                    <div className=\"event__interested\">\n                        {/*if already registered for the event then show registered*/}\n                    {\n                    !interested?(<Button size=\"small\" onClick={addInterested} disabled={onclickDisable}>    \n                                Interested\n                        </Button>):(<Button size=\"small\" disabled={true}>Registered</Button>)\n\n                    }   \n                    </div>\n    \n                    <div className=\"event__actions\">\n                            <Button size=\"small\" onClick={() => {\n                                            if (navigator.share) {\n                                                navigator.share({\n                                                        title: document.title,\n                                                        text: \"Event short description\",\n                                                        url: window.location.href,\n                                                    })\n                                                    .then(() => console.log('Successful share'))\n                                                    .catch((error) => alert('Error sharing', error));\n                                            } else {\n                                                alert(\"Web Share API is not supported in your browser.\")\n                                            }\n                                        }} >\n                            Share\n                            </Button>\n                    <div className=\"event__interestedInterestedCount\">Interested: {interestedCount}</div>\n                    </div>\n                </div>\n            </Card>\n        </div>\n    )\n}\n\nexport default Event\n\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js",["277","278","279","280","281"],"/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js",["282","283","284"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function SimpleModal({setHoverOpen,hoverOpen}) {\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = useState(getModalStyle);\n\n  return (\n    <div className=\"avatarHoverModal\">\n\n    </div>\n  );\n}\n",["285","286"],"/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js",["287","288"],"import React,{Suspense, useState} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button, IconButton, Input, Modal,TextField} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateEvent.css'\nimport AlertDialog from './AlertDialog'\nimport Skeleton from '@material-ui/lab/Skeleton';\nconst DateTimeSelect = React.lazy(()=>import('./DateTimeSelect')) \n\nfunction CreateEvent() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //description\n    const [description,setDescription] = useState('');\n    //image \n    const [imageThumbnail,setImageThumbnail] = useState(false);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //title \n    const [title,setTitle] = useState('')\n    //venue/link\n    const [venue,setVenue] = useState('')\n    //Datetime\n    const [dateTime,setdateTime] = useState(new Date())\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n    console.log(openAlert)\n    //get the name of the first image file you selected (image as a file)\n    const handleImageChange = (e) =>{\n        if (e.target.files[0]){\n            setImageThumbnail(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (imageThumbnail) {\n            \n            //Access the storage and upolad the image in the 'eventThumbnails' folder and give it the name =image.name\n            const uploadTask = storage.ref(`eventThumbnails/${imageThumbnail.name}`).put(imageThumbnail)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'eventThumbnails' folder in the storage\n                    .ref('eventThumbnails')\n                    //get the name of the image file\n                    .child(imageThumbnail.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('events').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set title\n                                title:title,\n                            //set date amd time\n                                dateTime:dateTime,\n                            //set venue\n                                venue:venue,\n                            //set the description attribute to the description user entered   \n                                description:description,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:user.displayName,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set interestedCount to 0 \n                                interestedCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setTitle(\"\")\n                            setDescription(\"\");\n                            setVenue(\"\")\n                            setImageThumbnail(null)\n                            \n                            \n                            \n                            \n\n                    })\n                    setOpenAlert(true)\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"createEventWrapper\">\n            <h2 id=\"createEvent_h2\"> CREATE EVENT </h2>\n        <div className=\"createEvent\">\n                                                         \n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"createEvent__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"createEvent__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n                <AlertDialog text={\"Your new event is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n\n                                                        {/*post upload form */}\n            <div className=\"createEvent_formContainer\">\n                <form className=\"createEvent__form\" onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__title\" type=\"text\" placeholder=\"Enter a the name for the event...\" onChange={(e)=>setTitle(e.target.value)} value={title}/>\n                        {/*if image is selected then show selected else show choose an image*/}\n                        <input className=\"createEvent__fileInput\" accept=\"image/*\"  id=\"imageThumbnail-button-file\" type=\"file\" onChange={handleImageChange} />\n                        <label htmlFor=\"imageThumbnail-button-file\" style={{color:\"gray\"}}>\n                            <IconButton color=\"primary\" aria-label=\"upload thumbnail\" component=\"span\">\n                                <AddPhotoAlternateIcon /> \n                            </IconButton>\n                            {imageThumbnail?\"Image selected\":\"Choose a thumnail image\"}\n                        </label>  \n                        {imageThumbnail&&(<img width=\"100px\" height=\"100px\" src={URL.createObjectURL(imageThumbnail)}/>)}\n                        {/*change the 'dateTime' from the <DateTimeSelect/> component*/}\n                        <Suspense fallback={\n                            <div><Skeleton variant=\"text\" />\n                            <Skeleton variant=\"circle\" width={40} height={40} />\n                            <Skeleton variant=\"rect\" width={210} height={118} /></div>} >\n                                <DateTimeSelect changeDate={dateTime => setdateTime(dateTime)} dateTime={dateTime}/>\n                            </Suspense>                                            \n                        <TextField placeholder=\"Enter a decription...\" className = \"createEvent__textarea\" onChange={(e)=>setDescription(e.target.value)} value={description}\n                            id=\"outlined-multiline-static\"\n                            label=\"Multiline description\"\n                            multiline\n                            rows={4}\n                            defaultValue=\"Default Value\"\n                            variant=\"outlined\"\n                            />\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__venue\" type=\"text\" placeholder=\"Enter a Venue/Link...\" onChange={(e)=>setVenue(e.target.value)} value={venue}/>\n                        <Button className=\"createEvent___iButton\" disabled = {!imageThumbnail} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>Create the event</Button>\n                </form>\n           </div>\n        </div>\n    </div>\n    )\n}\n\nexport default CreateEvent;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js",["289","290"],"import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  withStyles,\n  ThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport TextField from \"@material-ui/core/TextField\";\n\n\nconst CURRENT_THEME = {\n  background: \"#111D23\",\n  el1: \"#1B262C\",\n  el2: \"#263137\",\n  el3: \"#3C464B\",\n  text: \"#210124\",\n  textInv: \"#F0EDEE\",\n  main: \"#3857c5\",//change color here \n  secondary: \"#4DBBEB\",\n  mainShadow: \"#556AB5\",\n  danger: \"#DB162F\",\n  warning: \"\",\n  font1: `\"Roboto Slab\", \"Times New Roman\", serif`,\n  font2: `\"Roboto light\"`\n};\n\nconst styles = {\n  paper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: CURRENT_THEME.el3,\n    borderColor: CURRENT_THEME.danger\n  },\n  inputIcons: {\n    padding: 2,\n    color: CURRENT_THEME.textInv\n  },\n  input: {\n    flex: 1,\n    marginLeft: 8,\n    color: CURRENT_THEME.textInv\n  }\n};\n\nconst useStyles = makeStyles(styles);\nconst StyledDateTime = withStyles({\n  \"& .MuiPickersToolbar-toolbar\": {\n    backgroundColor: CURRENT_THEME.textInv\n  },\n  root: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.textInv,\n        \"& .MuiPickersToolbar-toolbar\": {\n          backgroundColor: CURRENT_THEME.textInv\n        }\n      }\n    }\n  }\n})(KeyboardDateTimePicker);\n\nconst CssTextField = withStyles({\n  root: {\n    //all\n    \"& .MuiIconButton-root\": {\n      color: CURRENT_THEME.textInv\n    },\n    // filled\n    \"& .MuiFilledInput-underline\": {\n      \"&:before\": {\n        borderBottomColor: \"transparent\"\n      },\n      \"&:after\": {\n        borderBottomColor: \"transparent\"\n      }\n    },\n    \"& .MuiFilledInput-input\": {\n      color: CURRENT_THEME.textInv\n      // borderRadius: \"50px 50px 0 0\"\n    },\n    \"& .MuiFilledInput-root\": {\n      borderRadius: \"10px 10px 10px 10px\",\n      backgroundColor: CURRENT_THEME.el3,\n      // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n      \"&.Mui-focused\": {\n        borderColor: \"#556AB5\",\n        backgroundColor: CURRENT_THEME.el2,\n        // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n        boxShadow: `0px 0px 10px 0px ${CURRENT_THEME.main}, 0px 0px 40px 0px ${CURRENT_THEME.main}, 0px 0px 80px 0px ${CURRENT_THEME.main}`\n        // boxShadow: '0px 0px 15px 0px #556AB5, 0px 0px 15px 0px #556AB5'\n      }\n    },\n\n    \"& .MuiInputLabel-formControl\": {\n      color: CURRENT_THEME.textInv\n    }\n    // \"& .MuiOutlinedInput-input\": {\n    //   color: CURRENT_THEME.textInv     \n    // },\n    // \"& .MuiOutlinedInput-root\": {\n    //   \"& fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     // color: \"#1ab5e1\"\n    //   },\n    //   \"& label\": {\n    //     color: CURRENT_THEME.textInv\n    //   },\n    //   \"&:hover fieldset\": {\n    //     borderColor: \"#1ab5e1\"\n    //   },\n    //   \"&.Mui-focused fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n    //   }\n    // }\n  }\n})(TextField);\n\nconst materialTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CURRENT_THEME.main\n    }\n  },\n  overrides: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.el3\n      }\n    },\n    MuiPickersCalendarHeader: {\n      iconButton: {\n        backgroundColor: \"transparent\",\n        color: CURRENT_THEME.main\n      },\n      dayLabel: {\n        color: CURRENT_THEME.textInv //days in calendar\n      },\n      transitionContainer: {\n        color: CURRENT_THEME.textInv\n      }\n    },\n    MuiPickersBasePicker: {\n      pickerView: {\n        backgroundColor: CURRENT_THEME.background\n      }\n      //   backgroundColor: CURRENT_THEME.el3,\n    },\n    MuiPickersDay: {\n      day: {\n        color: CURRENT_THEME.textInv //days in calendar\n      }\n      //   daySelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n      //   dayDisabled: {\n      //     color: CURRENT_THEME.main, // current day\n      //   },\n      //   current: {\n      //     color: CURRENT_THEME.main,\n      //   },\n    },\n    // MuiButton:{\n    //   textPrimary:{\n    //     color: CURRENT_THEME.main,\n    //   }\n    // },\n\n    MuiDialogActions: {\n      root: {\n        backgroundColor: CURRENT_THEME.background\n      }\n    },\n    MuiPickersClock: {\n      clock: {\n        backgroundColor: CURRENT_THEME.el2\n      }\n      //   pin:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n      // },\n      // MuiPickersClockPointer:{\n      //   pointer:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n    },\n    MuiPickersClockNumber: {\n      clockNumber: {\n        color: CURRENT_THEME.textInv\n      }\n      //   numberSelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n    }\n    // MuiMuiPickersTime:{\n    //   timeSelected: {\n    //     backgroundColor: CURRENT_THEME.main, //calendar circle\n    //   },\n    // },\n    // MuiPickersModal: {\n    //   dialogAction: {\n    //     color: CURRENT_THEME.main, //no se\n    //     backgroundColor: CURRENT_THEME.el3,\n    //   },\n    // },\n  }\n});\n\nfunction DateTimeSelect(props) {\n  //select the date here with myDate\n  //once date is selected, pass it on to parent component\n  const [myDate, setmyDate] = useState();\n\n  return (\n    <ThemeProvider theme={materialTheme}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <div className=\"dateTimeSelect\">\n          <KeyboardDateTimePicker\n            format={'dd-MMM-yyyy:KK:mm a'}\n            label=\"Choose date and time for event\"\n            inputVariant=\"filled\"\n            helperText=\"\"\n            TextFieldComponent={CssTextField}\n            size=\"small\"\n            value={myDate}\n            onChange={setmyDate}\n            //change the 'dateTime' state of the parent from the child\n            onClick={props.changeDate(myDate)}\n          />\n          </div>\n      </MuiPickersUtilsProvider>\n    </ThemeProvider>\n  );\n}\nexport default DateTimeSelect","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js",["291"],"import React, { useEffect, useState } from 'react'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './FeedEvents.css'\nimport { Suspense } from 'react'\nimport Skeleton from '@material-ui/lab/Skeleton'\n\nconst Event = React.lazy(()=>import('./Event'))\nfunction FeedEvents() {\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//events array\nconst [events, setEvents] = useState([]);\n//====================================Events changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'events' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('events').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and event=doc.data to the fields in the 'event' variable that we defined above\n        console.log(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n        setEvents(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n            })\n    \n        return \n\n    \n    },[user]);\n    return (\n    <div className=\"feedEvents\">\n            <div className=\"feedEvents__events\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                events.map(({id,event})=>(\n                    <Suspense fallback={\n                        <div><Skeleton variant=\"text\" />\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                            <Event key={event.id} eventId={id} dateTime={event.dateTime} venue={event.venue} title={event.title} username={event.username} user_id={event.user_id} description={event.description} imageUrl={event.imageUrl} interestedCount={event.interestedCount}/>\n                    </Suspense>\n                ))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedEvents\n","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js",["292"],"import React,{useState} from 'react';\nimport {DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button,TextField} from '@material-ui/core';\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateConfessions.css'\nimport AlertDialog from './AlertDialog';\n\nfunction CreateConfessions() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store confession\n    const [confession,setConfession] = useState('')\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n    const handlePost = (e) => {\n        DataBase.collection('confessions').add({\n            confession:confession,\n            user_id:user.uid,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        setConfession('')\n        setOpenAlert(true)\n\n    }\n    return (\n        <div className=\"createConfessions\">\n            <AlertDialog text={\"Your new confession is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n                <form className=\"createConfessions__form\">\n                    <h2 id=\"createConfessions_h2\"> Write a Confession </h2>\n                    <TextField className = \"createConfessions__textarea\" onChange={(e)=>setConfession(e.target.value)} value={confession}\n                                    id=\"outlined-multiline-static\"\n                                    label=\"Write a confession...\"\n                                    multiline\n                                    rows={15}\n                                    defaultValue=\"Default Value\"\n                                    variant=\"outlined\"\n                                    />\n                    <Button className=\"createConfessions___iButton\" disabled = {!confession} variant ='contained' color=\"primary\" type ='submit' onClick={handlePost}>Post</Button>\n                </form>\n        </div>\n        \n    )\n}\n\nexport default CreateConfessions;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js",["293","294","295"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport EventIcon from '@material-ui/icons/Event';\nimport CommentRoundedIcon from '@material-ui/icons/CommentRounded';\nimport HomeIcon from '@material-ui/icons/Home';\nimport './BottomNavigationMobile.css'\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport { Paper } from '@material-ui/core';\nimport {BrowserRouter, Link } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#1A1A1A'\n  },\n});\n\nconst navValues = {\n  '/':1,\n  '/confessionsFeed':2,\n  '/eventsFeed':3,\n  '/chatsFeed':4,\n  '/notificationsFeed':5\n}\n\n//BUG:\n// here everytime we change the value using setValue it causes one additional render\nfunction BottomNavigationMobile() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState('Home');\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n    return (\n      <Paper elevation={10}>\n        <div className=\"bottomNavigation\"> \n            <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\n            <BottomNavigationAction component={Link} to ='/' value=\"Home\"  label=\"Home\"  icon={<HomeIcon/>} />\n            <BottomNavigationAction component={Link} to= '/confessionsFeed' value=\"Confessions\" label=\"Confessions\" icon={<WhatshotSharpIcon/>} />\n            <BottomNavigationAction component={Link} to='/eventsFeed' value=\"Events\" label=\"Events\"  icon={<EventIcon/>} />\n            <BottomNavigationAction component={Link} to= '/chatsFeed' value=\"Chats\"  label=\"Chats\"  icon={<CommentRoundedIcon />} />\n            <BottomNavigationAction component={Link} to= '/notificationsFeed' value=\"Notifications\" label=\"Notifications\"  icon={ <NotificationsNoneIcon/>} />\n            </BottomNavigation>\n        </div>\n      </Paper>\n    )\n}\n\nexport default BottomNavigationMobile\n","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js",["296"],"import React, { useEffect, useState, Suspense } from 'react'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n\nconst Confessions = React.lazy(()=>import('./Confessions'))\nfunction FeedConfessions(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//confessions array\nconst [confessions, setConfessions] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('confessions').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setConfessions(snapshot.docs.map(doc =>({id:doc.id,confession:doc.data()})))\n            })\n    },[user]);\n    return (\n    <div className=\"feedConfessions \">\n            <div className=\"feedConfessions__confessions \"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                confessions.map(({id,confession})=>(\n                    <Suspense fallback={\n                        <div><Skeleton variant=\"text\" />\n                        <Skeleton variant=\"circle\" width={40} height={40} />\n                        <Skeleton variant=\"rect\" width={210} height={118} /></div>} key={id}>\n                            <Confessions confessionId={id} confession={confession.confession} />\n                    </Suspense>\n                ))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedConfessions\n","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js",["297","298","299","300"],"import { Avatar } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport './Confessions.css'\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\nimport {Collapse, IconButton, Input, Typography } from '@material-ui/core';\nimport { DataBase } from './firebase';\nimport firebase from 'firebase';\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction Confessions({confession,confessionId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //comments from DataBase\n    const [confessionComments,setConfessionComments] = useState([])\n    //set comment from input\n    const [confessionComment, setConfessionComment] = useState('')\n    //for commentsIcon onclick collapse\n    const [expanded, setExpanded] =  useState(false);\n    \n    //commentsIcon onclick collapse\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n      };\n    //convert to date\n    const convertToDate = (timestamp) => {\n    console.log(timestamp)\n    let currentDate = firebase.firestore.Timestamp.now();\n    console.log(currentDate)\n    let diff = Math.abs(timestamp - currentDate );\n    const dateInMillis  = diff * 1000;\n    let date = new Date(dateInMillis).toLocaleTimeString();\n    return(date.replace(/:\\d+ /, ' ')+\"hrs ago\")\n}\n//======================================Post comments to the database========================================================================================\nconst postConfessionComment = (e) => {\n    e.preventDefault();\n    //add comment to the 'comments' collection of the particular confession \n    DataBase.collection('confessions').doc(confessionId).collection('comments').add(\n        {\n         text:confessionComment,\n         username:user.displayName,\n         timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        }\n    )\n    //clear the input after posting\n    setConfessionComment('')\n}\n//====================================Get the comments from the database and display=================================================================\n    useEffect(() => {\n        \n        //if a confessionId is passed\n        if (confessionId){\n            //get a snapshot listner for 'comments' collection inside the passed 'confessionId' doc inside the collection 'confessions'\n             DataBase.collection('confessions').doc(confessionId).collection('comments').orderBy('timestamp','desc').onSnapshot(\n                    (snapshot) =>{\n                        //set comments to the data inside the doc\n                                setConfessionComments(snapshot.docs.map((doc) => (doc.data())))\n                                console.log(confessionComments+\" Ccommnets\")\n                    })\n\n                }\n\n},[,user,confessionId])\n//=====================================================================================================\n\n\n    return (\n        <div className=\"confessions\">\n            <div className=\"confessions__header\">\n                <Avatar alt={'username'} src=\"/static/images/avatar/1.jpg\"/> Annonymous\n            </div>\n            <div className=\"confessions__confession\">\n                <p style={{color:\"aliceblue\"}}>{confession}</p>\n            </div>\n            <div className=\"confessions__footer\">\n                                                {/*display the comments from the database */}\n                    <div className=\"confessions__commentsIcon\">\n                                 <IconButton onClick={handleExpandClick} id=\"comments-icon\"  disabled={confessionComments.length===0}>\n                                    <ChatBubbleOutlineRoundedIcon fontsize=\"small\" cursor=\"pointer\" aria-expanded={expanded} aria-label=\"show more comments\"/>\n                                 </IconButton>\n                                                            {/*no. of comments*/}\n                                 <p className=\"confessions__commentsIconCommentsCount\" >{confessionComments.length} Comments</p>\n                    </div>\n\n                            <Collapse in={expanded} timeout=\"auto\" unmountOnExit >\n                            { confessionComments.map((comment) => (\n                                    //here we are accessing the username and text fields of the doc[comment(iterator)] from 'comments' collection of the DataBase\n                                    <p className=\"confessions__comments\" key={comment.id}><strong>{comment.username+\":\"}</strong>{comment.text}<span>{\" \"+convertToDate(comment.timestamp)}</span></p>\n                                ))\n                            } \n                            </Collapse>\n                            \n            </div>\n                                                    {/*post the comment to the database*/}\n                    {//if the user is logged in then only show the post comment section\n                        user &&(\n                        <form className=\"confessions__commentBox\">\n                            <Input style={{color:\"aliceblue\"}} className=\"confessions__input\" type=\"text\" placeholder=\"Add a comment...\" value={confessionComment} onChange={(e)=> setConfessionComment(e.target.value)}/>\n                            <IconButton  disabled={!confessionComment}  variant ='contained' color=\"primary\" type ='submit' onClick={postConfessionComment}>\n                                    <SendIcon/>\n                            </IconButton>\n                        </form>) \n                    }\n        </div>\n    )\n}\n\nexport default Confessions\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js",["301","302"],"import React,{useState} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUploadMobile.css'\nimport {Button, IconButton, Input, Modal} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport AlertDialog from './AlertDialog';\n\nfunction ImageUploadMobile({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n                            \n\n                    })\n\n                    setOpenAlert(true)\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUploadMobile\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUploadMobile__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUploadMobile__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n                <AlertDialog text={\"New post is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n\n                                                        {/*post upload form */}\n            <div className=\"imageUploadMobile__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                        {/*image input*/}\n                        <input className=\"imageUploadMobile__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label style={{color:'gray'}} htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                            {image?\"Image selected\":\"Choose a image to post\"}\n                        </label>\n                                                    {/*selected image preview*/}\n                        {image&&(<img className=\"imageUploadMobile__preview\" width=\"80px\" height=\"80px\" src={URL.createObjectURL(image)}/>)}\n                                                        {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUploadMobile__caption\" type=\"text\" placeholder=\"Enter a caption for the new post...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <Button className=\"imageUploadMobile___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            POST\n                        </Button>\n                </form>\n           </div> \n        </div>\n    )\n}\n\nexport default ImageUploadMobile;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js",["303"],"import React from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport firebase from 'firebase/app'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction PostMenu({postId,postUsername,postUserId,postCaption,postImage}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add report collection of the particular post \n        DataBase.collection('posts').doc(postId).collection('Report').doc(postId).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedPostId:postId,\n             reportedPostUsername:postUsername,\n             reportedPostUserId:postUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n      alert(\"Thank you for your concern we are looking into the matter!\")\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add bookmark\n      DataBase.collection('users').doc(user.uid).collection('bookmarksPost').doc(postId).set(\n          {\n           bookmarkPostId:postId,\n           bookmarkPostImage:postImage,\n           bookmarkPostCaption:postCaption,\n           bookmarkPostUsername:postUsername,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n    alert(\"Added to bookmarks\")\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default PostMenu\n","/Users/deeptej/Desktop/react/texx/client/src/components/YourPosts.js",["304","305","306"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport './YourPosts.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: '#3F4347',\n  },\n  gridList:{\n    flex:1,\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: '#363A3E',\n    overflowY: 'scroll', \n    width:'100%',\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n}));\n\nexport default function YourPosts() {\n    const classes = useStyles();\n\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //posts array\n    const [posts, setPosts] = useState([]);\n//====================================GET user created posts=========================================\n    useEffect( () => {\n        //grab the posts which belong to the logged in user from the db\n        DataBase.collection('posts').where(\"user_id\", \"==\", user.uid).get()\n        .then((querySnapshot) => {\n            setPosts(querySnapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            console.log(posts)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n        \n    },[user]);\n    \n\n  return (\n      <GridList cellHeight={180} className={classes.gridList}>\n            {posts.map((post) => (\n            <GridListTile key={post.id}>\n                <img src={post.post.imageUrl} alt={post.post.caption} />\n                <GridListTileBar\n                title={post.post.caption}\n                actionIcon={\n                    <IconButton aria-label={`info about ${post.post.caption}`} className={classes.icon}>\n                            <InfoIcon />\n                    </IconButton>\n                }\n                />\n            </GridListTile>\n            ))}\n      </GridList>\n  );\n}\n","/Users/deeptej/Desktop/react/texx/client/src/components/SwipeTab.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/YourEvents.js",["307","308"],"import { Card, CardContent, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport './YourEvents.css'\n\nfunction YourEvents() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store user's events\n    const [events,setEvents] = useState([])\n    //convert date\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n    //====================================GET user created events=========================================\n    useEffect( () => {\n        //grab the events which belong to the logged in user from the db\n        DataBase.collection('events').where(\"user_id\", \"==\", user.uid).get()\n        .then((querySnapshot) => {\n            setEvents(querySnapshot.docs.map(doc =>doc.data()))\n            console.log(events)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n        \n    },[user]);\n    return (\n        <div className=\"yourevents\">\n            {events.map(event=>(\n                    <Card className=\"yourevents__event\" key={event.id}>\n                        <CardContent className=\"yourevents__eventContent\">\n                            <Typography  component={'span'}>Event: {event.title}</Typography>\n                            <Typography  component={'span'}>Date: {convertToDate(event.dateTime)}</Typography>\n                            <Typography  component={'span'}>Venue: {event.venue}</Typography>\n                            <Typography  component={'span'}>Interested people: {event.interestedCount}</Typography>\n                        </CardContent>\n                    </Card>\n            ))}\n        </div>\n    )\n}\n\nexport default YourEvents\n","/Users/deeptej/Desktop/react/texx/client/src/components/EventsMenu.js",["309"],"import React from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport firebase from 'firebase/app'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      zIndex:1000,\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction EventsMenu({eventId,eventUsername,eventUserId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add report collection of the particular post \n        DataBase.collection('events').doc(eventId).collection('Report').doc(eventId).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedEventId:eventId,\n             reportedEventUsername:eventUsername,\n             reportedEventUserId:eventUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add bookmark\n      DataBase.collection('users').doc(user.uid).collection('bookmarksEvents').doc(eventId).set(\n          {\n           bookmarkEventUserId:eventId,\n           bookmarkEventUsername:eventUsername,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default EventsMenu\n","/Users/deeptej/Desktop/react/texx/client/src/components/YourBookmarks.js",["310","311","312","313","314","315"],"import { Card, CardContent, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport './YourBookmarks.css'\n\n\nfunction YourBookmarks() {\n     //get the user from the provider\n     const [{user}, dispatch] = useStateValue();\n     //store user's event bookmarks\n     const [eventBookmarks,setEventBookmarks] = useState([])\n     //store user's post bookmarks\n     const [postBookmarks,setPostBookmarks] = useState([])\n    //convert date\n    const convertToDate = (date) => {\n        //convert to miliseconds\n        let k = date.seconds*1000\n        let dat = Date(k)\n        dat = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: \"long\" ,day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(k)\n        return dat\n    }\n\n    useEffect(() => {\n        DataBase.collection('users').doc(user.uid).collection('bookmarksPost').orderBy('timestamp','desc').onSnapshot(\n            (snapshot) =>{\n                    setEventBookmarks(snapshot.docs.map((doc) => doc.data()))\n                        })\n\n        DataBase.collection('users').doc(user.uid).collection('bookmarksEvents').orderBy('timestamp','desc').onSnapshot(\n            (snapshot) =>{\n                setPostBookmarks(snapshot.docs.map((doc) => doc.data()))\n                console.log(postBookmarks)\n                        })\n                        \n    }, [,user])\n    return (\n        <div className=\"bookmarks\">\n            <div className=\"bookmarks__postBookmarks\">\n                   {postBookmarks.map(post=>(\n                    <Card className=\"yourevents__event\">\n                        <CardContent>\n                            <Typography  component={'span'}>Caption: {post.bookmarkPostCaption}</Typography>\n                            <img src={post.bookmarkPostImage}/>\n                            <Typography  component={'span'}>Posted By: {post.bookmarkPostUsername}</Typography>\n                        </CardContent>\n                    </Card>\n                     ))}\n            </div>\n            <div className=\"bookmarks__postBookmarks\">\n                    {/* {eventBookmarks.map(event=>(\n                    <Card className=\"yourevents__event\">\n                        <CardContent>\n                            <Typography>Event: {event.title}</Typography>\n                            <Typography>Date: {convertToDate(event.dateTime)}</Typography>\n                            <Typography>Venue: {event.venue}</Typography>\n                            <Typography>Interested people: {event.interestedCount}</Typography>\n                        </CardContent>\n                    </Card>\n                     ))} */}\n            </div>\n        </div>\n    )\n}\n\nexport default YourBookmarks\n","/Users/deeptej/Desktop/react/texx/client/src/components/AlertDialog.js",["316","317","318"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function AlertDialog({text,openAlert,changeAlert}) {\n  const handleClose = () => {\n    changeAlert(false);\n  };\n\n  return (\n    <div className=\"alertDialog\">\n      <Dialog\n        open={openAlert}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{text}</DialogTitle>\n        {/* <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n                \n          </DialogContentText>\n        </DialogContent> */}\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Cool!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/GetRecentMessage.js",["319","320","321","322","323","324","325","326","327"],"import { Badge, withStyles } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { useStateValue } from '../../contexts/StateProvider';\nimport { DataBase, realtime } from '../firebase';\nimport './GetRecentMessage.css'\nimport firebase from 'firebase/app'\n\nfunction GetRecentMessage({currentChat,lastchatAt,chatId}) {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const [messages,setMessages] = useState([])\n    //count unread messages \n    const [countUnread, setCountUnread] = useState(0)\n    //get recent chat\n    const [recentChat,setRecentChat] = useState('')\n    //get last seen for that chat\n    const [lastSeen,setLastSeen] = useState('')\n    const StyledBadge = withStyles((theme) => ({\n        badge: {\n          right: '-20px',\n          top: 10,\n          marginLeft:'20px',\n          padding: '0 4px',\n        },\n      }))(Badge);\n//======================================================GET Messages==========================================\n//everytime chat_user_id (which is basically the doc id inside the chat collection) changes pull the messages for that chat_user_id from the database\nuseEffect(() => {\n    if (user){\n    if (chatId){\n        let unreadMessages = []\n        //here the chat_user_id (chatId) is taken from the user (user.uid) who posted that particular post to database\n        setTimeout(() => {\n                   //here the chat_user_id (chatId) is taken from the user (user.uid) who posted that particular post to database\n            const messagesArray = [];\n            //fetch the recent message \n            realtime.ref(`/'messages'/${user.uid}/${chatId}`).orderByChild('timestamp').on('value', (snapshot) => {\n    \n                snapshot.forEach((child)=>{\n                    messagesArray.push(child.val())\n                })\n                setMessages(messagesArray.reverse())\n                // console.log(messages[0])\n                // console.log(\"messages array \"+ messagesArray)\n                \n                });\n            realtime.ref(`'recent_chat'/${user.uid}`).on('value', (snapshot) => {\n                setRecentChat(snapshot.val())\n            })\n            realtime.ref(`'last_Seen'/${user.uid}/${chatId}`).on('value', (snapshot) => {\n                setLastSeen(snapshot.val())\n            })\n            setCountUnread(0)\n            if (chatId!=recentChat){\n            //get all the messages which have timestamp > timestamp at which the user checked that chat\n                messagesArray.map((message)=>{\n                message.author != user.uid && message.timestamp>lastSeen && unreadMessages.push(message.timestamp>lastSeen)\n                setCountUnread(unreadMessages.length)\n            })\n            }\n\n\n            // {console.log(\"unreadMessages\"+ unreadMessages)}\n        },500)\n\n    \n    }\n    \n\n\n}\n\n    \n}, [,chatId,messages.length,recentChat,lastSeen])\n    return (\n        <div className=\"getRecentMessage\">\n            {/*later on add count of unread messages*/}\n            {/* {console.log(recentChat)} */}\n            {/*if chatId is the same as the chat with which we are chatting now then unread messages are 0*/}\n        <StyledBadge badgeContent={countUnread} color=\"primary\">\n            {/*Get recent message*/}\n            <p className=\"getRecentMessage__message\" style={{color:'gray',fontSize:'small'}}>{messages.length!=0?(messages[0]?.text.slice(0, 5)):('start a conversation')}</p>\n        </StyledBadge>\n        </div>\n    )\n}\n\nexport default GetRecentMessage\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetMember.js",["328","329","330","331","332"],"import React, { Suspense, useEffect, useState } from 'react'\nimport './WidgetMember.css'\nimport { makeStyles} from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {Badge, ButtonBase} from '@material-ui/core';\nimport {realtime} from '../firebase'\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport firebase from 'firebase/app'\nimport { useStateValue } from '../../contexts/StateProvider';\n\nconst  GetRecentMessage = React.lazy( () =>  import('./GetRecentMessage'))\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n    details: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    content: {\n      Bottom:'20px',\n      fontWeight:300,\n      color: 'white',\n      marginBottom:10,\n    },\n    avatar:{\n      width: theme.spacing(4),\n      height: theme.spacing(4),\n      marginTop:10,\n      marginLeft:10,\n      marginBottom:10,\n    },\n    badge: {\n      left:-12,\n      top: 9,\n    },\n  \n  }));\n    \nfunction WidgetMember({lastchatAt,chat_username,chatId}) {\n    // console.log(chat_username,chatId)\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    //to keep the track if the particular chat is online or not\n    const [online,setOnline] = useState('')\n    //get the current user chatting with\n    const [currentChat,setCurrentChat] = useState('')\n    useEffect(() => {\n        //get online/offline users\n   \n        chatId && realtime.ref(`/status/${chatId}`).on('value',snapshot=>{\n                        setOnline(snapshot.val());\n                        // console.log(chatId)\n                        // console.log(snapshot.val())\n                    })\n                  realtime.ref(`'recent_chat'/${user.uid}`).on('value',snapshot=>{\n                    setCurrentChat(snapshot.val());\n                    // console.log(\"CurrentChat \"+currentChat)\n                })    \n                \n                \n        return () => {\n          realtime.ref(`'recent_chat'/${user.uid}`).off()\n        }\n             \n     }, [,chatId,chat_username,online,currentChat])\n\n    const sendClick = () => {\n      realtime.ref(`'last_Seen'/${user.uid}/${chatId}`).set(firebase.database.ServerValue.TIMESTAMP)\n      realtime.ref(`'recent_chat'/${user.uid}`).set({\n        chatId:chatId\n      })\n        // realtime.ref(`/'chats'/${user.uid}/${chatId}`).set({\n        //   last_check_out:firebase.database.ServerValue.TIMESTAMP\n        // })\n    }\n\n     \n    return (\n      //==========================================Get Online members===========================================================\n      <ButtonBase onClick={sendClick}>\n        <div className={online==='online'?\"widgetsChat__online\":\"widgetsChat__offline\"}>\n          <div className={chatId!=currentChat?\"widgetsChat__onlineBox\":\"widgetsChat__onlineBoxActive\"}>\n        \n                        <Avatar className={classes.avatar} alt={chat_username} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <Badge\n                              className={classes.badge}\n                               color={online=='online'?\"primary\":\"secondary\"} variant=\"dot\"   \n                                overlap=\"circle\"\n                            ></Badge>\n                        <div className={classes.details}>\n                                <CardContent className={classes.content}>\n                                    <Typography component=\"p\" variant=\"caption\">\n                                        {chat_username}\n                                    </Typography>\n                                    <Suspense fallback={<Skeleton variant=\"text\" />}>\n                                      {/*Get recent message*/}\n                                        <GetRecentMessage currentChat={currentChat} lastchatAt={lastchatAt} chatId={chatId}/>\n                                    </Suspense>\n                               \n                                </CardContent>\n                        </div>\n          </div>\n        </div>\n    </ButtonBase>\n    )\n}\n\nexport default WidgetMember\n","/Users/deeptej/Desktop/react/texx/client/src/serviceWorkerRegistration.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Home.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/SearchHits.js",[],["333","334"],"/Users/deeptej/Desktop/react/texx/client/src/components/UserProfile.js",["335","336","337","338","339","340","341","342","343","344","345","346"],"/Users/deeptej/Desktop/react/texx/client/src/components/UserSwipeTab.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/UserEvents.js",["347","348","349"],"/Users/deeptej/Desktop/react/texx/client/src/components/UserPosts.js",["350","351","352","353"],{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","replacedBy":"357"},{"ruleId":"358","severity":1,"message":"359","line":1,"column":45,"nodeType":"360","messageId":"361","endLine":1,"endColumn":49},{"ruleId":"358","severity":1,"message":"362","line":12,"column":8,"nodeType":"360","messageId":"361","endLine":12,"endColumn":12},{"ruleId":"358","severity":1,"message":"363","line":16,"column":8,"nodeType":"360","messageId":"361","endLine":16,"endColumn":19},{"ruleId":"364","severity":1,"message":"365","line":80,"column":10,"nodeType":"366","messageId":"367","endLine":80,"endColumn":12},{"ruleId":"358","severity":1,"message":"368","line":89,"column":10,"nodeType":"360","messageId":"361","endLine":89,"endColumn":22},{"ruleId":"358","severity":1,"message":"369","line":89,"column":23,"nodeType":"360","messageId":"361","endLine":89,"endColumn":38},{"ruleId":"358","severity":1,"message":"370","line":101,"column":10,"nodeType":"360","messageId":"361","endLine":101,"endColumn":16},{"ruleId":"358","severity":1,"message":"371","line":101,"column":17,"nodeType":"360","messageId":"361","endLine":101,"endColumn":26},{"ruleId":"372","severity":1,"message":"373","line":129,"column":28,"nodeType":"374","endLine":129,"endColumn":56},{"ruleId":"358","severity":1,"message":"375","line":158,"column":11,"nodeType":"360","messageId":"361","endLine":158,"endColumn":22},{"ruleId":"372","severity":1,"message":"376","line":163,"column":17,"nodeType":"377","endLine":163,"endColumn":29},{"ruleId":"358","severity":1,"message":"378","line":6,"column":65,"nodeType":"360","messageId":"361","endLine":6,"endColumn":72},{"ruleId":"358","severity":1,"message":"379","line":42,"column":11,"nodeType":"360","messageId":"361","endLine":42,"endColumn":18},{"ruleId":"358","severity":1,"message":"380","line":44,"column":20,"nodeType":"360","messageId":"361","endLine":44,"endColumn":28},{"ruleId":"358","severity":1,"message":"381","line":50,"column":12,"nodeType":"360","messageId":"361","endLine":50,"endColumn":17},{"ruleId":"358","severity":1,"message":"382","line":50,"column":19,"nodeType":"360","messageId":"361","endLine":50,"endColumn":27},{"ruleId":"358","severity":1,"message":"383","line":53,"column":12,"nodeType":"360","messageId":"361","endLine":53,"endColumn":27},{"ruleId":"358","severity":1,"message":"384","line":53,"column":29,"nodeType":"360","messageId":"361","endLine":53,"endColumn":47},{"ruleId":"358","severity":1,"message":"385","line":55,"column":12,"nodeType":"360","messageId":"361","endLine":55,"endColumn":25},{"ruleId":"358","severity":1,"message":"386","line":55,"column":26,"nodeType":"360","messageId":"361","endLine":55,"endColumn":42},{"ruleId":"358","severity":1,"message":"387","line":56,"column":12,"nodeType":"360","messageId":"361","endLine":56,"endColumn":21},{"ruleId":"358","severity":1,"message":"388","line":56,"column":22,"nodeType":"360","messageId":"361","endLine":56,"endColumn":34},{"ruleId":"358","severity":1,"message":"389","line":72,"column":12,"nodeType":"360","messageId":"361","endLine":72,"endColumn":22},{"ruleId":"358","severity":1,"message":"390","line":74,"column":12,"nodeType":"360","messageId":"361","endLine":74,"endColumn":17},{"ruleId":"358","severity":1,"message":"391","line":74,"column":18,"nodeType":"360","messageId":"361","endLine":74,"endColumn":26},{"ruleId":"358","severity":1,"message":"392","line":76,"column":12,"nodeType":"360","messageId":"361","endLine":76,"endColumn":21},{"ruleId":"358","severity":1,"message":"393","line":76,"column":22,"nodeType":"360","messageId":"361","endLine":76,"endColumn":34},{"ruleId":"358","severity":1,"message":"394","line":79,"column":12,"nodeType":"360","messageId":"361","endLine":79,"endColumn":15},{"ruleId":"358","severity":1,"message":"395","line":79,"column":16,"nodeType":"360","messageId":"361","endLine":79,"endColumn":22},{"ruleId":"358","severity":1,"message":"396","line":83,"column":11,"nodeType":"360","messageId":"361","endLine":83,"endColumn":16},{"ruleId":"358","severity":1,"message":"397","line":90,"column":11,"nodeType":"360","messageId":"361","endLine":90,"endColumn":15},{"ruleId":"358","severity":1,"message":"398","line":105,"column":11,"nodeType":"360","messageId":"361","endLine":105,"endColumn":32},{"ruleId":"372","severity":1,"message":"399","line":190,"column":3,"nodeType":"400","endLine":190,"endColumn":12,"suggestions":"401"},{"ruleId":"402","severity":1,"message":"403","line":190,"column":3,"nodeType":"400","messageId":"404","endLine":190,"endColumn":12},{"ruleId":"372","severity":1,"message":"405","line":228,"column":11,"nodeType":"400","endLine":228,"endColumn":31,"suggestions":"406"},{"ruleId":"402","severity":1,"message":"403","line":228,"column":11,"nodeType":"400","messageId":"404","endLine":228,"endColumn":31},{"ruleId":"402","severity":1,"message":"403","line":251,"column":3,"nodeType":"400","messageId":"404","endLine":251,"endColumn":18},{"ruleId":"407","severity":1,"message":"408","line":382,"column":49,"nodeType":"409","messageId":"367","endLine":382,"endColumn":51},{"ruleId":"358","severity":1,"message":"410","line":7,"column":8,"nodeType":"360","messageId":"361","endLine":7,"endColumn":23},{"ruleId":"358","severity":1,"message":"411","line":14,"column":27,"nodeType":"360","messageId":"361","endLine":14,"endColumn":33},{"ruleId":"358","severity":1,"message":"380","line":42,"column":20,"nodeType":"360","messageId":"361","endLine":42,"endColumn":28},{"ruleId":"358","severity":1,"message":"412","line":1,"column":24,"nodeType":"360","messageId":"361","endLine":1,"endColumn":34},{"ruleId":"358","severity":1,"message":"380","line":14,"column":20,"nodeType":"360","messageId":"361","endLine":14,"endColumn":28},{"ruleId":"413","severity":1,"message":"414","line":128,"column":34,"nodeType":"415","endLine":128,"endColumn":133},{"ruleId":"358","severity":1,"message":"416","line":2,"column":17,"nodeType":"360","messageId":"361","endLine":2,"endColumn":25},{"ruleId":"358","severity":1,"message":"417","line":7,"column":8,"nodeType":"360","messageId":"361","endLine":7,"endColumn":21},{"ruleId":"358","severity":1,"message":"418","line":8,"column":8,"nodeType":"360","messageId":"361","endLine":8,"endColumn":21},{"ruleId":"358","severity":1,"message":"380","line":27,"column":20,"nodeType":"360","messageId":"361","endLine":27,"endColumn":28},{"ruleId":"358","severity":1,"message":"419","line":8,"column":9,"nodeType":"360","messageId":"361","endLine":8,"endColumn":17},{"ruleId":"358","severity":1,"message":"420","line":11,"column":8,"nodeType":"360","messageId":"361","endLine":11,"endColumn":16},{"ruleId":"358","severity":1,"message":"380","line":53,"column":20,"nodeType":"360","messageId":"361","endLine":53,"endColumn":28},{"ruleId":"358","severity":1,"message":"379","line":54,"column":11,"nodeType":"360","messageId":"361","endLine":54,"endColumn":18},{"ruleId":"402","severity":1,"message":"403","line":85,"column":8,"nodeType":"400","messageId":"404","endLine":85,"endColumn":28},{"ruleId":"358","severity":1,"message":"380","line":9,"column":16,"nodeType":"360","messageId":"361","endLine":9,"endColumn":24},{"ruleId":"358","severity":1,"message":"380","line":19,"column":20,"nodeType":"360","messageId":"361","endLine":19,"endColumn":28},{"ruleId":"402","severity":1,"message":"403","line":65,"column":4,"nodeType":"400","messageId":"404","endLine":65,"endColumn":27},{"ruleId":"358","severity":1,"message":"421","line":8,"column":7,"nodeType":"360","messageId":"361","endLine":8,"endColumn":16},{"ruleId":"358","severity":1,"message":"422","line":6,"column":9,"nodeType":"360","messageId":"361","endLine":6,"endColumn":23},{"ruleId":"358","severity":1,"message":"423","line":6,"column":25,"nodeType":"360","messageId":"361","endLine":6,"endColumn":36},{"ruleId":"358","severity":1,"message":"419","line":7,"column":9,"nodeType":"360","messageId":"361","endLine":7,"endColumn":17},{"ruleId":"358","severity":1,"message":"380","line":13,"column":20,"nodeType":"360","messageId":"361","endLine":13,"endColumn":28},{"ruleId":"358","severity":1,"message":"424","line":5,"column":8,"nodeType":"360","messageId":"361","endLine":5,"endColumn":19},{"ruleId":"358","severity":1,"message":"425","line":11,"column":10,"nodeType":"360","messageId":"361","endLine":11,"endColumn":15},{"ruleId":"358","severity":1,"message":"426","line":12,"column":8,"nodeType":"360","messageId":"361","endLine":12,"endColumn":20},{"ruleId":"358","severity":1,"message":"380","line":37,"column":20,"nodeType":"360","messageId":"361","endLine":37,"endColumn":28},{"ruleId":"372","severity":1,"message":"427","line":75,"column":4,"nodeType":"400","endLine":75,"endColumn":24,"suggestions":"428"},{"ruleId":"358","severity":1,"message":"429","line":4,"column":8,"nodeType":"360","messageId":"361","endLine":4,"endColumn":19},{"ruleId":"358","severity":1,"message":"430","line":48,"column":8,"nodeType":"360","messageId":"361","endLine":48,"endColumn":21},{"ruleId":"358","severity":1,"message":"431","line":48,"column":23,"nodeType":"360","messageId":"361","endLine":48,"endColumn":39},{"ruleId":"372","severity":1,"message":"432","line":65,"column":4,"nodeType":"400","endLine":65,"endColumn":11,"suggestions":"433"},{"ruleId":"402","severity":1,"message":"403","line":65,"column":4,"nodeType":"400","messageId":"404","endLine":65,"endColumn":11},{"ruleId":"358","severity":1,"message":"434","line":3,"column":8,"nodeType":"360","messageId":"361","endLine":3,"endColumn":13},{"ruleId":"358","severity":1,"message":"379","line":32,"column":9,"nodeType":"360","messageId":"361","endLine":32,"endColumn":16},{"ruleId":"358","severity":1,"message":"389","line":34,"column":10,"nodeType":"360","messageId":"361","endLine":34,"endColumn":20},{"ruleId":"354","replacedBy":"435"},{"ruleId":"356","replacedBy":"436"},{"ruleId":"358","severity":1,"message":"380","line":15,"column":20,"nodeType":"360","messageId":"361","endLine":15,"endColumn":28},{"ruleId":"413","severity":1,"message":"414","line":150,"column":43,"nodeType":"415","endLine":150,"endColumn":120},{"ruleId":"358","severity":1,"message":"421","line":49,"column":7,"nodeType":"360","messageId":"361","endLine":49,"endColumn":16},{"ruleId":"358","severity":1,"message":"437","line":50,"column":7,"nodeType":"360","messageId":"361","endLine":50,"endColumn":21},{"ruleId":"358","severity":1,"message":"380","line":12,"column":16,"nodeType":"360","messageId":"361","endLine":12,"endColumn":24},{"ruleId":"358","severity":1,"message":"380","line":11,"column":20,"nodeType":"360","messageId":"361","endLine":11,"endColumn":28},{"ruleId":"358","severity":1,"message":"416","line":1,"column":17,"nodeType":"360","messageId":"361","endLine":1,"endColumn":25},{"ruleId":"358","severity":1,"message":"438","line":12,"column":9,"nodeType":"360","messageId":"361","endLine":12,"endColumn":22},{"ruleId":"358","severity":1,"message":"439","line":20,"column":7,"nodeType":"360","messageId":"361","endLine":20,"endColumn":16},{"ruleId":"358","severity":1,"message":"380","line":11,"column":16,"nodeType":"360","messageId":"361","endLine":11,"endColumn":24},{"ruleId":"358","severity":1,"message":"440","line":6,"column":38,"nodeType":"360","messageId":"361","endLine":6,"endColumn":48},{"ruleId":"358","severity":1,"message":"380","line":13,"column":20,"nodeType":"360","messageId":"361","endLine":13,"endColumn":28},{"ruleId":"372","severity":1,"message":"441","line":64,"column":3,"nodeType":"400","endLine":64,"endColumn":23,"suggestions":"442"},{"ruleId":"402","severity":1,"message":"403","line":64,"column":3,"nodeType":"400","messageId":"404","endLine":64,"endColumn":23},{"ruleId":"358","severity":1,"message":"380","line":13,"column":20,"nodeType":"360","messageId":"361","endLine":13,"endColumn":28},{"ruleId":"413","severity":1,"message":"414","line":130,"column":34,"nodeType":"415","endLine":130,"endColumn":139},{"ruleId":"358","severity":1,"message":"380","line":31,"column":20,"nodeType":"360","messageId":"361","endLine":31,"endColumn":28},{"ruleId":"358","severity":1,"message":"443","line":6,"column":8,"nodeType":"360","messageId":"361","endLine":6,"endColumn":21},{"ruleId":"358","severity":1,"message":"380","line":35,"column":20,"nodeType":"360","messageId":"361","endLine":35,"endColumn":28},{"ruleId":"372","severity":1,"message":"444","line":50,"column":7,"nodeType":"400","endLine":50,"endColumn":13,"suggestions":"445"},{"ruleId":"358","severity":1,"message":"380","line":9,"column":20,"nodeType":"360","messageId":"361","endLine":9,"endColumn":28},{"ruleId":"372","severity":1,"message":"446","line":32,"column":7,"nodeType":"400","endLine":32,"endColumn":13,"suggestions":"447"},{"ruleId":"358","severity":1,"message":"380","line":32,"column":20,"nodeType":"360","messageId":"361","endLine":32,"endColumn":28},{"ruleId":"358","severity":1,"message":"380","line":10,"column":21,"nodeType":"360","messageId":"361","endLine":10,"endColumn":29},{"ruleId":"358","severity":1,"message":"448","line":12,"column":13,"nodeType":"360","messageId":"361","endLine":12,"endColumn":27},{"ruleId":"358","severity":1,"message":"449","line":16,"column":11,"nodeType":"360","messageId":"361","endLine":16,"endColumn":24},{"ruleId":"372","severity":1,"message":"450","line":36,"column":8,"nodeType":"400","endLine":36,"endColumn":15,"suggestions":"451"},{"ruleId":"402","severity":1,"message":"403","line":36,"column":8,"nodeType":"400","messageId":"404","endLine":36,"endColumn":15},{"ruleId":"413","severity":1,"message":"414","line":44,"column":29,"nodeType":"415","endLine":44,"endColumn":64},{"ruleId":"358","severity":1,"message":"416","line":1,"column":17,"nodeType":"360","messageId":"361","endLine":1,"endColumn":25},{"ruleId":"358","severity":1,"message":"452","line":5,"column":8,"nodeType":"360","messageId":"361","endLine":5,"endColumn":21},{"ruleId":"358","severity":1,"message":"453","line":6,"column":8,"nodeType":"360","messageId":"361","endLine":6,"endColumn":25},{"ruleId":"358","severity":1,"message":"419","line":4,"column":10,"nodeType":"360","messageId":"361","endLine":4,"endColumn":18},{"ruleId":"358","severity":1,"message":"454","line":6,"column":8,"nodeType":"360","messageId":"361","endLine":6,"endColumn":16},{"ruleId":"358","severity":1,"message":"380","line":10,"column":20,"nodeType":"360","messageId":"361","endLine":10,"endColumn":28},{"ruleId":"407","severity":1,"message":"455","line":54,"column":23,"nodeType":"409","messageId":"367","endLine":54,"endColumn":25},{"ruleId":"456","severity":1,"message":"457","line":56,"column":44,"nodeType":"458","messageId":"459","endLine":56,"endColumn":46},{"ruleId":"407","severity":1,"message":"455","line":57,"column":32,"nodeType":"409","messageId":"367","endLine":57,"endColumn":34},{"ruleId":"372","severity":1,"message":"460","line":74,"column":4,"nodeType":"400","endLine":74,"endColumn":49,"suggestions":"461"},{"ruleId":"402","severity":1,"message":"403","line":74,"column":4,"nodeType":"400","messageId":"404","endLine":74,"endColumn":49},{"ruleId":"407","severity":1,"message":"455","line":82,"column":110,"nodeType":"409","messageId":"367","endLine":82,"endColumn":112},{"ruleId":"358","severity":1,"message":"380","line":43,"column":20,"nodeType":"360","messageId":"361","endLine":43,"endColumn":28},{"ruleId":"372","severity":1,"message":"427","line":67,"column":9,"nodeType":"400","endLine":67,"endColumn":51,"suggestions":"462"},{"ruleId":"402","severity":1,"message":"403","line":67,"column":9,"nodeType":"400","messageId":"404","endLine":67,"endColumn":51},{"ruleId":"407","severity":1,"message":"455","line":84,"column":33,"nodeType":"409","messageId":"367","endLine":84,"endColumn":35},{"ruleId":"407","severity":1,"message":"408","line":89,"column":45,"nodeType":"409","messageId":"367","endLine":89,"endColumn":47},{"ruleId":"354","replacedBy":"463"},{"ruleId":"356","replacedBy":"464"},{"ruleId":"358","severity":1,"message":"465","line":10,"column":10,"nodeType":"360","messageId":"361","endLine":10,"endColumn":16},{"ruleId":"358","severity":1,"message":"466","line":10,"column":18,"nodeType":"360","messageId":"361","endLine":10,"endColumn":23},{"ruleId":"358","severity":1,"message":"467","line":11,"column":10,"nodeType":"360","messageId":"361","endLine":11,"endColumn":14},{"ruleId":"358","severity":1,"message":"468","line":44,"column":7,"nodeType":"360","messageId":"361","endLine":44,"endColumn":11},{"ruleId":"358","severity":1,"message":"430","line":49,"column":8,"nodeType":"360","messageId":"361","endLine":49,"endColumn":21},{"ruleId":"358","severity":1,"message":"431","line":49,"column":23,"nodeType":"360","messageId":"361","endLine":49,"endColumn":39},{"ruleId":"372","severity":1,"message":"432","line":66,"column":4,"nodeType":"400","endLine":66,"endColumn":12,"suggestions":"469"},{"ruleId":"402","severity":1,"message":"403","line":66,"column":4,"nodeType":"400","messageId":"404","endLine":66,"endColumn":12},{"ruleId":"358","severity":1,"message":"470","line":68,"column":8,"nodeType":"360","messageId":"361","endLine":68,"endColumn":19},{"ruleId":"358","severity":1,"message":"471","line":68,"column":20,"nodeType":"360","messageId":"361","endLine":68,"endColumn":34},{"ruleId":"358","severity":1,"message":"472","line":70,"column":8,"nodeType":"360","messageId":"361","endLine":70,"endColumn":11},{"ruleId":"358","severity":1,"message":"473","line":70,"column":12,"nodeType":"360","messageId":"361","endLine":70,"endColumn":18},{"ruleId":"358","severity":1,"message":"474","line":3,"column":10,"nodeType":"360","messageId":"361","endLine":3,"endColumn":23},{"ruleId":"372","severity":1,"message":"446","line":30,"column":7,"nodeType":"400","endLine":30,"endColumn":15,"suggestions":"475"},{"ruleId":"402","severity":1,"message":"403","line":30,"column":7,"nodeType":"400","messageId":"404","endLine":30,"endColumn":15},{"ruleId":"358","severity":1,"message":"443","line":6,"column":8,"nodeType":"360","messageId":"361","endLine":6,"endColumn":21},{"ruleId":"358","severity":1,"message":"474","line":9,"column":10,"nodeType":"360","messageId":"361","endLine":9,"endColumn":23},{"ruleId":"372","severity":1,"message":"444","line":47,"column":7,"nodeType":"400","endLine":47,"endColumn":15,"suggestions":"476"},{"ruleId":"402","severity":1,"message":"403","line":47,"column":7,"nodeType":"400","messageId":"404","endLine":47,"endColumn":15},"no-native-reassign",["477"],"no-negated-in-lhs",["478"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'SendMessage' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'openRequired' is assigned a value but never used.","'setOpenRequired' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userFromLocalStorage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'unsubscribe' is assigned a value but never used.","Assignments to the 'user_Id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","'Popover' is defined but never used.","'classes' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'likes' is assigned a value but never used.","'setLikes' is assigned a value but never used.","'favouritesColor' is assigned a value but never used.","'setfavouritesColor' is assigned a value but never used.","'firstTimeLike' is assigned a value but never used.","'setFirstTimeLike' is assigned a value but never used.","'likeColor' is assigned a value but never used.","'setLikeColor' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'liked' is assigned a value but never used.","'setLiked' is assigned a value but never used.","'likedData' is assigned a value but never used.","'setLikedData' is assigned a value but never used.","'uid' is assigned a value but never used.","'setUid' is assigned a value but never used.","'count' is assigned a value but never used.","'open' is assigned a value but never used.","'handleHoverModalClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'like', 'likeCount', and 'user.uid'. Either include them or remove the dependency array.","ArrayExpression",["479"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'chats_array' and 'user_id'. Either include them or remove the dependency array. If 'setIsPresent' needs the current value of 'user_id', you can also switch to useReducer instead of useState and read 'user_id' in the reducer.",["480"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'MailOutlineIcon' is defined but never used.","'Router' is defined but never used.","'useContext' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'LinesEllipsis' is defined but never used.","'responsiveHOC' is defined but never used.","'DataBase' is defined but never used.","'FlipMove' is defined but never used.","'useStyles' is assigned a value but never used.","'InsertEmoticon' is defined but never used.","'MicOutlined' is defined but never used.","'CardActions' is defined but never used.","'Paper' is defined but never used.","'MoreVertIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.",["481"],"'CardContent' is defined but never used.","'numberOfPosts' is assigned a value but never used.","'setNumberOfPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["482"],"'Modal' is defined but never used.",["477"],["478"],"'StyledDateTime' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'navValues' is assigned a value but never used.","'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'confessionComments'. Either include it or remove the dependency array.",["483"],"'ListSubheader' is defined but never used.","React Hook useEffect has a missing dependency: 'posts'. Either include it or remove the dependency array.",["484"],"React Hook useEffect has a missing dependency: 'events'. Either include it or remove the dependency array.",["485"],"'eventBookmarks' is assigned a value but never used.","'convertToDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'postBookmarks'. Either include it or remove the dependency array.",["486"],"'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'firebase' is defined but never used.","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["487"],["488"],["477"],["478"],"'Button' is defined but never used.","'Input' is defined but never used.","'auth' is defined but never used.","'user' is assigned a value but never used.",["489"],"'displayName' is assigned a value but never used.","'setDisplayName' is assigned a value but never used.","'bio' is assigned a value but never used.","'setBio' is assigned a value but never used.","'useStateValue' is defined but never used.",["490"],["491"],"no-global-assign","no-unsafe-negation",{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"514","fix":"515"},{"desc":"516","fix":"517"},"Update the dependencies array to be: [like, likeCount, postId, user.uid]",{"range":"518","text":"519"},"Update the dependencies array to be: [postId, chats, user, user_id, chats_array]",{"range":"520","text":"521"},"Update the dependencies array to be: [eventId, interested, user.uid]",{"range":"522","text":"523"},"Update the dependencies array to be: [user, userInfo]",{"range":"524","text":"525"},"Update the dependencies array to be: [user, confessionId, confessionComments]",{"range":"526","text":"527"},"Update the dependencies array to be: [posts, user]",{"range":"528","text":"529"},"Update the dependencies array to be: [events, user]",{"range":"530","text":"531"},"Update the dependencies array to be: [postBookmarks, user]",{"range":"532","text":"533"},"Update the dependencies array to be: [chatId, messages.length, recentChat, lastSeen, user]",{"range":"534","text":"535"},"Update the dependencies array to be: [chatId, chat_username, online, currentChat, user.uid]",{"range":"536","text":"537"},"Update the dependencies array to be: [palId, userInfo]",{"range":"538","text":"539"},"Update the dependencies array to be: [events, palId]",{"range":"540","text":"541"},"Update the dependencies array to be: [palId, posts]",{"range":"542","text":"543"},[7404,7413],"[like, likeCount, postId, user.uid]",[9311,9331],"[postId, chats, user, user_id, chats_array]",[2954,2974],"[eventId, interested, user.uid]",[2217,2224],"[user, userInfo]",[2829,2849],"[user, confessionId, confessionComments]",[1646,1652],"[posts, user]",[1297,1303],"[events, user]",[1487,1494],"[postBookmarks, user]",[2878,2923],"[chatId, messages.length, recentChat, lastSeen, user]",[2270,2312],"[chatId, chat_username, online, currentChat, user.uid]",[2345,2353],"[palId, userInfo]",[1216,1224],"[events, palId]",[1564,1572],"[palId, posts]"]