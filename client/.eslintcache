[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js":"16","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js":"17"},{"size":730,"mtime":1618602690657,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1617957038337,"results":"20","hashOfConfig":"19"},{"size":13056,"mtime":1619545519699,"results":"21","hashOfConfig":"19"},{"size":16481,"mtime":1619544239354,"results":"22","hashOfConfig":"19"},{"size":1561,"mtime":1619523020965,"results":"23","hashOfConfig":"19"},{"size":951,"mtime":1618496473804,"results":"24","hashOfConfig":"19"},{"size":1160,"mtime":1619024742823,"results":"25","hashOfConfig":"19"},{"size":5869,"mtime":1619074700332,"results":"26","hashOfConfig":"19"},{"size":415,"mtime":1619523406365,"results":"27","hashOfConfig":"19"},{"size":1942,"mtime":1619251378679,"results":"28","hashOfConfig":"19"},{"size":10590,"mtime":1619543601210,"results":"29","hashOfConfig":"19"},{"size":1431,"mtime":1619234485765,"results":"30","hashOfConfig":"19"},{"size":1700,"mtime":1619447661152,"results":"31","hashOfConfig":"19"},{"size":462,"mtime":1619431538338,"results":"32","hashOfConfig":"19"},{"size":639,"mtime":1619430467561,"results":"33","hashOfConfig":"19"},{"size":1657,"mtime":1619024760560,"results":"34","hashOfConfig":"19"},{"size":1814,"mtime":1619538390365,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1caugyp",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],["77","78"],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["79"],"/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["80","81","82","83","84","85","86","87","88"],"/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",["89"],"import React from 'react'\nimport './Widgets.css'\nimport { Input } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport WidgetsChat from './chat/WidgetsChat'\nimport WigetsDummy from './chat/WigetsDummy'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction Widgets() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"widgets\"> \n            <div className=\"widgets__inputBox\">\n                <SearchIcon className=\"widgets__searchIcon\"/>\n                <Input style={{color:\"aliceblue\"}} className=\"widgets__input\" type= \"text\" placeholder=\"Search Texx\" />\n            </div>\n            <div className=\"widgets___widgetContainer\">\n                {/* if user doesnt exists WidgetsChat component wasthrwoing an error hence I Made a fummy component which doesnt have a user object and \n                will be rendered during refresh transitions when momentarily user is unavailable instead of throwing an error  */}\n                {user?(<WidgetsChat/>):(<WigetsDummy/>)}\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["90","91"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction ImageUpload({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        \n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                        \n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["92"],"//structure of standard message\nimport React,{ forwardRef } from 'react';//forwardRef keeps track of what is changing\nimport {Card,Avatar,CardContent,Typography} from '@material-ui/core';\nimport './Message.css';\n\n//====================================================================================================\nconst Message =  forwardRef(({},ref) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    const isUser = true;\n    return (\n        //apply message__user class only if isUser is True\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <Card className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className=\"message__avatar\" alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <Typography className=\"message__username\" variant=\"h\">\n                        {isUser ?`${'You'}`: \"message.username\" || 'Unknown user'}\n                    </Typography>\n                </div>\n                <CardContent>\n                    <Typography className=\"message__message\" color=\"#E6E6E6\" variant=\"h5\" component=\"h2\">\n                        {\"message.message\"}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n        )\n    \n})\n\nexport default Message;","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["93","94","95","96","97","98"],"/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["99","100"],"import React, { useEffect, useState } from 'react'\nimport Post from './Post';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\n\n\nfunction Feed(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//posts array\nconst [posts, setPosts] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setPosts(snapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            })\n    },[]);\n    return (\n    <div className=\"feed\">\n            <div className=\"feed__posts\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                posts.map(({id,post})=>(<Post key={post.id} postId={id} username={post.username} user_id={post.user_id} caption={post.caption} imageUrl={post.imageUrl}></Post>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default Feed\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["101","102","103","104","105"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Message from './Message'\nimport './Chat.css'\nimport {DataBase} from '../firebase';\nimport {useStateValue} from '../../contexts/StateProvider';\n\n\n\nfunction Chat() {\n    //set the chat name in the\n    const [chatName,setChatName] = useState('')\n    //get the messages from the database\n    const [messages,setMessages] = useState([])\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const {chatId} = useParams()\n\n\n\n//======================================================GET Messages==========================================\n//everytime chat_user_id (which is basically the doc id inside the chat collection) changes pull the messages for that chat_user_id from the database\nuseEffect(() => {\n    if (user){\n    if (chatId){\n        //here the chat_user_id is taken from the user who posted that particular post to database\n        const unsubscribe = DataBase.collection('users').doc(user.uid).collection('chats').doc(chatId).collection('messages').onSnapshot((snapshot)=>(\n            setMessages(snapshot.data())\n        ))\n    }\n}\n    \n}, [chatId])\n\n\n//=============================================================================================================\n\n    return (                         \n             <div className=\"chat\">\n                <div className=\"chat__header\">\n                This is the beggining of your texx with {}\n                </div>\n                {\n                    messages.map((message)=>(<Message message={message}/>))\n                    \n                }\n             </div> \n\n\n    )\n}\n\nexport default Chat\n","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js",["106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],"\n//users in sidebar chat (online/offline)\n\nimport React, { useEffect, useState } from 'react'\nimport './WidgetsDummy.css'\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {ButtonBase} from '@material-ui/core';\nimport {Link} from 'react-router-dom';\nimport {DataBase} from '../firebase'\nimport firebase from 'firebase/app';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { Unsubscribe } from '@material-ui/icons';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsDummy() {\n\n    return (\n\n        <div className=\"widgetsChat\">\n            \n        </div>\n    )\n}\n\nexport default WidgetsDummy\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js",["121","122"],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":90,"column":28,"nodeType":"129","endLine":90,"endColumn":56},{"ruleId":"130","severity":1,"message":"131","line":3,"column":36,"nodeType":"132","messageId":"133","endLine":3,"endColumn":46},{"ruleId":"130","severity":1,"message":"134","line":12,"column":8,"nodeType":"132","messageId":"133","endLine":12,"endColumn":19},{"ruleId":"130","severity":1,"message":"135","line":25,"column":20,"nodeType":"132","messageId":"133","endLine":25,"endColumn":28},{"ruleId":"130","severity":1,"message":"136","line":37,"column":12,"nodeType":"132","messageId":"133","endLine":37,"endColumn":25},{"ruleId":"130","severity":1,"message":"137","line":37,"column":26,"nodeType":"132","messageId":"133","endLine":37,"endColumn":42},{"ruleId":"138","severity":1,"message":"139","line":120,"column":3,"nodeType":"140","messageId":"141","endLine":120,"endColumn":18},{"ruleId":"127","severity":1,"message":"142","line":159,"column":11,"nodeType":"140","endLine":159,"endColumn":24,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"139","line":159,"column":11,"nodeType":"140","messageId":"141","endLine":159,"endColumn":24},{"ruleId":"144","severity":1,"message":"145","line":266,"column":36,"nodeType":"146","messageId":"147","endLine":266,"endColumn":38},{"ruleId":"130","severity":1,"message":"135","line":11,"column":20,"nodeType":"132","messageId":"133","endLine":11,"endColumn":28},{"ruleId":"130","severity":1,"message":"131","line":1,"column":24,"nodeType":"132","messageId":"133","endLine":1,"endColumn":34},{"ruleId":"130","severity":1,"message":"135","line":13,"column":20,"nodeType":"132","messageId":"133","endLine":13,"endColumn":28},{"ruleId":"148","severity":1,"message":"149","line":7,"column":30,"nodeType":"150","messageId":"147","endLine":7,"endColumn":32},{"ruleId":"130","severity":1,"message":"151","line":7,"column":22,"nodeType":"132","messageId":"133","endLine":7,"endColumn":30},{"ruleId":"130","severity":1,"message":"152","line":15,"column":8,"nodeType":"132","messageId":"133","endLine":15,"endColumn":16},{"ruleId":"130","severity":1,"message":"153","line":18,"column":10,"nodeType":"132","messageId":"133","endLine":18,"endColumn":21},{"ruleId":"130","severity":1,"message":"154","line":59,"column":12,"nodeType":"132","messageId":"133","endLine":59,"endColumn":20},{"ruleId":"130","severity":1,"message":"155","line":59,"column":22,"nodeType":"132","messageId":"133","endLine":59,"endColumn":33},{"ruleId":"127","severity":1,"message":"156","line":80,"column":8,"nodeType":"140","endLine":80,"endColumn":14,"suggestions":"157"},{"ruleId":"130","severity":1,"message":"158","line":10,"column":9,"nodeType":"132","messageId":"133","endLine":10,"endColumn":13},{"ruleId":"130","severity":1,"message":"135","line":10,"column":16,"nodeType":"132","messageId":"133","endLine":10,"endColumn":24},{"ruleId":"130","severity":1,"message":"159","line":12,"column":12,"nodeType":"132","messageId":"133","endLine":12,"endColumn":20},{"ruleId":"130","severity":1,"message":"160","line":12,"column":21,"nodeType":"132","messageId":"133","endLine":12,"endColumn":32},{"ruleId":"130","severity":1,"message":"135","line":16,"column":20,"nodeType":"132","messageId":"133","endLine":16,"endColumn":28},{"ruleId":"130","severity":1,"message":"161","line":27,"column":15,"nodeType":"132","messageId":"133","endLine":27,"endColumn":26},{"ruleId":"127","severity":1,"message":"162","line":33,"column":4,"nodeType":"140","endLine":33,"endColumn":12,"suggestions":"163"},{"ruleId":"130","severity":1,"message":"164","line":4,"column":17,"nodeType":"132","messageId":"133","endLine":4,"endColumn":26},{"ruleId":"130","severity":1,"message":"165","line":4,"column":28,"nodeType":"132","messageId":"133","endLine":4,"endColumn":36},{"ruleId":"130","severity":1,"message":"166","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":13},{"ruleId":"130","severity":1,"message":"151","line":7,"column":22,"nodeType":"132","messageId":"133","endLine":7,"endColumn":30},{"ruleId":"130","severity":1,"message":"167","line":8,"column":8,"nodeType":"132","messageId":"133","endLine":8,"endColumn":12},{"ruleId":"130","severity":1,"message":"168","line":9,"column":8,"nodeType":"132","messageId":"133","endLine":9,"endColumn":19},{"ruleId":"130","severity":1,"message":"169","line":10,"column":8,"nodeType":"132","messageId":"133","endLine":10,"endColumn":18},{"ruleId":"130","severity":1,"message":"170","line":11,"column":8,"nodeType":"132","messageId":"133","endLine":11,"endColumn":14},{"ruleId":"130","severity":1,"message":"171","line":12,"column":9,"nodeType":"132","messageId":"133","endLine":12,"endColumn":19},{"ruleId":"130","severity":1,"message":"172","line":13,"column":9,"nodeType":"132","messageId":"133","endLine":13,"endColumn":13},{"ruleId":"130","severity":1,"message":"173","line":14,"column":9,"nodeType":"132","messageId":"133","endLine":14,"endColumn":17},{"ruleId":"130","severity":1,"message":"152","line":15,"column":8,"nodeType":"132","messageId":"133","endLine":15,"endColumn":16},{"ruleId":"130","severity":1,"message":"174","line":16,"column":9,"nodeType":"132","messageId":"133","endLine":16,"endColumn":22},{"ruleId":"130","severity":1,"message":"153","line":17,"column":10,"nodeType":"132","messageId":"133","endLine":17,"endColumn":21},{"ruleId":"130","severity":1,"message":"175","line":19,"column":7,"nodeType":"132","messageId":"133","endLine":19,"endColumn":16},{"ruleId":"130","severity":1,"message":"176","line":8,"column":10,"nodeType":"132","messageId":"133","endLine":8,"endColumn":19},{"ruleId":"130","severity":1,"message":"135","line":13,"column":20,"nodeType":"132","messageId":"133","endLine":13,"endColumn":28},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"react-hooks/exhaustive-deps","Assignments to the 'userFromLocalStorage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'PublishIcon' is defined but never used.","'dispatch' is assigned a value but never used.","'firstTimeLike' is assigned a value but never used.","'setFirstTimeLike' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'chats_array', 'isPresent', and 'user_id'. Either include them or remove the dependency array. If 'setIsPresent' needs the current value of 'user_id', you can also switch to useReducer instead of useState and read 'user_id' in the reducer.",["179"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'useTheme' is defined but never used.","'firebase' is defined but never used.","'Unsubscribe' is defined but never used.","'messages' is assigned a value but never used.","'setMessages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chats'. Either include it or remove the dependency array.",["180"],"'user' is assigned a value but never used.","'chatName' is assigned a value but never used.","'setChatName' is assigned a value but never used.","'unsubscribe' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["181"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Badge' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'Avatar' is defined but never used.","'ButtonBase' is defined but never used.","'Link' is defined but never used.","'DataBase' is defined but never used.","'useStateValue' is defined but never used.","'useStyles' is assigned a value but never used.","'useParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [chats, chats_array, isPresent, user, user_id]",{"range":"188","text":"189"},"Update the dependencies array to be: [chats, user]",{"range":"190","text":"191"},"Update the dependencies array to be: [chatId, user]",{"range":"192","text":"193"},[7194,7207],"[chats, chats_array, isPresent, user, user_id]",[2545,2551],"[chats, user]",[1187,1195],"[chatId, user]"]