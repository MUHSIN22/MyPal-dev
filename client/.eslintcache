[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15"},{"size":730,"mtime":1618412181429,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1617957038337,"results":"18","hashOfConfig":"17"},{"size":8698,"mtime":1618500188168,"results":"19","hashOfConfig":"17"},{"size":10182,"mtime":1618515582230,"results":"20","hashOfConfig":"17"},{"size":1561,"mtime":1618235487784,"results":"21","hashOfConfig":"17"},{"size":951,"mtime":1618496473804,"results":"22","hashOfConfig":"17"},{"size":662,"mtime":1618414688068,"results":"23","hashOfConfig":"17"},{"size":5658,"mtime":1618412126489,"results":"24","hashOfConfig":"17"},{"size":359,"mtime":1617962357642,"results":"25","hashOfConfig":"17"},{"size":1532,"mtime":1618155103187,"results":"26","hashOfConfig":"17"},{"size":12029,"mtime":1618206380966,"results":"27","hashOfConfig":"17"},{"size":1420,"mtime":1618414655170,"results":"28","hashOfConfig":"17"},{"size":1441,"mtime":1618165843821,"results":"29","hashOfConfig":"17"},{"size":365,"mtime":1618414672546,"results":"30","hashOfConfig":"17"},{"size":380,"mtime":1618411552235,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1caugyp",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],["68","69"],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["70"],"/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["71","72","73","74","75","76","77"],"/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["78","79"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {UserContext} from '../contexts/StateProvider' \n\nfunction ImageUpload({username}) {\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username\n\n                            })\n                            //once done set clear the input \n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        \n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                        \n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["80"],"//structure of standard message\nimport React,{ forwardRef } from 'react';//forwardRef keeps track of what is changing\nimport {Card,Avatar,CardContent,Typography} from '@material-ui/core';\nimport './Message.css';\n\n//====================================================================================================\nconst Message =  forwardRef(({},ref) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    const isUser = true;\n    return (\n        //apply message__user class only if isUser is True\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <Card className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className=\"message__avatar\" alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <Typography className=\"message__username\" variant=\"h\">\n                        {isUser ?`${'You'}`: \"message.username\" || 'Unknown user'}\n                    </Typography>\n                </div>\n                <CardContent>\n                    <Typography className=\"message__message\" color=\"#E6E6E6\" variant=\"h5\" component=\"h2\">\n                        {\"message.message\"}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n        )\n    \n})\n\nexport default Message;","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["81","82"],"\n//users in sidebar chat (online/offline)\n\nimport React from 'react'\nimport './WidgetsChat.css'\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {ButtonBase} from '@material-ui/core';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsChat() {\n    const classes = useStyles();\n    const theme = useTheme();\n    return (\n//==========================================Online members===========================================================\n        <div className=\"widgetsChat\">\n            <div className=\"widgetsChat__online\">\n                 <p>Online<span><Badge color=\"primary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p>\n                 <div className=\"widgetsChat__onlineMembers\">\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                                <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                                <div className={classes.details}>\n                                        <CardContent className={classes.content}>\n                                            <Typography component=\"p\" variant=\"p\">\n                                                User\n                                            </Typography>\n                                            <Typography className={classes.typoStatus} variant=\"caption\">\n                                                status\n                                            </Typography>\n                                        </CardContent>\n                                </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                 </div>\n            </div>\n                                                        {/* offline members */}\n            <div className=\"widgetsChat__offline\">\n                 <p>Offline<span><Badge color=\"secondary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p> \n                 <div className=\"widgetsChat__offlineMembers\">\n                 <ButtonBase>\n                    <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                 </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WidgetsChat\n","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["83"],"import React, { useEffect, useState } from 'react'\nimport Post from './Post';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\n\n\nfunction Feed(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//posts array\nconst [posts, setPosts] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setPosts(snapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            })\n    },[]);\n    return (\n    <div className=\"feed\">\n            <div className=\"feed__posts\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                posts.map(({id,post})=>(<Post key={post.id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl}></Post>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default Feed\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["84"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Message from './Message'\nimport {InsertEmoticon, MicOutlined} from '@material-ui/icons';\nimport './Chat.css'\nimport {DataBase} from '../firebase';\n\nfunction Chat() {\nconst [input, setInput] = useState('')\nconst {chatId} = useParams()\nconst [chatName,setChatName] = useState('')\n\n//everytime roomId changes pull the messages for that roomId from the database\nuseEffect(() => {\n    \n    if (chatId){\n        DataBase.collection('rooms').doc(chatId).onSnapshot((snapshot)=>(\n            setChatName(snapshot.data().name)\n        ))\n    }\n    \n}, [chatId])\n\nconst sendMessage = (e) => {\n    e.preventDefault();\n    //add message to database\n    setInput('')\n}\n    return (                         \n             <div className=\"chat\">\n                <div className=\"chat__header\">\n                This is the beggining of your texx with selected_user\n                </div>\n                <Message/>\n\n                <div className=\"chat__input\">\n                    <InsertEmoticon/>\n                    <form>\n                        <input value={input} onChange={(e)=>setInput(e.target.value)} type=\"text\"/>\n                        <button onClick={sendMessage} type=\"submit\">Send a message</button>\n                    </form>\n                    <MicOutlined/>\n                </div>\n            </div> \n\n\n    )\n}\n\nexport default Chat\n","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":41,"column":10,"nodeType":"91","messageId":"92","endLine":41,"endColumn":12},{"ruleId":"93","severity":1,"message":"94","line":3,"column":36,"nodeType":"95","messageId":"96","endLine":3,"endColumn":46},{"ruleId":"93","severity":1,"message":"97","line":11,"column":8,"nodeType":"95","messageId":"96","endLine":11,"endColumn":26},{"ruleId":"93","severity":1,"message":"98","line":24,"column":20,"nodeType":"95","messageId":"96","endLine":24,"endColumn":28},{"ruleId":"93","severity":1,"message":"99","line":34,"column":12,"nodeType":"95","messageId":"96","endLine":34,"endColumn":27},{"ruleId":"93","severity":1,"message":"100","line":36,"column":12,"nodeType":"95","messageId":"96","endLine":36,"endColumn":25},{"ruleId":"93","severity":1,"message":"101","line":38,"column":11,"nodeType":"95","messageId":"96","endLine":38,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":178,"column":50,"nodeType":"104","messageId":"105","endLine":178,"endColumn":52},{"ruleId":"93","severity":1,"message":"94","line":1,"column":24,"nodeType":"95","messageId":"96","endLine":1,"endColumn":34},{"ruleId":"93","severity":1,"message":"106","line":9,"column":9,"nodeType":"95","messageId":"96","endLine":9,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":7,"column":30,"nodeType":"91","messageId":"92","endLine":7,"endColumn":32},{"ruleId":"93","severity":1,"message":"107","line":10,"column":8,"nodeType":"95","messageId":"96","endLine":10,"endColumn":17},{"ruleId":"93","severity":1,"message":"108","line":52,"column":11,"nodeType":"95","messageId":"96","endLine":52,"endColumn":16},{"ruleId":"93","severity":1,"message":"98","line":10,"column":16,"nodeType":"95","messageId":"96","endLine":10,"endColumn":24},{"ruleId":"93","severity":1,"message":"109","line":11,"column":8,"nodeType":"95","messageId":"96","endLine":11,"endColumn":16},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'FavoriteBorderIcon' is defined but never used.","'dispatch' is assigned a value but never used.","'favouritesColor' is assigned a value but never used.","'firstTimeLike' is assigned a value but never used.","'notLikeColor' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'UserContext' is defined but never used.","'CardMedia' is defined but never used.","'theme' is assigned a value but never used.","'chatName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]