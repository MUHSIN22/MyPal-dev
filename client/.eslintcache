[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js":"16","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js":"17"},{"size":730,"mtime":1618602690657,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1617957038337,"results":"20","hashOfConfig":"19"},{"size":12708,"mtime":1619536020168,"results":"21","hashOfConfig":"19"},{"size":16325,"mtime":1619448135282,"results":"22","hashOfConfig":"19"},{"size":1561,"mtime":1619523020965,"results":"23","hashOfConfig":"19"},{"size":951,"mtime":1618496473804,"results":"24","hashOfConfig":"19"},{"size":1160,"mtime":1619024742823,"results":"25","hashOfConfig":"19"},{"size":5869,"mtime":1619074700332,"results":"26","hashOfConfig":"19"},{"size":415,"mtime":1619523406365,"results":"27","hashOfConfig":"19"},{"size":1942,"mtime":1619251378679,"results":"28","hashOfConfig":"19"},{"size":10056,"mtime":1619523087563,"results":"29","hashOfConfig":"19"},{"size":1431,"mtime":1619234485765,"results":"30","hashOfConfig":"19"},{"size":1700,"mtime":1619447661152,"results":"31","hashOfConfig":"19"},{"size":462,"mtime":1619431538338,"results":"32","hashOfConfig":"19"},{"size":639,"mtime":1619430467561,"results":"33","hashOfConfig":"19"},{"size":1657,"mtime":1619024760560,"results":"34","hashOfConfig":"19"},{"size":1806,"mtime":1619446582229,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1caugyp",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"38"},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],["80","81"],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["82"],"/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["83","84","85","86","87","88","89","90","91"],"//post component\n\nimport React , {useState,useEffect,useContext} from 'react'\nimport './Post.css'\nimport Avatar from '@material-ui/core/Avatar';\nimport {Button, IconButton, Input } from '@material-ui/core';\nimport {DataBase} from './firebase'\nimport firebase from 'firebase';\nimport ChatBubbleOutlineRoundedIcon from '@material-ui/icons/ChatBubbleOutlineRounded';\nimport RepeatIcon from '@material-ui/icons/Repeat'\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport SendIcon from '@material-ui/icons/Send';\nimport {useStateValue} from '../contexts/StateProvider'\nimport FlipMove from 'react-flip-move';\n\n\n\n\n\nfunction Post({postId,username,user_id,caption,imageUrl}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store comments from the database for a praticular post in an array (GET from DataBase)\n    const [comments, setComments] = useState([]);\n    //input comment for a post from the user  (POST to DataBase)\n    const [comment, setComment] = useState('');\n    //store likes from the database for a praticular post in an array (GET from DataBase)\n    const [likes, setLikes] = useState([]);\n    //input comment for a post from the user  (POST to DataBase)\n    const [like, setLike] = useState(false);\n    //change color of the like button on click\n    const [favouritesColor, setfavouritesColor] = useState(false)\n    //to make sure user likes the post only once\n    const [firstTimeLike,setFirstTimeLike] = useState(true) \n    //\n    const [likeColor,setLikeColor] = useState('')\n    //to store users in chat list after getting them from the database\n    const [chats,setChats] = useState([]) \n    //the problem with let here is  it is making everything empty after \n    //to store uid and bool for if the user is present in the chat list\n    const [chats_array,setChats_array]= useState([])\n    const [isPresent,setIsPresent] = useState(false)\n\n\n//==================================================check whether user is present in the chat list=========================================================================\n    const isPresentInChats = (user_id,chats_array) => {\n        for (const chat of chats_array){\n            if (chat[0]===user_id){\n                return true\n            }\n        }\n\n}\n//======================================Post likes to the database===================================================================================\n\n    const postLike = (e) => {\n        e.preventDefault(); \n\n//like color doesnt change when we like the post for the first time\n        //whenever a new document is created it takes the like state of the previous document\n        //to not to do this change the like state whenver a new document is created \n//=======================================liking the document first time=============================\n\n        //if there is a document named by 'user.displayName' in the collection 'postLikes' that means this is not the first time we are liking the document \n        //creating a document named 'user.displayName' hence this will be !(false) hence true\n        if (    !(likes.filter(like => (like.username===user.displayName))).length     ){\n        console.log(\"if statement\")\n        //add like to the 'postLikes' collection of the particular post \n        setLike(true)   \n        DataBase.collection('posts').doc(postId).collection('postLikes').doc(user.uid).set(\n            {\n                like:like,\n                username:user.displayName,\n                timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n            }\n        )\n        setfavouritesColor(true)\n        setLikeColor('red')\n    \n        }\n\n//=======================================liking the document NOT first time==========================\n\n        //if not liking the post for the first time meaning the document by the name 'user.displayName' already exists in the collection postLikes\n        //hence this will be true \n        else if(  (likes.filter(like => (like.username===user.displayName))).length     ){\n            console.log(\"else statement\")\n            setLike(!like)\n            //update like to the 'postLikes' collection of the particular post \n            DataBase.collection('posts').doc(postId).collection('postLikes').doc(user.uid).update(\n                {\n                    like:like,\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp()\n                }\n            )\n                  \n        setfavouritesColor(!favouritesColor)\n        \n        setLikeColor(favouritesColor?'red':'')\n        }    \n}\n//======================================Get the list of users in chatlist===============================================================================\nuseEffect(()=>{\n    let unsubscribe\n    if (user)\n    {unsubscribe = DataBase.collection('users').doc(user.uid).collection('chats').orderBy('timestamp','desc').onSnapshot((snapshot)=>{\n                        setChats(snapshot.docs.map((doc) => (doc.data())))\n                    \n    \n                    })\n    }\nreturn  () => {\n    unsubscribe()\n};\n//when postId changes fire the code above\n},[,user_id,user])\n\n//========================================================================================================================\n\nuseEffect(() => {\n    //Run this function when the post component loads or there are changes in user object or chats object \n        //because we want to run this function only after the data from the database has been fetched and the component in which we are mapping this data (Button) that,\n        //loads after the component which calls for this function (<Avatar>) is loaded  \n        console.log(\"running AddButton\")\n            //loop through the object list of 'chats' \n            // if the 'chat_user_id' is already present in the chats object, then set the the second dimension true\n            //convert each object into an array and loop through it\n            let cha =[];\n            //to store the return from the function if the user is present in the chat list \n            for (const chat of Object.entries(chats)){\n                if (user_id===chat.chat_user_id){\n                    \n                    // console.log([chat[1].chat_user_id,true])\n                    // console.log([chat[1].chat_user_id,true][0])\n                    // first dimension is for uid \n                    // second dimension is a bool for checking whether the 'chat_user_id' is already present in the chats\n               \n                    cha.push([chat[1].chat_user_id,true])\n                    // console.log(\"chats_array \"+chats_array)\n                    \n                    \n                }\n                else{\n                    cha.push([chat[1].chat_user_id,false])\n                    // console.log(\"chats_array \"+chats_array)\n                    \n                }\n               \n\n            }\n            setChats_array(cha)\n            setIsPresent(isPresentInChats(user_id,chats_array))\n            console.log(isPresent)\n\n        },[,chats,user])\n//======================================Add the selected user to chats list============================================\nconst addToChats = () => {\n    //if the document by the user_id already exists then it wont change it\n    //if logged in user 'user.uid' == 'user_id' user who wrote the post  then dont add it to chats list\n    if(!(user.uid===user_id)){\n    DataBase.collection('users').doc(user.uid).collection('chats').doc(user_id).set({\n        chat_username:username,\n        //user id of the user who wrote the post\n        chat_user_id:user_id,\n        timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n\n        })\n    }\n    \n} \n//======================================Post comments to the database========================================================================================\nconst postComment = (e) => {\n    e.preventDefault();\n    //add comment to the 'comments' collection of the particular post \n    DataBase.collection('posts').doc(postId).collection('comments').add(\n        {\n         text:comment,\n         username:user.displayName,\n         timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        }\n    )\n    //clear the input after posting\n    setComment('')\n}\n//====================================Get the comments and likes from the database and display=================================================================\n    useEffect(() => {\n        let unsubscribe;\n        //if a postId is passed\n        if (postId){\n            //get a snapshot listner for 'comments' collection inside the passed 'postId' doc inside the collection 'posts'\n            unsubscribe = DataBase.collection('posts').doc(postId).collection('comments').orderBy('timestamp','desc').onSnapshot(\n                    (snapshot) =>{\n                        //set comments to the data inside the doc\n                                setComments(snapshot.docs.map((doc) => (doc.data())))\n                    })\n\n            //get a snapshot listner for 'postLikes' collection inside the passed 'postId' doc inside the collection 'posts'\n             DataBase.collection('posts').doc(postId).collection('postLikes').orderBy('timestamp','desc').onSnapshot(\n                (snapshot) =>{\n                    //set likes to the data inside the doc\n                            setLikes(snapshot.docs.map((doc) => (doc.data())))\n                           \n                })\n        }\n        return  () => {\n            unsubscribe()\n        \n        };\n        //when postId,user changes or page loads fire the code above\n},[postId,user])\n\n//==============================================================================================================================================================\n//     let x = likes.filter(like => (like.username===user.displayName))[0] \n\n//     for (let i=0;i<x.length;i++)\n//     {\n//         let k=x[i]\n//         if(typeof k === \"undefined\") {\n//             console.log(k,\"object no.\",i)\n//         }  \n//     }\n// }\n// console.log(\"Like object of the particluar user to change the color of the like buttons that user likes\", ( user ?(   (likes.length) ? ( (                 ).like            ):'test'):'test'))\n//================================================================================================================================================================\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\" >\n                                               {/*avatar managed by@material-ui/core*/}\n                <Avatar className=\"post__avatar\" alt={username} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                <h3>{username}</h3>\n                {/*==================================================================================================================================== */}\n \n                {/* {user.uid === user_id && <Button onClick={addToChats}>Add to chats</Button>} */}\n     \n                {/*initially when chats array does not exists as it is made after calling the addToChats function  */}\n                {/*if the array is empty (initial condition) */}\n                {/* {console.log(\"array length\")}\n                {console.log((Array.isArray(chats_array) && chats_array.length) === 0 )} */}\n                {/* {console.log(chats_array)} */}\n                {/*to check whether the user is present in the chats_array*/}\n                \n\n                { //to stop react from freaking out when the user is not logged in\n                 user && (\n                    //Dont show anything for the post which are written by the user who is logged in\n                    !(user.uid === user_id) &&  \n                    //when there are no chats (chat array is empty)\n                    (\n                         (Array.isArray(chats_array) && chats_array.length) === 0 ? (<Button onClick={addToChats}>Add to chats</Button>) : \n                    (\n                    //when there are chats\n                    //check if the user is present in the chats_array\n                    isPresent? \n                     //if present\n                    ( \n                    chats_array.map((chat)=>(\n                    //chat[0] contains the 'uid' of the 'user' who wrote the post \n                    //find the array element corresponding to the given post\n                    //this is done by mathcing the 'user_id' from 'posts' to chat_user_id (chat[0])\n                    //then check bool chat[1] for whether the element is present in an array or not\n                    //if the element is not present then show <Add to chats> else show <Chat>\n                    <span>{(chat[0]==user_id) && ((chat[1])?(<Button key={user_id} onClick={addToChats}>Add to chats</Button>):(<Button key={user_id}>Chat</Button>))}</span>\n                    ))\n\n                    ):\n                    //if not present\n                    (<Button key={user_id} onClick={addToChats}>Add  chats</Button>)\n                        )    \n                            ) \n                                )\n                    }\n                {/* {                chats_array.map((chat)=>{\n                                    console.log(chat+\"chta\")\n                })\n                } */}\n             \n            {/*===========================================================================================================================================*/}\n            </div>\n            {/* always run onLoad inside an img tag */}\n            <img className=\"post__image\" src={imageUrl} alt={username+\" \"+caption} />\n            <h4 className=\"post__text\"><strong>{username+\" \"}</strong>:{\" \"+caption}</h4>\n            <div className=\"post__footer\">\n                                                    {/*Comment icon*/}\n                            <ChatBubbleOutlineRoundedIcon fontsize=\"small\" cursor=\"pointer\"/>\n                                                    {/*Re-tweet icon*/}\n                            <RepeatIcon fontsize=\"small\" cursor=\"pointer\"/>\n                                                    {/*like icon*/}\n                            \n                                            \n                            <FlipMove>   \n                                {/* (like && (like.username===user.displayName)?(like.like?(<strong>You</strong>):(<strong></strong>)):(<strong>{like.username}</strong>)):(<strong></strong>) )}</p>       */}\n                            <FavoriteIcon   fontsize=\"small\" cursor=\"pointer\" onClick={postLike} style={{color:likeColor}} /> \n                                {likes.map((like)=>\n                                    (<p><strong>{user && (user.displayName===like.username?(like.like?(<strong>You{JSON.stringify(like.like)}</strong>):(<strong></strong>)):(like.username))}</strong></p>)\n                                )}\n                            </FlipMove>\n                                                    \n                                             \n                         \n            </div>\n                                              {/*display the comments from the database */}\n            <div className=\"post__comments\">\n                {\n                    comments.map((comment) => (\n                        //here we are accessing the username and text fields of the doc[comment(iterator)] from 'comments' collection of the DataBase\n                        <p><strong>{comment.username}</strong>{comment.text}</p>\n                    ))\n                } \n            </div>\n                                               {/*post the comment to the database*/}\n            {//if the user is logged in then only show the post comment section\n                user &&(\n                <form className=\"post__commentBox\">\n                    <Input style={{color:\"aliceblue\"}} className=\"post__input\" type=\"text\" placeholder=\"Add a comment...\" value={comment} onChange={(e)=> setComment(e.target.value)}/>\n                    <IconButton  disabled={!comment}  variant ='contained' color=\"primary\" type ='submit' onClick={postComment}>\n                            <SendIcon/>\n                    </IconButton>\n                </form>) \n            }\n        </div>\n    )\n}\n\nexport default Post\n","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",["92"],"import React from 'react'\nimport './Widgets.css'\nimport { Input } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport WidgetsChat from './chat/WidgetsChat'\nimport WigetsDummy from './chat/WigetsDummy'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction Widgets() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"widgets\"> \n            <div className=\"widgets__inputBox\">\n                <SearchIcon className=\"widgets__searchIcon\"/>\n                <Input style={{color:\"aliceblue\"}} className=\"widgets__input\" type= \"text\" placeholder=\"Search Texx\" />\n            </div>\n            <div className=\"widgets___widgetContainer\">\n                {/* if user doesnt exists WidgetsChat component wasthrwoing an error hence I Made a fummy component which doesnt have a user object and \n                will be rendered during refresh transitions when momentarily user is unavailable instead of throwing an error  */}\n                {user?(<WidgetsChat/>):(<WigetsDummy/>)}\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["93","94"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction ImageUpload({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n\n                    })\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        \n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                        \n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["95"],"//structure of standard message\nimport React,{ forwardRef } from 'react';//forwardRef keeps track of what is changing\nimport {Card,Avatar,CardContent,Typography} from '@material-ui/core';\nimport './Message.css';\n\n//====================================================================================================\nconst Message =  forwardRef(({},ref) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    const isUser = true;\n    return (\n        //apply message__user class only if isUser is True\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <Card className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className=\"message__avatar\" alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <Typography className=\"message__username\" variant=\"h\">\n                        {isUser ?`${'You'}`: \"message.username\" || 'Unknown user'}\n                    </Typography>\n                </div>\n                <CardContent>\n                    <Typography className=\"message__message\" color=\"#E6E6E6\" variant=\"h5\" component=\"h2\">\n                        {\"message.message\"}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n        )\n    \n})\n\nexport default Message;","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["96","97","98","99","100","101"],"\n//users in sidebar chat (online/offline)\n\nimport React, { useEffect, useState } from 'react'\nimport './WidgetsChat.css'\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {ButtonBase} from '@material-ui/core';\nimport {BrowserRouter, Link} from 'react-router-dom';\nimport {DataBase} from '../firebase'\nimport firebase from 'firebase/app';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { actionTypes } from '../../contexts/reducer';\nimport { Unsubscribe } from '@material-ui/icons';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsChat() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [messages, setMessages] = useState([]);\n    const [chats, setChats] = useState([])\n    \n\n    useEffect(() => {\n        //if user is logged out it throws an error hence using try catch\n        try {\n            console.log(\"trying widgetsChat\")\n            \n            console.log(user)\n            //this is not working because the user that is being added to 'users' collection from the App.js signup is not creating a valid document\n            DataBase.collection('users').doc(user.uid).collection('chats').onSnapshot((snapshot)=>(\n                setChats(snapshot.docs.map((doc) => doc.data()))\n               \n            ))\n            console.log(chats)\n     }\n        catch (error) {\n        console.log(error.message+\" coming from widgetsChat getting 'chats'collection \")\n        }\n        \n    }, [user]);\n\n    return (\n//==========================================Online members===========================================================\n        <div className=\"widgetsChat\">\n            <div className=\"widgetsChat__online\">\n                 <p>Online<span><Badge color=\"primary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p>\n                 <div className=\"widgetsChat__onlineMembers\">\n            {\n                chats.map((chat)=>(\n                <BrowserRouter>\n                            <Link to={`/chats/${chat.chat_user_id}`} key={chat.chat_user_id} onClick={   \n                                ()=>{ //dispatch the chat_user_id when the user clicks on the Link, to the global state\n                                      //later used in App.js to render <SendMessage> and pass 'chatId' to SendMessage\n                                          dispatch(\n                                                        {\n                                                        type:actionTypes.SET_CHAT_INPUT,\n                                                        chatId:chat.chat_user_id,\n                                                        chatInput:true,\n                                                        \n                                                        })}}>\n                                    <ButtonBase>\n                                        <Card className={classes.root}>\n                                                <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                                                <div className={classes.details}>\n                                                        <CardContent className={classes.content}>\n                                                            <Typography component=\"p\" variant=\"p\">\n                                                                {chat.chat_username}\n                                                            </Typography>\n                                                            <Typography className={classes.typoStatus} variant=\"caption\">\n                                                                status like I am using texx\n                                                            </Typography>\n                                                        </CardContent>\n                                                </div>\n                                        </Card>\n                                    </ButtonBase>\n                            </Link>\n                </BrowserRouter>\n                \n                ))\n            }\n                 \n                 </div>\n            </div>\n                                                        {/* offline members */}\n            <div className=\"widgetsChat__offline\">\n                 <p>Offline<span><Badge color=\"secondary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p> \n                 <div className=\"widgetsChat__offlineMembers\">\n                 <ButtonBase>\n                    <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                 </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WidgetsChat\n","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["102","103"],"import React, { useEffect, useState } from 'react'\nimport Post from './Post';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\n\n\nfunction Feed(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//posts array\nconst [posts, setPosts] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setPosts(snapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            })\n    },[]);\n    return (\n    <div className=\"feed\">\n            <div className=\"feed__posts\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                posts.map(({id,post})=>(<Post key={post.id} postId={id} username={post.username} user_id={post.user_id} caption={post.caption} imageUrl={post.imageUrl}></Post>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default Feed\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["104","105","106","107","108"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Message from './Message'\nimport './Chat.css'\nimport {DataBase} from '../firebase';\nimport {useStateValue} from '../../contexts/StateProvider';\n\n\n\nfunction Chat() {\n    //set the chat name in the\n    const [chatName,setChatName] = useState('')\n    //get the messages from the database\n    const [messages,setMessages] = useState([])\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const {chatId} = useParams()\n\n\n\n//======================================================GET Messages==========================================\n//everytime chat_user_id (which is basically the doc id inside the chat collection) changes pull the messages for that chat_user_id from the database\nuseEffect(() => {\n    if (user){\n    if (chatId){\n        //here the chat_user_id is taken from the user who posted that particular post to database\n        const unsubscribe = DataBase.collection('users').doc(user.uid).collection('chats').doc(chatId).collection('messages').onSnapshot((snapshot)=>(\n            setMessages(snapshot.data())\n        ))\n    }\n}\n    \n}, [chatId])\n\n\n//=============================================================================================================\n\n    return (                         \n             <div className=\"chat\">\n                <div className=\"chat__header\">\n                This is the beggining of your texx with {}\n                </div>\n                {\n                    messages.map((message)=>(<Message message={message}/>))\n                    \n                }\n             </div> \n\n\n    )\n}\n\nexport default Chat\n","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js",["109","110","111","112","113","114","115","116","117","118","119","120","121","122","123"],"\n//users in sidebar chat (online/offline)\n\nimport React, { useEffect, useState } from 'react'\nimport './WidgetsDummy.css'\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {ButtonBase} from '@material-ui/core';\nimport {Link} from 'react-router-dom';\nimport {DataBase} from '../firebase'\nimport firebase from 'firebase/app';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { Unsubscribe } from '@material-ui/icons';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsDummy() {\n\n    return (\n\n        <div className=\"widgetsChat\">\n            \n        </div>\n    )\n}\n\nexport default WidgetsDummy\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js",["124","125"],"import React, { useState } from 'react'\nimport { Input } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport firebase from 'firebase/app'\nimport {useStateValue} from '../../contexts/StateProvider';\nimport {InsertEmoticon, MicOutlined} from '@material-ui/icons';\nimport {DataBase} from '../firebase';\nimport { useParams } from 'react-router-dom';\nimport './SendMessage.css'\n\nfunction SendMessage(chatId) {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    //set the input \n    const [input, setInput] = useState('');\n  \n//========================================================POST Messages========================================\n\n\n    const sendMessage = () => {\n        if (user){\n            DataBase.collection('users').doc(user.uid).collection('chats').doc(chatId).collection('messages').add(\n                {\n                    text:input,\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n                    author:user.uid,\n                    authorName:user.displayName,\n                    imageUrl:\"\",\n                }\n            )\n            setInput('');\n        }\n    }\n\n//=============================================================================================================\n    return (\n    <div className=\"sendMessage\">\n            <form className=\"chat__inputForm\" onSubmit={(e)=>{e.preventDefault()}}>\n                <InsertEmoticon/>\n                <Input style={{color:\"aliceblue\"}} className=\"sendMessage__input\" value={input} onChange={(e)=>setInput(e.target.value)} type=\"text\"/>\n                <SendIcon onClick={sendMessage} type=\"submit\">Send a message</SendIcon>\n                <MicOutlined/>\n            </form>\n    </div>\n    )\n}\n\nexport default SendMessage\n",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":87,"column":28,"nodeType":"132","endLine":87,"endColumn":56},{"ruleId":"133","severity":1,"message":"134","line":3,"column":36,"nodeType":"135","messageId":"136","endLine":3,"endColumn":46},{"ruleId":"133","severity":1,"message":"137","line":12,"column":8,"nodeType":"135","messageId":"136","endLine":12,"endColumn":19},{"ruleId":"133","severity":1,"message":"138","line":23,"column":20,"nodeType":"135","messageId":"136","endLine":23,"endColumn":28},{"ruleId":"133","severity":1,"message":"139","line":35,"column":12,"nodeType":"135","messageId":"136","endLine":35,"endColumn":25},{"ruleId":"133","severity":1,"message":"140","line":35,"column":26,"nodeType":"135","messageId":"136","endLine":35,"endColumn":42},{"ruleId":"141","severity":1,"message":"142","line":118,"column":3,"nodeType":"143","messageId":"144","endLine":118,"endColumn":18},{"ruleId":"130","severity":1,"message":"145","line":157,"column":11,"nodeType":"143","endLine":157,"endColumn":24,"suggestions":"146"},{"ruleId":"141","severity":1,"message":"142","line":157,"column":11,"nodeType":"143","messageId":"144","endLine":157,"endColumn":24},{"ruleId":"147","severity":1,"message":"148","line":264,"column":36,"nodeType":"149","messageId":"150","endLine":264,"endColumn":38},{"ruleId":"133","severity":1,"message":"138","line":11,"column":20,"nodeType":"135","messageId":"136","endLine":11,"endColumn":28},{"ruleId":"133","severity":1,"message":"134","line":1,"column":24,"nodeType":"135","messageId":"136","endLine":1,"endColumn":34},{"ruleId":"133","severity":1,"message":"138","line":13,"column":20,"nodeType":"135","messageId":"136","endLine":13,"endColumn":28},{"ruleId":"151","severity":1,"message":"152","line":7,"column":30,"nodeType":"153","messageId":"150","endLine":7,"endColumn":32},{"ruleId":"133","severity":1,"message":"154","line":7,"column":22,"nodeType":"135","messageId":"136","endLine":7,"endColumn":30},{"ruleId":"133","severity":1,"message":"155","line":15,"column":8,"nodeType":"135","messageId":"136","endLine":15,"endColumn":16},{"ruleId":"133","severity":1,"message":"156","line":18,"column":10,"nodeType":"135","messageId":"136","endLine":18,"endColumn":21},{"ruleId":"133","severity":1,"message":"157","line":59,"column":12,"nodeType":"135","messageId":"136","endLine":59,"endColumn":20},{"ruleId":"133","severity":1,"message":"158","line":59,"column":22,"nodeType":"135","messageId":"136","endLine":59,"endColumn":33},{"ruleId":"130","severity":1,"message":"159","line":80,"column":8,"nodeType":"143","endLine":80,"endColumn":14,"suggestions":"160"},{"ruleId":"133","severity":1,"message":"161","line":10,"column":9,"nodeType":"135","messageId":"136","endLine":10,"endColumn":13},{"ruleId":"133","severity":1,"message":"138","line":10,"column":16,"nodeType":"135","messageId":"136","endLine":10,"endColumn":24},{"ruleId":"133","severity":1,"message":"162","line":12,"column":12,"nodeType":"135","messageId":"136","endLine":12,"endColumn":20},{"ruleId":"133","severity":1,"message":"163","line":12,"column":21,"nodeType":"135","messageId":"136","endLine":12,"endColumn":32},{"ruleId":"133","severity":1,"message":"138","line":16,"column":20,"nodeType":"135","messageId":"136","endLine":16,"endColumn":28},{"ruleId":"133","severity":1,"message":"164","line":27,"column":15,"nodeType":"135","messageId":"136","endLine":27,"endColumn":26},{"ruleId":"130","severity":1,"message":"165","line":33,"column":4,"nodeType":"143","endLine":33,"endColumn":12,"suggestions":"166"},{"ruleId":"133","severity":1,"message":"167","line":4,"column":17,"nodeType":"135","messageId":"136","endLine":4,"endColumn":26},{"ruleId":"133","severity":1,"message":"168","line":4,"column":28,"nodeType":"135","messageId":"136","endLine":4,"endColumn":36},{"ruleId":"133","severity":1,"message":"169","line":6,"column":8,"nodeType":"135","messageId":"136","endLine":6,"endColumn":13},{"ruleId":"133","severity":1,"message":"154","line":7,"column":22,"nodeType":"135","messageId":"136","endLine":7,"endColumn":30},{"ruleId":"133","severity":1,"message":"170","line":8,"column":8,"nodeType":"135","messageId":"136","endLine":8,"endColumn":12},{"ruleId":"133","severity":1,"message":"171","line":9,"column":8,"nodeType":"135","messageId":"136","endLine":9,"endColumn":19},{"ruleId":"133","severity":1,"message":"172","line":10,"column":8,"nodeType":"135","messageId":"136","endLine":10,"endColumn":18},{"ruleId":"133","severity":1,"message":"173","line":11,"column":8,"nodeType":"135","messageId":"136","endLine":11,"endColumn":14},{"ruleId":"133","severity":1,"message":"174","line":12,"column":9,"nodeType":"135","messageId":"136","endLine":12,"endColumn":19},{"ruleId":"133","severity":1,"message":"175","line":13,"column":9,"nodeType":"135","messageId":"136","endLine":13,"endColumn":13},{"ruleId":"133","severity":1,"message":"176","line":14,"column":9,"nodeType":"135","messageId":"136","endLine":14,"endColumn":17},{"ruleId":"133","severity":1,"message":"155","line":15,"column":8,"nodeType":"135","messageId":"136","endLine":15,"endColumn":16},{"ruleId":"133","severity":1,"message":"177","line":16,"column":9,"nodeType":"135","messageId":"136","endLine":16,"endColumn":22},{"ruleId":"133","severity":1,"message":"156","line":17,"column":10,"nodeType":"135","messageId":"136","endLine":17,"endColumn":21},{"ruleId":"133","severity":1,"message":"178","line":19,"column":7,"nodeType":"135","messageId":"136","endLine":19,"endColumn":16},{"ruleId":"133","severity":1,"message":"179","line":8,"column":10,"nodeType":"135","messageId":"136","endLine":8,"endColumn":19},{"ruleId":"133","severity":1,"message":"138","line":13,"column":20,"nodeType":"135","messageId":"136","endLine":13,"endColumn":28},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"react-hooks/exhaustive-deps","Assignments to the 'userFromLocalStorage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'PublishIcon' is defined but never used.","'dispatch' is assigned a value but never used.","'firstTimeLike' is assigned a value but never used.","'setFirstTimeLike' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'chats_array', 'isPresent', and 'user_id'. Either include them or remove the dependency array. If 'setIsPresent' needs the current value of 'user_id', you can also switch to useReducer instead of useState and read 'user_id' in the reducer.",["182"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'useTheme' is defined but never used.","'firebase' is defined but never used.","'Unsubscribe' is defined but never used.","'messages' is assigned a value but never used.","'setMessages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chats'. Either include it or remove the dependency array.",["183"],"'user' is assigned a value but never used.","'chatName' is assigned a value but never used.","'setChatName' is assigned a value but never used.","'unsubscribe' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["184"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Badge' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'Avatar' is defined but never used.","'ButtonBase' is defined but never used.","'Link' is defined but never used.","'DataBase' is defined but never used.","'useStateValue' is defined but never used.","'useStyles' is assigned a value but never used.","'useParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},"Update the dependencies array to be: [chats, chats_array, isPresent, user, user_id]",{"range":"191","text":"192"},"Update the dependencies array to be: [chats, user]",{"range":"193","text":"194"},"Update the dependencies array to be: [chatId, user]",{"range":"195","text":"196"},[7088,7101],"[chats, chats_array, isPresent, user, user_id]",[2545,2551],"[chats, user]",[1187,1195],"[chatId, user]"]