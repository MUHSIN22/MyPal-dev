[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15"},{"size":730,"mtime":1618412181429,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1617957038337,"results":"18","hashOfConfig":"17"},{"size":8522,"mtime":1618414588460,"results":"19","hashOfConfig":"17"},{"size":5241,"mtime":1618412385482,"results":"20","hashOfConfig":"17"},{"size":1561,"mtime":1618235487784,"results":"21","hashOfConfig":"17"},{"size":951,"mtime":1618337262959,"results":"22","hashOfConfig":"17"},{"size":662,"mtime":1618414688068,"results":"23","hashOfConfig":"17"},{"size":5658,"mtime":1618412126489,"results":"24","hashOfConfig":"17"},{"size":359,"mtime":1617962357642,"results":"25","hashOfConfig":"17"},{"size":1532,"mtime":1618155103187,"results":"26","hashOfConfig":"17"},{"size":12029,"mtime":1618206380966,"results":"27","hashOfConfig":"17"},{"size":1420,"mtime":1618414655170,"results":"28","hashOfConfig":"17"},{"size":1441,"mtime":1618165843821,"results":"29","hashOfConfig":"17"},{"size":365,"mtime":1618414672546,"results":"30","hashOfConfig":"17"},{"size":380,"mtime":1618411552235,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1caugyp",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],["66","67"],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["68"],"/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["69","70"],"/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["71","72"],"/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["73"],"//structure of standard message\nimport React,{ forwardRef } from 'react';//forwardRef keeps track of what is changing\nimport {Card,Avatar,CardContent,Typography} from '@material-ui/core';\nimport './Message.css';\n\n//====================================================================================================\nconst Message =  forwardRef(({},ref) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    const isUser = true;\n    return (\n        //apply message__user class only if isUser is True\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <Card className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className=\"message__avatar\" alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <Typography className=\"message__username\" variant=\"h\">\n                        {isUser ?`${'You'}`: \"message.username\" || 'Unknown user'}\n                    </Typography>\n                </div>\n                <CardContent>\n                    <Typography className=\"message__message\" color=\"#E6E6E6\" variant=\"h5\" component=\"h2\">\n                        {\"message.message\"}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n        )\n    \n})\n\nexport default Message;","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["74","75"],"\n//users in sidebar chat (online/offline)\n\nimport React from 'react'\nimport './WidgetsChat.css'\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {ButtonBase} from '@material-ui/core';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsChat() {\n    const classes = useStyles();\n    const theme = useTheme();\n    return (\n//==========================================Online members===========================================================\n        <div className=\"widgetsChat\">\n            <div className=\"widgetsChat__online\">\n                 <p>Online<span><Badge color=\"primary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p>\n                 <div className=\"widgetsChat__onlineMembers\">\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                                <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                                <div className={classes.details}>\n                                        <CardContent className={classes.content}>\n                                            <Typography component=\"p\" variant=\"p\">\n                                                User\n                                            </Typography>\n                                            <Typography className={classes.typoStatus} variant=\"caption\">\n                                                status\n                                            </Typography>\n                                        </CardContent>\n                                </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                 </div>\n            </div>\n                                                        {/* offline members */}\n            <div className=\"widgetsChat__offline\">\n                 <p>Offline<span><Badge color=\"secondary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p> \n                 <div className=\"widgetsChat__offlineMembers\">\n                 <ButtonBase>\n                    <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                    <ButtonBase>\n                        <Card className={classes.root}>\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                        </Card>\n                    </ButtonBase>\n                 </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WidgetsChat\n","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["76"],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["77"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Message from './Message'\nimport {InsertEmoticon, MicOutlined} from '@material-ui/icons';\nimport './Chat.css'\nimport {DataBase} from '../firebase';\n\nfunction Chat() {\nconst [input, setInput] = useState('')\nconst {chatId} = useParams()\nconst [chatName,setChatName] = useState('')\n\n//everytime roomId changes pull the messages for that roomId from the database\nuseEffect(() => {\n    \n    if (chatId){\n        DataBase.collection('rooms').doc(chatId).onSnapshot((snapshot)=>(\n            setChatName(snapshot.data().name)\n        ))\n    }\n    \n}, [chatId])\n\nconst sendMessage = (e) => {\n    e.preventDefault();\n    //add message to database\n    setInput('')\n}\n    return (                         \n             <div className=\"chat\">\n                <div className=\"chat__header\">\n                This is the beggining of your texx with selected_user\n                </div>\n                <Message/>\n\n                <div className=\"chat__input\">\n                    <InsertEmoticon/>\n                    <form>\n                        <input value={input} onChange={(e)=>setInput(e.target.value)} type=\"text\"/>\n                        <button onClick={sendMessage} type=\"submit\">Send a message</button>\n                    </form>\n                    <MicOutlined/>\n                </div>\n            </div> \n\n\n    )\n}\n\nexport default Chat\n","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":41,"column":10,"nodeType":"84","messageId":"85","endLine":41,"endColumn":12},{"ruleId":"86","severity":1,"message":"87","line":3,"column":36,"nodeType":"88","messageId":"89","endLine":3,"endColumn":46},{"ruleId":"86","severity":1,"message":"90","line":22,"column":20,"nodeType":"88","messageId":"89","endLine":22,"endColumn":28},{"ruleId":"86","severity":1,"message":"87","line":1,"column":24,"nodeType":"88","messageId":"89","endLine":1,"endColumn":34},{"ruleId":"86","severity":1,"message":"91","line":9,"column":9,"nodeType":"88","messageId":"89","endLine":9,"endColumn":20},{"ruleId":"82","severity":1,"message":"83","line":7,"column":30,"nodeType":"84","messageId":"85","endLine":7,"endColumn":32},{"ruleId":"86","severity":1,"message":"92","line":10,"column":8,"nodeType":"88","messageId":"89","endLine":10,"endColumn":17},{"ruleId":"86","severity":1,"message":"93","line":52,"column":11,"nodeType":"88","messageId":"89","endLine":52,"endColumn":16},{"ruleId":"86","severity":1,"message":"90","line":10,"column":16,"nodeType":"88","messageId":"89","endLine":10,"endColumn":24},{"ruleId":"86","severity":1,"message":"94","line":11,"column":8,"nodeType":"88","messageId":"89","endLine":11,"endColumn":16},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'UserContext' is defined but never used.","'CardMedia' is defined but never used.","'theme' is assigned a value but never used.","'chatName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]