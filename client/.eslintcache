[{"/Users/deeptej/Desktop/react/texx/client/src/index.js":"1","/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js":"2","/Users/deeptej/Desktop/react/texx/client/src/components/App.js":"3","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js":"4","/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js":"5","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js":"6","/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js":"7","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js":"8","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js":"9","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js":"10","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js":"11","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js":"12","/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js":"13","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js":"14","/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js":"15","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js":"16","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js":"17","/Users/deeptej/Desktop/react/texx/client/src/components/Event.js":"18","/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js":"19","/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js":"20","/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js":"21","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js":"22","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js":"23","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js":"24","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js":"25","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js":"26","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js":"27","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js":"28","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js":"29","/Users/deeptej/Desktop/react/texx/client/src/components/YourPosts.js":"30","/Users/deeptej/Desktop/react/texx/client/src/components/SwipeTab.js":"31","/Users/deeptej/Desktop/react/texx/client/src/components/YourEvents.js":"32","/Users/deeptej/Desktop/react/texx/client/src/components/EventsMenu.js":"33","/Users/deeptej/Desktop/react/texx/client/src/components/YourBookmarks.js":"34","/Users/deeptej/Desktop/react/texx/client/src/components/AlertDialog.js":"35"},{"size":730,"mtime":1618602690657,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1617957038337,"results":"38","hashOfConfig":"37"},{"size":21805,"mtime":1621598845425,"results":"39","hashOfConfig":"37"},{"size":23538,"mtime":1621950664131,"results":"40","hashOfConfig":"37"},{"size":2045,"mtime":1621273339104,"results":"41","hashOfConfig":"37"},{"size":1000,"mtime":1621365913360,"results":"42","hashOfConfig":"37"},{"size":1161,"mtime":1621276038750,"results":"43","hashOfConfig":"37"},{"size":6655,"mtime":1621538407171,"results":"44","hashOfConfig":"37"},{"size":415,"mtime":1619523406365,"results":"45","hashOfConfig":"37"},{"size":1931,"mtime":1621402612891,"results":"46","hashOfConfig":"37"},{"size":5948,"mtime":1621422192086,"results":"47","hashOfConfig":"37"},{"size":1876,"mtime":1621950392026,"results":"48","hashOfConfig":"37"},{"size":2622,"mtime":1621415089136,"results":"49","hashOfConfig":"37"},{"size":462,"mtime":1619431538338,"results":"50","hashOfConfig":"37"},{"size":639,"mtime":1621193424922,"results":"51","hashOfConfig":"37"},{"size":1106,"mtime":1621262346397,"results":"52","hashOfConfig":"37"},{"size":2378,"mtime":1621415086990,"results":"53","hashOfConfig":"37"},{"size":6139,"mtime":1621949709985,"results":"54","hashOfConfig":"37"},{"size":6523,"mtime":1621505095498,"results":"55","hashOfConfig":"37"},{"size":961,"mtime":1620716950919,"results":"56","hashOfConfig":"37"},{"size":8458,"mtime":1621538287725,"results":"57","hashOfConfig":"37"},{"size":6094,"mtime":1621533553018,"results":"58","hashOfConfig":"37"},{"size":1719,"mtime":1620566280215,"results":"59","hashOfConfig":"37"},{"size":1981,"mtime":1621578509475,"results":"60","hashOfConfig":"37"},{"size":2144,"mtime":1621268466058,"results":"61","hashOfConfig":"37"},{"size":1491,"mtime":1621163863527,"results":"62","hashOfConfig":"37"},{"size":5614,"mtime":1621949679452,"results":"63","hashOfConfig":"37"},{"size":6737,"mtime":1621538376527,"results":"64","hashOfConfig":"37"},{"size":4021,"mtime":1621520453865,"results":"65","hashOfConfig":"37"},{"size":2274,"mtime":1621453248488,"results":"66","hashOfConfig":"37"},{"size":2356,"mtime":1621461899964,"results":"67","hashOfConfig":"37"},{"size":2032,"mtime":1621949588490,"results":"68","hashOfConfig":"37"},{"size":3855,"mtime":1621520412632,"results":"69","hashOfConfig":"37"},{"size":2843,"mtime":1621949612745,"results":"70","hashOfConfig":"37"},{"size":1150,"mtime":1621537914446,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1caugyp",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"74"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"74"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"74"},"/Users/deeptej/Desktop/react/texx/client/src/index.js",[],["166","167"],"/Users/deeptej/Desktop/react/texx/client/src/components/reportWebVitals.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/App.js",["168","169","170","171","172","173","174","175","176","177"],"import React, {useState,useEffect, Suspense,lazy} from 'react';\nimport './App.css';\nimport {auth, DataBase} from './firebase'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Modal from '@material-ui/core/Modal'\nimport { Avatar, Backdrop, Button, Input, Paper } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport Sidebar from './Sidebar';\nimport Widgets from './Widgets';\nimport { BrowserRouter as Router ,Link} from 'react-router-dom'\nimport {Route,Switch} from 'react-router-dom'\nimport Chat from './chat/Chat'\nimport {useStateValue} from '../contexts/StateProvider';\nimport { actionTypes } from '../contexts/reducer';\nimport firebase from 'firebase/app'\nimport SendMessage from './chat/SendMessage'\n//Get material-ui icons\nimport SearchIcon from '@material-ui/icons/Search';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BottomNavigationMobile from './BottomNavigationMobile'\nimport SpeedDial from '@material-ui/lab/SpeedDial';\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport EditIcon from '@material-ui/icons/Edit';\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport EventIcon from '@material-ui/icons/Event';\nimport WidgetsChat from './chat/WidgetsChat'\nimport logo from '../texx_logo.png'\nimport FeedConfessions from './FeedConfessions'\nimport {realtime} from './firebase'\n\n//====================================Modal styles=========================================\nfunction getModalStyle() {\n  const top = 50 ;\n  const left = 50 ;  \n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor:'#2E3336',\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    color:'white'\n  },\n  root: {\n  display: 'flex',\n  objectFit: 'contain',\n  backgroundColor: '#363A3E',\n  padding:'10px',\n  position: 'sticky',\n  zIndex: 100, \n},\nbackdrop: {\n  zIndex: 1,\n  color: '#ffffff',\n},\nspeedDial: {\n  position: 'fixed',\n  bottom: theme.spacing(12),\n  right: theme.spacing(2),\n}\n\n}));\n//========================================================================================================\nfunction App() {\n  //dispatch for the user\n  const [{},dispatch] = useStateValue();\n  const classes = useStyles();\n  //modal styles\n  const [modalStyle] = useState(getModalStyle);\n  //initially unless fired dont show the model for sign in\n  const [openSignIn,setOpenSignIn] = useState(false);\n  //initially unless fired dont show the model for sign up\n  const [open,setOpen] = useState(false);\n  //for requiring sign in/sign up to upload\n  const [openRequired,setOpenRequired] = useState(false)\n  //store username of the person who wrote the post\n  const [username,setUsername] = useState('');\n  //store email\n  const [email,setEmail] = useState('');\n  //store password\n  const [password,setPassword] = useState('');\n  //store bio\n  const [bio,setBio] = useState('');\n  //flag to keep track of whether the user has logged in or not (user who's signed in )\n  const [user,setUser] = useState([]);\n  //save userId \n  const [userId,setUserId] = useState(null)\n  //show password for password field\n  const [showPassword,setShowPassword] = useState(false)\n  //open speedDial\n  const [openSpeedDial, setOpenSpeedDial] = useState(false);\n  //user stored in local storage\n  let userFromLocalStorage\n  //lazy loading\n  const Profile = React.lazy(() => import('./Profile'))\n  const Feed = React.lazy(() => import('./Feed'))\n  const Chat = React.lazy(() => import('./chat/Chat'))\n  const CreateEvent = React.lazy(() => import('./CreateEvent'))\n  const CreateConfessions = React.lazy(() => import('./CreateConfessions'))\n  const FeedEvents = React.lazy(() => import('./FeedEvents'))\n  // const FeedConfessions = React.lazy(() => import('./FeedConfessions'))\n  const ImageUploadMobile = React.lazy(() => import('./ImageUploadMobile'))\n  // const WidgetsChat = React.lazy(() => import('./chat/WidgetsChat'))\n  //actions for speedDial\n  const actions = [\n    { icon: <Router><Link><AddPhotoAlternateIcon onClick={()=>window.location.href= '/ImageUploadMobile'}/></Link></Router>, name: 'Post' },\n    { icon: <Router><Link><EventIcon onClick={()=>window.location.href= '/createEvent'}/></Link></Router>, name: 'New event' },\n    { icon: <Router><Link><WhatshotSharpIcon onClick={()=>window.location.href= '/createConfessions'}/></Link></Router>, name: 'Confess' },\n  ];\n\n  //====================================Get the user from the local storage on refresh======================\n  useEffect(()=>{\n    userFromLocalStorage = localStorage.getItem('user')\n    //if there is a user object saved in local storage then set it equal to 'user'\n    if (userFromLocalStorage){\n      //JSON.parse will convert stringify to JSON\n      setUser(JSON.parse(userFromLocalStorage))\n      console.log(JSON.parse(userFromLocalStorage))\n      try {\n        \n        dispatch(\n            {\n            type:actionTypes.SET_USER,\n            user:JSON.parse(userFromLocalStorage)\n            }\n          )\n        \n        \n      }\n    \n    catch (err){\n      alert(err.message)\n    }\n  }\n\n  },[])\n\n//====================================Authorization state listner=========================================\n  useEffect(()=>{\n    //onAuthStateChanged = listnser to changes in authorization state\n    //when user is logged in or logged out or is changed\n    const unsubscribe = auth.onAuthStateChanged((authUser)=>{\n    //if user has logged in \n    if (authUser){\n      console.log(authUser)\n      //capture the user inside the auth state in the 'setuser' variable\n\n      //=============survive the refresh================\n      //you can only store string items in local storage\n\n      localStorage.setItem('user',JSON.stringify(authUser))\n\n\n      setUser(authUser)\n    }\n    // else if user has logged out set user to null\n    else{\n      setUser(null)\n    }\n\n  })\n  //===============Add user status as 'online:true' to database as this component loads=====\n  // user && \n\n  //   realtime.ref('.info/connected').on('value',snapshot=>{\n\n  //       //make user status 'offline  in realtime database if user disconnects\n  //       realtime\n  //       .ref(`/status/${user.uid}`)\n  //       .onDisconnect() // Set up the disconnect hook\n  //       .set('offline') // The value to be set for this key when the client disconnects \n  //       .then(() => {\n  //         //set firestore's user 'online' key to true\n  //         DataBase.collection('users').doc(user.uid).update({\n  //           online:true,\n  //         },console.log(user.uid+\" user offline\"))\n  //       })\n\n  //       //make user status 'online' in realtime database when page component loads \n  //       realtime.ref(`/status/${user.uid}`).set('online');\n  //     })\n\n  return () =>{\n    //perform cleanup before re-firing the useEffect\n    unsubscribe();\n  }\n  //========================================================================================\n\n},[user,username])\n//sign up inside sign in\nconst handleSignUp= () => {\n  setOpen(true)\n  setOpenSignIn(false)\n\n}\n//====================================sign in the user=========================================\n  const signIn = (e) => {\n    e.preventDefault();\n    auth.signInWithEmailAndPassword(email,password)\n    .then((result)=>{\n      dispatch(\n          {\n          type:actionTypes.SET_USER,\n          user:result.user\n          }\n        );\n      localStorage.setItem('user',JSON.stringify(result.user))\n\n    //empty the fields\n    setEmail('')\n    setPassword('')\n\n    })\n    .catch((error) => { alert(error.message)})\n    //close the model\n    setOpenSignIn(false)\n    \n  }\n//====================================sign up the user=========================================\n//bug:requires sign in after sign up\n  const signUp = (e) => {\n    e.preventDefault();\n    auth.createUserWithEmailAndPassword(email,password)\n    //createUserWithEmailAndPassword will create a user object \n    .then(function(authUser){\n        authUser.user.updateProfile({\n        //set displayname attribute of user object to username\n        displayName:username\n      }).then((result)=>{\n          console.log(result+\"result after sign up\")\n          //added the newly created user to our database\n          DataBase.collection('users').doc(authUser.user.uid).set({\n            email:authUser.user.email,\n            displayName:authUser.user.displayName,\n            bio:bio,\n            online:true,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n           })\n          })\n                    })\n    .catch((error)=>{alert(error.message+\"from dispatch signup\")})\n\n    setOpen(false)\n  }\n//===============================================================================================\n  return (\n    <div className=\"app\">\n       \n                                      {/*Modal for sign up*/}\n      <Modal  open={open} onClose={()=>{setOpen(false)}}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              {/* <img  className=\"app__headerImage\" src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\" alt=\"ig-logo\"/>   */}\n            </center>\n            <Input style ={{color:'aliceblue'}} placeholder=\"username\" type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)}/>\n            <Input style ={{color:'aliceblue'}} placeholder=\"email\" type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n            <Input style ={{color:'aliceblue',margin:'10px'}}\n            id=\"standard-adornment-password\"\n            placeholder=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            value={password} onChange={(e) => setPassword(e.target.value)}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={() => \n                    setShowPassword(!showPassword )\n                  }\n                  onMouseDown={(e) => \n                    e.preventDefault()}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n            <Input style ={{color:'aliceblue'}} placeholder=\"Add your biography\" type=\"text\" value={bio} onChange={(e)=>setBio(e.target.value)}/>\n            <Button style ={{color:'aliceblue'}} onClick={signUp}>Sign up</Button>\n          </form>\n        </div>\n      </Modal>\n\n                                        {/*Modal for sign in*/}\n\n                                     {/*if user is not logged in then keep sign in modal open*/}\n                                     {/*if the user chooses sign up option then close the sign in modal*/}\n      <Modal  open={open?false:(!user?true : openSignIn)} onClose={()=>{setOpenSignIn(false)}}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n            <img className=\"app__headerImage\" src={logo} alt=\"texx-logo\"/>\n            </center>\n            <p style={{margin:'10px'}} >Enter your credentials to Log in to texx</p>\n            <Input style ={{color:'aliceblue',margin:'10px'}} placeholder=\"email\" type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n            <Input style ={{color:'aliceblue',margin:'10px'}}\n            id=\"standard-adornment-password\"\n            placeholder=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            value={password} onChange={(e) => setPassword(e.target.value)}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={() => \n                    setShowPassword(!showPassword )\n                  }\n                  onMouseDown={(e) => \n                    e.preventDefault()}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n            <Button style ={{color:'aliceblue',backgroundColor:'#556AB5'}} onClick={signIn}>Sign In</Button>\n            <p style={{margin:'10px'}}>New to texx? Sign up</p>\n            <Button style ={{color:'aliceblue',backgroundColor:'#556AB5'}} onClick={handleSignUp}>Sign up</Button>\n          </form>\n        </div>\n      </Modal>\n\n                                              {/*header*/}\n      <Paper className={classes.root} elevation={8}>\n          <div className=\"app__header\">\n              <Router>\n                <Link to=\"/\" onClick={()=>window.location.href= '/'}><img className=\"app__headerImage\" src={logo} alt=\"texx-logo\"/></Link>\n              </Router>\n\n\n                                              {/*serachbar for mobile view*/}\n            <div className=\"app__searchbarMobile\">\n            <div className=\"app__searchbarMobileInputBox\">\n              <Input style={{color:\"aliceblue\"}} className=\"app__searchbarMobileInput\" type= \"text\" placeholder=\"Search Texx\"/>\n              <SearchIcon style={{color:\"aliceblue\"}}/>\n            </div>\n          </div>\n\n                                        {/*profile section*/}\n              <Router><Link><Avatar className=\"post__avatar\" alt={username} src=\"/static/images/avatar/1.jpg\"  onClick={()=>window.location.href='/profile'} /></Link></Router>\n           \n          </div>\n      </Paper>\n                                      {/*SpeedDial for mobile view*/}\n      <div className=\"app__speedDialMobile\">\n            <Backdrop className={classes.backdrop} open={openSpeedDial} />\n            <SpeedDial\n              ariaLabel=\"SpeedDial tooltip example\"\n              className={classes.speedDial}\n              hidden={false}\n              icon={<SpeedDialIcon openIcon={<EditIcon/>} />}\n              onClose={()=>{setOpenSpeedDial(false)}}\n              onOpen={()=>{setOpenSpeedDial(true)}}\n              open={openSpeedDial}\n            >\n              {actions.map((action) => (\n                <SpeedDialAction\n                  key={action.name}\n                  icon={action.icon}\n                  tooltipTitle={action.name}\n                  tooltipOpen\n                  onClick={()=>{setOpenSpeedDial(true)}}\n                />\n              ))}\n            </SpeedDial>\n      </div>\n\n\n\n\n\n                                               \n                           {/* if user does not exists then reduce the opacity of the body */}\n      <div className={user?'app__body':'app__bodyUserNotLoggedIn' }>\n{/* =================================================REACT ROUTER COMES HERE================================================================================= */}\n\n                <Router>\n                                          {/*sidebar*/}\n                    <Sidebar/>\n                                            {/*switch*/}\n                    <Switch>             \n                        <Route exact path=\"/\">\n                          <div className=\"app__feed\">\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                             <Feed/>\n                            </Suspense>\n                          </div>     \n                        </Route>                                                                                                               \n                        <Route path=\"/chats/:chatId\">\n                          <div className=\"app__chat\">\n                              {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                              <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                                <Chat/>\n                              </Suspense>\n                          </div>\n                          </Route>  \n                        <Route path=\"/profile\">\n                          <div className=\"app__profile\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                                <Profile/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/createEvent\">\n                          <div className=\"app__createEvent\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <CreateEvent/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/createConfessions\">\n                          <div className=\"app__createConfessions\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <CreateConfessions/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/eventsFeed\">\n                          <div className=\"app__eventsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <FeedEvents/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                        <Route path=\"/confessionsFeed\">\n                          <div className=\"app__confessionsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <FeedConfessions/>\n                            </Suspense>\n                          </div>\n                        </Route>\n                        <Route path=\"/ImageUploadMobile\">\n                          <div className=\"app__ImageUploadMobile\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <ImageUploadMobile username={user?.displayName}/>\n                            </Suspense>\n                          </div>\n                        </Route>  \n                        <Route path=\"/chatsFeed\">\n                          <div className=\"app__chatsFeed\" >\n                            {/*this component was taking time for loading and in the meantime 'user' object was momentarily unavailable which was throwing an error to fix that i included lazy loading*/}\n                            <Suspense fallback={<div><CircularProgress disableShrink /></div>}>\n                              <WidgetsChat/>\n                            </Suspense>\n                          </div>\n                        </Route> \n                    </Switch>\n\n                    {/*widgets*/}\n                  <Widgets id={'widget'}/>\n                  {/*Bottom Navigation only applicable to mobile screens*/}\n                  <BottomNavigationMobile/>\n                </Router>\n\n{/* ======================================================================================================================================================= */}\n                                            {/*post upload*/}\n                {/*Added a conditional here because when the user is logged out user.displayName does not exists and react freaks out*/}\n                {/*this can be a bug for short term as we are just showing the Modal when the user is logged out and the missing imageUpload component will be visible*/}\n                {/*but when instead we will show the homepage it wont be a problem*/}\n                {user && <ImageUpload username={user.displayName}/>}\n       \n    </div>\n       \n    </div>\n  );\n}\n\nexport default App;\n","/Users/deeptej/Desktop/react/texx/client/src/components/Post.js",["178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"/Users/deeptej/Desktop/react/texx/client/src/components/Sidebar.js",["204"],"import React from 'react'\n//Get material-ui icons\nimport SidebarOptions from './SidebarOptions'\nimport SearchIcon from '@material-ui/icons/Search';\nimport HomeIcon from '@material-ui/icons/Home';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport EventIcon from '@material-ui/icons/Event';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport {Button} from '@material-ui/core';\nimport './Sidebar.css'\nimport { BrowserRouter as Router,Link} from 'react-router-dom'\n\nfunction Sidebar() {\n    return (\n        <div className=\"sidebar\">\n            {/*pass icons as props to SidebarOptions component*/}\n            {/*keep i captial of Icon to let react know you are passing a component*/}\n            <Link to='/'><SidebarOptions active text=\"Home\" Icon={HomeIcon}/></Link>\n            <SidebarOptions text=\"Explore\" Icon={SearchIcon}/>\n            <Link to='/eventsFeed'><SidebarOptions text=\"Events\" Icon={EventIcon}/></Link>\n            <Link to='/confessionsFeed' onClick={()=>window.location.href='/confessionsFeed'}><SidebarOptions text=\"Confessions\" Icon={WhatshotSharpIcon}/></Link>\n            <SidebarOptions text=\"Notifications\" Icon={NotificationsNoneIcon}/>\n            <SidebarOptions text=\"Messages\" Icon={MailOutlineIcon}/>\n            <SidebarOptions text=\"Bookmarks\" Icon={BookmarkBorderIcon}/>\n            <SidebarOptions text=\"More\" Icon={MoreHorizIcon}/>\n            <Link to='/createEvent' onClick={()=>window.location.href='/createEvent'}><Button variant=\"outlined\"  className=\"sidebar__event\" fullWidth>New event</Button></Link>\n            <Link to='/createConfessions' onClick={()=>window.location.href='/createConfessions'}><Button variant=\"outlined\"  className=\"sidebar__event\" fullWidth>Write an annonymous confession</Button></Link>\n        </div>\n    )\n}\n\nexport default Sidebar\n","/Users/deeptej/Desktop/react/texx/client/src/components/firebase.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/Widgets.js",["205"],"import React from 'react'\nimport './Widgets.css'\nimport { Input } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport WidgetsChat from './chat/WidgetsChat'\nimport WigetsDummy from './chat/WigetsDummy'\nimport {useStateValue} from '../contexts/StateProvider'\n\nfunction Widgets() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n\n    return (\n        <div className=\"widgets\"> \n            <div className=\"widgets__inputBox\">\n                <SearchIcon className=\"widgets__searchIcon\"/>\n                <Input style={{color:\"aliceblue\"}} className=\"widgets__input\" type= \"text\" placeholder=\"Search MyPal\" />\n            </div>\n            <div className=\"widgets___widgetContainer\">\n                {/* if user doesnt exists WidgetsChat component wasthrwoing an error hence I Made a fummy component which doesnt have a user object and \n                will be rendered during refresh transitions when momentarily user is unavailable instead of throwing an error  */}\n                {user?(<WidgetsChat/>):(<WigetsDummy/>)}\n            </div>\n        </div>\n    )\n}\n\nexport default Widgets\n","/Users/deeptej/Desktop/react/texx/client/src/components/ImageUpload.js",["206","207","208"],"import React,{useState,useContext} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUpload.css'\nimport {IconButton, Input, Modal} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport AlertDialog from './AlertDialog';\n\nfunction ImageUpload({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n                            \n\n                    })\n                    setOpenAlert(true)\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUpload\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUpload__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUpload__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n                <AlertDialog text={\"New post is up!\"}  openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n                                                        {/*post upload form */}\n            <div className=\"imageUpload__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                                {/*image input*/}\n                        <input className=\"imageUpload__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                        </label>\n                                                            {/*selected image preview*/}\n                        {image&&(<img className=\"imageUpload__preview\" width=\"20px\" height=\"20px\" src={URL.createObjectURL(image)}/>)}\n                                                             {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUpload__caption\" type=\"text\" placeholder=\"Enter a caption for the new post...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <IconButton className=\"imageUpload___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            <SendIcon/>\n                        </IconButton>\n                </form>\n           </div>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/SidebarOptions.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Message.js",["209","210","211","212","213","214"],"//structure of standard message\nimport React,{ forwardRef, useState } from 'react';//forwardRef keeps track of what is changing\nimport {Card,Avatar,CardContent,Typography} from '@material-ui/core';\nimport './Message.css';\nimport {useStateValue} from '../../contexts/StateProvider';\n\n\n//====================================================================================================\n//whenver you are using forwardref first argumnet is the props from the parent component and second parameter is the ref \n//that ref parameter is then assigned to one of the elements of the given function\nconst Message = ({message}) => {\n    //boolean isUser to check whether the user is same as the one logged in \n    // const isUser = username === message.username \n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const [isUser, setIsUser] = useState(user.uid === message.author);\n    // if (user){\n    // setIsUser(user.uid === message.author)\n    // }\n    return (\n        //apply message__user class only if isUser is True\n        <div className={`message ${isUser && 'message__user'}`}>\n            {/*if isUser True then apply 'message_userCard' else apply 'message_guestCard'*/}\n            <div className={isUser ? 'message_userCard': 'message_guestCard' }>\n                <div className=\"message__header\">\n                    <Avatar className=\"message__avatar\" alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                    <p className=\"message__username\" variant=\"h\">\n                        {isUser ? 'You': message.authorName || 'Unknown user'}\n                    </p>\n                </div>\n                <div>\n                    <p className=\"message__message\" color=\"#E6E6E6\" variant=\"h5\" component=\"h2\">\n                        {message.text}\n                    </p>\n                </div>\n            </div>\n        </div>\n        )\n    \n}\n\nexport default Message;","/Users/deeptej/Desktop/react/texx/client/src/components/chat/WidgetsChat.js",["215","216","217","218","219","220"],"\n//users in sidebar chat (online/offline)\n\nimport React, { useEffect, useState } from 'react'\nimport './WidgetsChat.css'\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles} from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport {ButtonBase} from '@material-ui/core';\nimport {BrowserRouter, Link} from 'react-router-dom';\nimport {DataBase} from '../firebase'\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { actionTypes } from '../../contexts/reducer';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flex:1,\n    display: 'flex',\n    minWidth:  314,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'2px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsChat() {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [messages, setMessages] = useState([]);\n    const [chats, setChats] = useState([])\n    \n\n    useEffect(() => {\n        //if user is logged out it throws an error hence using try catch\n        try {\n            console.log(\"trying widgetsChat\")\n            DataBase.collection('users').doc(user.uid).collection('chats').onSnapshot((snapshot)=>(\n                setChats(snapshot.docs.map((doc) => doc.data()))\n                \n               \n            ))\n            console.log(chats)\n     }\n        catch (error) {\n        console.log(error.message+\" coming from widgetsChat getting 'chats'collection \")\n        }\n        \n    }, [user]);\n\n    return (\n//==========================================Online members===========================================================\n        <div className=\"widgetsChat\">\n            <div className=\"widgetsChat__online\">\n                 <p className=\"widgetsChat__headerTitle\">Online<span><Badge color=\"primary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p>\n                 {/* <div className=\"widgetsChat__onlineMembers\"> */}\n            {\n                chats.map((chat)=>(\n                    <Link to={`/chats/${chat.chat_user_id}`} key={chat.chat_user_id}>\n                            <div className=\"widgetsChat__onlineBox\">\n                                <ButtonBase>\n                                                <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                                                    <Badge\n                                                        overlap=\"circle\"\n                                                        anchorOrigin={{\n                                                        vertical: 'bottom',\n                                                        horizontal: 'right',\n                                                        }}\n                                                       \n                                                    ></Badge>\n                                                <div className={classes.details}>\n                                                        <CardContent className={classes.content}>\n                                                            <Typography component=\"p\" variant=\"p\">\n                                                                {chat.chat_username}\n                                                            </Typography>\n                                                            <Typography className={classes.typoStatus} variant=\"caption\">\n                                                                status like I am using texx\n                                                            </Typography>\n                                                        </CardContent>\n                                                </div>\n                                </ButtonBase>\n                            </div>\n                    </Link>\n                \n                ))\n            }\n                 \n                 </div>\n            {/* </div> */}\n                                                        {/* offline members */}\n            <div className=\"widgetsChat__offline\">\n                 <p className=\"widgetsChat__headerTitle\">Offline<span><Badge color=\"secondary\" overlap=\"circle\"  variant=\"dot\"></Badge></span></p> \n                 <div className=\"widgetsChat__offlineMembers\">\n                 {/* <div className=\"widgetsChat__onlineBox\">\n                            <Avatar className={classes.avatar} alt={'d'} src=\"/static/images/avatar/1.jpg\"></Avatar>\n                            <div className={classes.details}>\n                                    <CardContent className={classes.content}>\n                                        <Typography component=\"p\" variant=\"p\">\n                                            User\n                                        </Typography>\n                                        <Typography className={classes.typoStatus} variant=\"caption\">\n                                            status\n                                        </Typography>\n                                    </CardContent>\n                            </div>\n                     </div> */}\n                 </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WidgetsChat\n","/Users/deeptej/Desktop/react/texx/client/src/components/Feed.js",["221"],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/Chat.js",["222","223"],"import React, { useEffect, useState } from 'react'\nimport Message from './Message'\nimport './Chat.css'\nimport {DataBase} from '../firebase';\nimport {useStateValue} from '../../contexts/StateProvider';\nimport { useParams } from 'react-router-dom';\nimport SendMessage from './SendMessage'\n\n\n\nfunction Chat() {\n    //set the chat name in the\n    const [chatName,setChatName] = useState('')\n    //get the messages from the database\n    const [messages,setMessages] = useState([])\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    //get the slug from the url  (remeber that component using useParams should be inside <Router>)\n    const {chatId} = useParams()\n \n\n\n\n//======================================================GET Messages==========================================\n//everytime chat_user_id (which is basically the doc id inside the chat collection) changes pull the messages for that chat_user_id from the database\nuseEffect(() => {\n    if (user){\n    if (chatId){\n        //here the chat_user_id (chatId) is taken from the user (user.uid) who posted that particular post to database\n        const unsubscribe = DataBase.collection('users').doc(user.uid).collection('chats').doc(chatId).collection('messages').orderBy('timestamp','asc').onSnapshot((snapshot)=>(\n            setMessages(snapshot.docs.map((doc) => doc.data()))\n        ))\n            //get the username of the person we are chatting with \n            DataBase.collection('users').doc(user.uid).collection('chats').doc(chatId).onSnapshot((snapshot)=>(\n                setChatName(snapshot.data()) )\n            )\n\n        return () =>{\n            //perform cleanup before re-firing the useEffect\n            unsubscribe();\n          }\n    }\n\n}\n\n    \n}, [chatId])\n\n\n//=============================================================================================================\n\n    return (                         \n             <div className=\"chat\">\n                <div className=\"chat__body\">\n                    <div className=\"chat__header\">\n                        This is the beggining of your texx with  {chatName.chat_username}\n                    </div>\n                    <div className=\"chat__messages\">\n                    {\n                        messages.map((message)=>(<Message message={message}/>))\n                        \n                    }\n                    </div>\n                </div>\n                <div className=\"chat__sendMessage\">\n                    <SendMessage chatId={chatId} />\n                </div>\n             </div> \n             \n\n\n    )\n}\n\nexport default Chat\n","/Users/deeptej/Desktop/react/texx/client/src/contexts/StateProvider.js",[],"/Users/deeptej/Desktop/react/texx/client/src/contexts/reducer.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/chat/WigetsDummy.js",["224"],"\n//users in sidebar chat (online/offline)\n\nimport React from 'react'\nimport './WidgetsDummy.css'\nimport { makeStyles } from '@material-ui/core/styles';\n//==================================================Card Styles==============================================\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minWidth: 250,\n    height:60,\n    background: '#1A1A1A',\n    '&:hover': {\n       background: '#363A3E',\n    },\n    border:'1px grey',\n    marginBottom:'5px',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    Bottom:'20px',\n    fontWeight:300,\n    color: 'white',\n    marginBottom:10,\n  },\n  avatar:{\n    width: theme.spacing(4),\n    height: theme.spacing(4),\n    marginTop:10,\n    marginLeft:10,\n    marginBottom:10,\n  },\n  typoStatus:{\n    color:'grey',\n  }\n\n}));\n//==================================================================================================================\nfunction WidgetsDummy() {\n\n    return (\n\n        <div className=\"widgetsChat\">\n            \n        </div>\n    )\n}\n\nexport default WidgetsDummy\n","/Users/deeptej/Desktop/react/texx/client/src/components/chat/SendMessage.js",["225","226"],"import React, { useState } from 'react'\nimport { Button, IconButton, Input } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport firebase from 'firebase/app'\nimport {useStateValue} from '../../contexts/StateProvider';\nimport {InsertEmoticon, MicOutlined} from '@material-ui/icons';\nimport {DataBase} from '../firebase';\nimport './SendMessage.css'\n\n\nfunction SendMessage({chatId}) {\n    //get the user from the provider  \n    const [{user}, dispatch] = useStateValue();\n    //set the input \n    const [input, setInput] = useState('');\n  \n//========================================================POST Messages========================================\n\n\n    const sendMessage = () => {\n        if (user){\n            //add message to user1's database (sender)\n            DataBase.collection('users').doc(user.uid).collection('chats').doc(chatId).collection('messages').add(\n                {\n                    text:input,\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n                    author:user.uid,\n                    authorName:user.displayName,\n                    imageUrl:\"\",\n                }\n            )\n            //add message to user2's database (sendee)\n            DataBase.collection('users').doc(chatId).collection('chats').doc(user.uid).collection('messages').add(\n                {\n                    text:input,\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n                    author:user.uid,\n                    authorName:user.displayName,\n                    imageUrl:\"\",\n                }\n            )\n\n            setInput('');\n        }\n    }\n\n//=============================================================================================================\n    return (\n    <div className=\"sendMessage\">\n            <form className=\"chat__inputForm\" onSubmit={(e)=>{e.preventDefault()}}>\n                <InsertEmoticon/>\n                <Input style={{color:\"aliceblue\"}} className=\"sendMessage__input\" value={input} onChange={(e)=>setInput(e.target.value)} type=\"text\" placeholder=\"   Send a texx...\"/>\n                <IconButton  variant ='contained' color=\"primary\"disabled={!input} onClick={sendMessage} type=\"submit\"><SendIcon /></IconButton>\n                <MicOutlined/>\n            </form>\n    </div>\n    )\n}\n\nexport default SendMessage\n","/Users/deeptej/Desktop/react/texx/client/src/components/Event.js",["227","228","229","230"],"/Users/deeptej/Desktop/react/texx/client/src/components/Profile.js",["231","232","233","234","235"],"import React, { useEffect, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport './Profile.css'\nimport { Button, Input } from '@material-ui/core';\nimport { auth, DataBase } from './firebase';\nimport firebase from 'firebase/app'\nimport ScrollableTabsButtonAuto from './SwipeTab'\n\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar:{\n        width: theme.spacing(15),\n        height: theme.spacing(15),\n        marginTop:10,\n        marginLeft:10,\n        marginBottom:10,\n        marginRight:10,\n      },\n}));\n\nfunction Profile() {\n//get user from firebase\nconst user = firebase.auth().currentUser\nconst classes = useStyles();\n//store the user fields from the database \nconst [userInfo,setUserInfo] = useState([])\n//store the number of posts inside posts collection\nconst [numberOfPosts, setNumberOfPosts] = useState(0)\n//show or hide edit options\nconst [showEditInput, setShowEditInput] = useState(false);\n//===========================================================================================\nuseEffect(() => {\n    //load the user info from Database on load or when user changes\n    const unsubscribe = DataBase.collection('users').doc(user?.uid).onSnapshot(snapshot=>{\n                                setUserInfo(snapshot.data());\n                                console.log(userInfo)\n    })\n\n                      //   DataBase.collection('users').doc(user.uid).collection('posts').onSnapshot(snapshot=>{\n                      //           setNumberOfPosts(snapshot.size)\n                      //   })\n    return () => {\n        unsubscribe()\n    }\n}, [,user])\n//displayName to edit the existing username\nconst [displayName,setDisplayName] = useState(user?.displayName);\n// edit bio\nconst [bio,setBio] = useState(userInfo?.bio);\nconsole.log(bio)\n\n//==================================================Log out =======================================\nconst logout = () => {\n    //remove the user from the local storage\n    // localStorage.setItem('user','null')\n    auth.signOut().then(() => {\n      console.log(\"sucessfully singned out\")\n    }).catch((error) => {\n      alert(error.message)\n    });\n    }\n//============================================================================================\n    //edit button event\n    const handleEditInputShow = () => {\n        setShowEditInput(true)\n    }\n    //save changes \n    const handleProfileUpdate = () => {\n        //if displayName is changed\n        if (user.displayName !== displayName){\n            user.updateProfile({\n            displayName: displayName,\n          }).then(function(result) {\n            console.log(result)\n          }).catch(function(err) {\n            alert(err.message)\n          });\n        }\n        //if bio is changed\n        else if (bio !== userInfo?.bio){\n            DataBase.collection('users').doc(user.uid).set({\n                bio:bio\n            })\n        }\n    //close edit mode\n    setShowEditInput(false)\n    }\n    return (\n        <div className=\"profile\">\n                <Card className=\"profile__card\" elevation={1}>\n                    <div className=\"profile__header\">\n                        <div className=\"profile__headerTop\">\n                                <Avatar className={classes.avatar} alt={'username'} src=\"/static/images/avatar/1.jpg\" ></Avatar>\n                                <div className=\"profle__headerInfo\">\n                                    {/*if show edit input is true then show the input elements for edit else show normal elements*/}\n                                                {/*username*/}\n                                    {!showEditInput &&<Typography><b>{user?.displayName}</b></Typography>}\n                                                {/*username edit input box*/}\n                                    {showEditInput && <Input value={displayName} onChange={(e)=>{setDisplayName(e.target.value)}}/>}\n                                    <Typography>{`Joined on ${user?.metadata.creationTime.slice(0,17)}`}</Typography>\n                                </div>\n                            <IconButton aria-label=\"settings\">\n                                <MoreVertIcon />\n                            </IconButton>\n                        </div>\n                                              {/*Edit button*/}\n                        <center className=\"profile__headerEditButton\">\n                            {!showEditInput &&<Button onClick={handleEditInputShow}>Edit Profile</Button>}\n                                                {/*save changes button*/}\n                            <div className=\"profile__headerSaveButton\">\n                                {showEditInput && <Button id=\"saveButton\" variant=\"outlined\" color=\"primary\" onClick={handleProfileUpdate}>Save changes</Button>}\n                                {showEditInput && <Button id=\"discardButton\" color=\"primary\" onClick={()=>{setShowEditInput(false)}}>Discard changes</Button>}\n                            </div>\n                        </center>\n                        <div className=\"profile__headerTypography\">\n                                                {/*user bio*/}\n                            {!showEditInput && <Typography>{userInfo?.bio}</Typography>}\n                                                {/*user bio edit*/}\n                            {showEditInput && <Input value={bio} onChange={(e)=>{setBio(e.target.value)}}/>}\n                            <Typography>Interests</Typography>\n                        </div>\n\n                                            {/*log out button*/}\n                        <Button className=\"profile__logoutButton\" onClick={logout}>Log out</Button>\n                    </div>\n                    <div className=\"profile__footer\">\n                           <ScrollableTabsButtonAuto/>\n                    </div>\n                    </Card>\n        </div>\n    )\n}\n\nexport default Profile\n","/Users/deeptej/Desktop/react/texx/client/src/components/AvatarHoverModal.js",["236","237","238"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function SimpleModal({setHoverOpen,hoverOpen}) {\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = useState(getModalStyle);\n\n  return (\n    <div className=\"avatarHoverModal\">\n\n    </div>\n  );\n}\n",["239","240"],"/Users/deeptej/Desktop/react/texx/client/src/components/CreateEvent.js",["241","242"],"import React,{useState} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button, IconButton, Input, Modal,TextField} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateEvent.css'\nimport DateTimeSelect from './DateTimeSelect'\nimport AlertDialog from './AlertDialog'\n\nfunction CreateEvent() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //description\n    const [description,setDescription] = useState('');\n    //image \n    const [imageThumbnail,setImageThumbnail] = useState(false);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //title \n    const [title,setTitle] = useState('')\n    //venue/link\n    const [venue,setVenue] = useState('')\n    //Datetime\n    const [dateTime,setdateTime] = useState(new Date())\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n    console.log(openAlert)\n    //get the name of the first image file you selected (image as a file)\n    const handleImageChange = (e) =>{\n        if (e.target.files[0]){\n            setImageThumbnail(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (imageThumbnail) {\n            \n            //Access the storage and upolad the image in the 'eventThumbnails' folder and give it the name =image.name\n            const uploadTask = storage.ref(`eventThumbnails/${imageThumbnail.name}`).put(imageThumbnail)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'eventThumbnails' folder in the storage\n                    .ref('eventThumbnails')\n                    //get the name of the image file\n                    .child(imageThumbnail.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('events').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set title\n                                title:title,\n                            //set date amd time\n                                dateTime:dateTime,\n                            //set venue\n                                venue:venue,\n                            //set the description attribute to the description user entered   \n                                description:description,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:user.displayName,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set interestedCount to 0 \n                                interestedCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setTitle(\"\")\n                            setDescription(\"\");\n                            setVenue(\"\")\n                            setImageThumbnail(null)\n                            \n                            \n                            \n                            \n\n                    })\n                    setOpenAlert(true)\n\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"createEventWrapper\">\n            <h2 id=\"createEvent_h2\"> CREATE EVENT </h2>\n        <div className=\"createEvent\">\n                                                         \n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"createEvent__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"createEvent__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n                <AlertDialog text={\"Your new event is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n\n                                                        {/*post upload form */}\n            <div className=\"createEvent_formContainer\">\n                <form className=\"createEvent__form\" onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__title\" type=\"text\" placeholder=\"Enter a the name for the event...\" onChange={(e)=>setTitle(e.target.value)} value={title}/>\n                        {/*if image is selected then show selected else show choose an image*/}\n                        <input className=\"createEvent__fileInput\" accept=\"image/*\"  id=\"imageThumbnail-button-file\" type=\"file\" onChange={handleImageChange} />\n                        <label htmlFor=\"imageThumbnail-button-file\" style={{color:\"gray\"}}>\n                            <IconButton color=\"primary\" aria-label=\"upload thumbnail\" component=\"span\">\n                                <AddPhotoAlternateIcon /> \n                            </IconButton>\n                            {imageThumbnail?\"Image selected\":\"Choose a thumnail image\"}\n                        </label>  \n                        {imageThumbnail&&(<img width=\"100px\" height=\"100px\" src={URL.createObjectURL(imageThumbnail)}/>)}\n                        {/*change the 'dateTime' from the <DateTimeSelect/> component*/}\n                        <DateTimeSelect changeDate={dateTime => setdateTime(dateTime)} dateTime={dateTime}/>\n                        <TextField placeholder=\"Enter a decription...\" className = \"createEvent__textarea\" onChange={(e)=>setDescription(e.target.value)} value={description}\n                            id=\"outlined-multiline-static\"\n                            label=\"Multiline description\"\n                            multiline\n                            rows={4}\n                            defaultValue=\"Default Value\"\n                            variant=\"outlined\"\n                            />\n                        <Input style={{color:\"aliceblue\"}}  className=\"createEvent__venue\" type=\"text\" placeholder=\"Enter a Venue/Link...\" onChange={(e)=>setVenue(e.target.value)} value={venue}/>\n                        <Button className=\"createEvent___iButton\" disabled = {!imageThumbnail} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>Create the event</Button>\n                </form>\n           </div>\n        </div>\n    </div>\n    )\n}\n\nexport default CreateEvent;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/DateTimeSelect.js",["243","244"],"import React, { useState } from \"react\";\nimport {\n  makeStyles,\n  withStyles,\n  ThemeProvider,\n  createMuiTheme\n} from \"@material-ui/core/styles\";\nimport { KeyboardDateTimePicker } from \"@material-ui/pickers\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport TextField from \"@material-ui/core/TextField\";\n\n\nconst CURRENT_THEME = {\n  background: \"#111D23\",\n  el1: \"#1B262C\",\n  el2: \"#263137\",\n  el3: \"#3C464B\",\n  text: \"#210124\",\n  textInv: \"#F0EDEE\",\n  main: \"#3857c5\",//change color here \n  secondary: \"#4DBBEB\",\n  mainShadow: \"#556AB5\",\n  danger: \"#DB162F\",\n  warning: \"\",\n  font1: `\"Roboto Slab\", \"Times New Roman\", serif`,\n  font2: `\"Roboto light\"`\n};\n\nconst styles = {\n  paper: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: CURRENT_THEME.el3,\n    borderColor: CURRENT_THEME.danger\n  },\n  inputIcons: {\n    padding: 2,\n    color: CURRENT_THEME.textInv\n  },\n  input: {\n    flex: 1,\n    marginLeft: 8,\n    color: CURRENT_THEME.textInv\n  }\n};\n\nconst useStyles = makeStyles(styles);\nconst StyledDateTime = withStyles({\n  \"& .MuiPickersToolbar-toolbar\": {\n    backgroundColor: CURRENT_THEME.textInv\n  },\n  root: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.textInv,\n        \"& .MuiPickersToolbar-toolbar\": {\n          backgroundColor: CURRENT_THEME.textInv\n        }\n      }\n    }\n  }\n})(KeyboardDateTimePicker);\n\nconst CssTextField = withStyles({\n  root: {\n    //all\n    \"& .MuiIconButton-root\": {\n      color: CURRENT_THEME.textInv\n    },\n    // filled\n    \"& .MuiFilledInput-underline\": {\n      \"&:before\": {\n        borderBottomColor: \"transparent\"\n      },\n      \"&:after\": {\n        borderBottomColor: \"transparent\"\n      }\n    },\n    \"& .MuiFilledInput-input\": {\n      color: CURRENT_THEME.textInv\n      // borderRadius: \"50px 50px 0 0\"\n    },\n    \"& .MuiFilledInput-root\": {\n      borderRadius: \"10px 10px 10px 10px\",\n      backgroundColor: CURRENT_THEME.el3,\n      // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n      \"&.Mui-focused\": {\n        borderColor: \"#556AB5\",\n        backgroundColor: CURRENT_THEME.el2,\n        // boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n        boxShadow: `0px 0px 10px 0px ${CURRENT_THEME.main}, 0px 0px 40px 0px ${CURRENT_THEME.main}, 0px 0px 80px 0px ${CURRENT_THEME.main}`\n        // boxShadow: '0px 0px 15px 0px #556AB5, 0px 0px 15px 0px #556AB5'\n      }\n    },\n\n    \"& .MuiInputLabel-formControl\": {\n      color: CURRENT_THEME.textInv\n    }\n    // \"& .MuiOutlinedInput-input\": {\n    //   color: CURRENT_THEME.textInv     \n    // },\n    // \"& .MuiOutlinedInput-root\": {\n    //   \"& fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     // color: \"#1ab5e1\"\n    //   },\n    //   \"& label\": {\n    //     color: CURRENT_THEME.textInv\n    //   },\n    //   \"&:hover fieldset\": {\n    //     borderColor: \"#1ab5e1\"\n    //   },\n    //   \"&.Mui-focused fieldset\": {\n    //     borderColor: \"#1ab5e1\",\n    //     boxShadow: \"0px 0px 15px 0px rgb(26,181,225, 0.5)\"\n    //   }\n    // }\n  }\n})(TextField);\n\nconst materialTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: CURRENT_THEME.main\n    }\n  },\n  overrides: {\n    MuiPickersToolbar: {\n      toolbar: {\n        backgroundColor: CURRENT_THEME.el3\n      }\n    },\n    MuiPickersCalendarHeader: {\n      iconButton: {\n        backgroundColor: \"transparent\",\n        color: CURRENT_THEME.main\n      },\n      dayLabel: {\n        color: CURRENT_THEME.textInv //days in calendar\n      },\n      transitionContainer: {\n        color: CURRENT_THEME.textInv\n      }\n    },\n    MuiPickersBasePicker: {\n      pickerView: {\n        backgroundColor: CURRENT_THEME.background\n      }\n      //   backgroundColor: CURRENT_THEME.el3,\n    },\n    MuiPickersDay: {\n      day: {\n        color: CURRENT_THEME.textInv //days in calendar\n      }\n      //   daySelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n      //   dayDisabled: {\n      //     color: CURRENT_THEME.main, // current day\n      //   },\n      //   current: {\n      //     color: CURRENT_THEME.main,\n      //   },\n    },\n    // MuiButton:{\n    //   textPrimary:{\n    //     color: CURRENT_THEME.main,\n    //   }\n    // },\n\n    MuiDialogActions: {\n      root: {\n        backgroundColor: CURRENT_THEME.background\n      }\n    },\n    MuiPickersClock: {\n      clock: {\n        backgroundColor: CURRENT_THEME.el2\n      }\n      //   pin:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n      // },\n      // MuiPickersClockPointer:{\n      //   pointer:{\n      //     backgroundColor: CURRENT_THEME.main,\n      //   },\n    },\n    MuiPickersClockNumber: {\n      clockNumber: {\n        color: CURRENT_THEME.textInv\n      }\n      //   numberSelected: {\n      //     backgroundColor: CURRENT_THEME.main, //calendar circle\n      //   },\n    }\n    // MuiMuiPickersTime:{\n    //   timeSelected: {\n    //     backgroundColor: CURRENT_THEME.main, //calendar circle\n    //   },\n    // },\n    // MuiPickersModal: {\n    //   dialogAction: {\n    //     color: CURRENT_THEME.main, //no se\n    //     backgroundColor: CURRENT_THEME.el3,\n    //   },\n    // },\n  }\n});\n\nfunction DateTimeSelect(props) {\n  //select the date here with myDate\n  //once date is selected, pass it on to parent component\n  const [myDate, setmyDate] = useState();\n\n  return (\n    <ThemeProvider theme={materialTheme}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <div className=\"dateTimeSelect\">\n          <KeyboardDateTimePicker\n            format={'dd-MMM-yyyy:KK:mm a'}\n            label=\"Choose date and time for event\"\n            inputVariant=\"filled\"\n            helperText=\"\"\n            TextFieldComponent={CssTextField}\n            size=\"small\"\n            value={myDate}\n            onChange={setmyDate}\n            //change the 'dateTime' state of the parent from the child\n            onClick={props.changeDate(myDate)}\n          />\n          </div>\n      </MuiPickersUtilsProvider>\n    </ThemeProvider>\n  );\n}\nexport default DateTimeSelect","/Users/deeptej/Desktop/react/texx/client/src/components/FeedEvents.js",["245"],"import React, { useEffect, useState } from 'react'\nimport Event from './Event';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport './FeedEvents.css'\n\nfunction FeedEvents() {\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//events array\nconst [events, setEvents] = useState([]);\n//====================================Events changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'events' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('events').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and event=doc.data to the fields in the 'event' variable that we defined above\n        console.log(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n        setEvents(snapshot.docs.map(doc =>({id:doc.id,event:doc.data()})))\n            })\n    \n        return \n\n    \n    },[user]);\n    return (\n    <div className=\"feedEvents\">\n            <div className=\"feedEvents__events\"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                events.map(({id,event})=>(<Event key={event.id} eventId={id} dateTime={event.dateTime} venue={event.venue} title={event.title} username={event.username} user_id={event.user_id} description={event.description} imageUrl={event.imageUrl} interestedCount={event.interestedCount}/>))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedEvents\n","/Users/deeptej/Desktop/react/texx/client/src/components/CreateConfessions.js",["246"],"import React,{useState} from 'react';\nimport {DataBase} from './firebase';\nimport firebase from 'firebase';\nimport {Button,TextField} from '@material-ui/core';\nimport {useStateValue} from '../contexts/StateProvider'\nimport './CreateConfessions.css'\nimport AlertDialog from './AlertDialog';\n\nfunction CreateConfessions() {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //store confession\n    const [confession,setConfession] = useState('')\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n    const handlePost = (e) => {\n        DataBase.collection('confessions').add({\n            confession:confession,\n            user_id:user.uid,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        setConfession('')\n        setOpenAlert(true)\n\n    }\n    return (\n        <div className=\"createConfessions\">\n            <AlertDialog text={\"Your new confession is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n                <form className=\"createConfessions__form\">\n                    <h2 id=\"createConfessions_h2\"> Write a Confession </h2>\n                    <TextField className = \"createConfessions__textarea\" onChange={(e)=>setConfession(e.target.value)} value={confession}\n                                    id=\"outlined-multiline-static\"\n                                    label=\"Write a confession...\"\n                                    multiline\n                                    rows={15}\n                                    defaultValue=\"Default Value\"\n                                    variant=\"outlined\"\n                                    />\n                    <Button className=\"createConfessions___iButton\" disabled = {!confession} variant ='contained' color=\"primary\" type ='submit' onClick={handlePost}>Post</Button>\n                </form>\n        </div>\n        \n    )\n}\n\nexport default CreateConfessions;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/BottomNavigationMobile.js",["247","248","249"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport EventIcon from '@material-ui/icons/Event';\nimport CommentRoundedIcon from '@material-ui/icons/CommentRounded';\nimport HomeIcon from '@material-ui/icons/Home';\nimport './BottomNavigationMobile.css'\nimport WhatshotSharpIcon from '@material-ui/icons/WhatshotSharp';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport { Paper } from '@material-ui/core';\nimport {BrowserRouter, Link } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: '#1A1A1A'\n  },\n});\n\nconst navValues = {\n  '/':1,\n  '/confessionsFeed':2,\n  '/eventsFeed':3,\n  '/chatsFeed':4,\n  '/notificationsFeed':5\n}\n\n//BUG:\n// here everytime we change the value using setValue it causes one additional render\nfunction BottomNavigationMobile() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState('Home');\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n    return (\n      <Paper elevation={10}>\n        <div className=\"bottomNavigation\"> \n            <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\n            <BottomNavigationAction component={Link} to ='/' value=\"Home\"  label=\"Home\"  icon={<HomeIcon/>} />\n            <BottomNavigationAction component={Link} to= '/confessionsFeed' value=\"Confessions\" label=\"Confessions\" icon={<WhatshotSharpIcon/>} />\n            <BottomNavigationAction component={Link} to='/eventsFeed' value=\"Events\" label=\"Events\"  icon={<EventIcon/>} />\n            <BottomNavigationAction component={Link} to= '/chatsFeed' value=\"Chats\"  label=\"Chats\"  icon={<CommentRoundedIcon />} />\n            <BottomNavigationAction component={Link} to= '/notificationsFeed' value=\"Notifications\" label=\"Notifications\"  icon={ <NotificationsNoneIcon/>} />\n            </BottomNavigation>\n        </div>\n      </Paper>\n    )\n}\n\nexport default BottomNavigationMobile\n","/Users/deeptej/Desktop/react/texx/client/src/components/FeedConfessions.js",["250"],"import React, { useEffect, useState } from 'react'\nimport Confessions from './Confessions'\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\n\n\nfunction FeedConfessions(){\n\n//get the user from the provider\nconst [{user}, dispatch] = useStateValue();\n//confessions array\nconst [confessions, setConfessions] = useState([]);\n//====================================Post changes listner=========================================\n    useEffect( () => {\n        //onSnapshot = listner to changes in posts \n        //everytime the posts change run this code\n        //grab the collection 'posts' from the database and order 'docs' in the collection by timestamp\n        DataBase.collection('confessions').orderBy('timestamp','desc').onSnapshot(snapshot =>{\n        //Now set the  id=doc.id and post=doc.data to the fields in the 'posts' variable that we defined above\n        setConfessions(snapshot.docs.map(doc =>({id:doc.id,confession:doc.data()})))\n            })\n    },[user]);\n    return (\n    <div className=\"feedConfessions \">\n            <div className=\"feedConfessions__confessions \"> \n                 {\n                //render only those posts by id who are newly added to the database dont render the entire post list  \n                confessions.map(({id,confession})=>(<Confessions  key={id} confessionId={id} confession={confession.confession} />))\n                } \n            </div>    \n    </div>\n    )\n}\n\nexport default FeedConfessions\n","/Users/deeptej/Desktop/react/texx/client/src/components/Confessions.js",["251","252","253"],"/Users/deeptej/Desktop/react/texx/client/src/components/ImageUploadMobile.js",["254","255"],"import React,{useState} from 'react';\nimport {storage,DataBase} from './firebase';\nimport firebase from 'firebase';\nimport './ImageUploadMobile.css'\nimport {Button, IconButton, Input, Modal} from '@material-ui/core';\nimport AddPhotoAlternateIcon from '@material-ui/icons/AddPhotoAlternate';\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport {useStateValue} from '../contexts/StateProvider'\nimport AlertDialog from './AlertDialog';\n\nfunction ImageUploadMobile({username}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //caption\n    const [caption,setCaption] = useState('');\n    //image \n    const [image,setImage] = useState(null);\n    //progress bar\n    const [progress,setProgress] = useState(0); \n    //open the modal \n    const [openProgress,setOpenProgress] = useState(false)\n    //open alert box when a new event is created\n    const [openAlert,setOpenAlert] = useState(false)\n\n\n\n    //get the name of the first image file you selected (image as a file)\n    const handleChange = (e) =>{\n        if (e.target.files[0]){\n            setImage(e.target.files[0]);\n        }\n    }\n    const handleUpload = () =>{\n  //=============================={Upload the image to firebase database}========================\n            if (image) {\n            \n            //Access the storage and upolad the image in the 'images' folder and give it the name =image.name\n            const uploadTask = storage.ref(`images/${image.name}`).put(image)\n        \n            //listen to changes in the state of the upload\n            uploadTask.on(\n                \"state_changed\",\n                //keep track of the progress and give a snapshot each time\n                (snapshot) =>{\n\n                    //a number between 0 to 100 is stored in progress_ to keep track of the progress\n                    const progress_ = Math.round(\n                        (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                    );\n                    setOpenProgress(true)\n                    setProgress(progress_)\n                },\n                //catch the error\n                (error) => {\n                    //because the error is not user friendly just log it to the console\n                    console.log(error)\n                    //show the error message\n                    alert(error.message)\n                }, \n\n//===================={get the uploaded image from the firebase database}========================\n\n                () => {\n                    storage\n                    //access the 'images' folder in the storage\n                    .ref('images')\n                    //get the name of the image file\n                    .child(image.name)\n                    //get the url to download the image\n                    .getDownloadURL()\n                    //add the image to the 'posts' folder of the database\n                    .then((url)=>{\n                        DataBase.collection('posts').add({\n                            //set the attribute to the time stamp of the server which serves the file\n                                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            //set the cation attribute to the cation user entered   \n                                caption:caption,\n                            //set image url attribute to the 'url' we got from the getDownloadURL() method\n                                imageUrl:url,\n                            //get the username as a prop from the 'App.js' file\n                                username:username,\n                            //post the id of the user from 'user' object  \n                                user_id:user.uid,\n                            //initially set likesCount to 0 \n                                likesCount:0\n                            })\n                            //once done set clear the input c\n                            setProgress(0);\n                            setOpenProgress(false)\n                            setCaption(\"\");\n                            setImage(null)\n                            \n\n                    })\n\n                    setOpenAlert(true)\n                }\n\n            )\n    }\n    else{\n        alert(\"No image selected\")\n    }\n}\n\n    return (\n        <div className=\"imageUploadMobile\">\n\n                                                        {/*Modal for progress of upload*/}\n                <Modal  imageUpload__progressModal=\"imageUploadMobile__progressModal\" open={openProgress} onClose={()=>{setOpenProgress(false)}}> \n                                                                        {/*progress bar*/}\n                        <LinearProgress  variant=\"determinate\" className=\"imageUploadMobile__uploadProgress\" value={progress} max=\"100\"/>\n                </Modal>\n\n                <AlertDialog text={\"New post is up!\"} openAlert={openAlert} changeAlert={al=>{setOpenAlert(al)}}/>\n\n                                                        {/*post upload form */}\n            <div className=\"imageUploadMobile__form\">\n                <form onSubmit={(e)=>{e.preventDefault()}}>\n                        {/*input the image and caption from the user*/}\n                                                        {/*image input*/}\n                        <input className=\"imageUploadMobile__fileInput\" accept=\"image/*\" id=\"image-button-file\" type=\"file\" placeholder=\"Choose a file\" onChange={handleChange} />\n                        <label style={{color:'gray'}} htmlFor=\"image-button-file\">\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n                                <AddPhotoAlternateIcon/>\n                            </IconButton>\n                            {image?\"Image selected\":\"Choose a image to post\"}\n                        </label>\n                                                    {/*selected image preview*/}\n                        {image&&(<img className=\"imageUploadMobile__preview\" width=\"80px\" height=\"80px\" src={URL.createObjectURL(image)}/>)}\n                                                        {/*image caption*/}\n                        <Input style={{color:\"aliceblue\"}}  className=\"imageUploadMobile__caption\" type=\"text\" placeholder=\"Enter a caption for the new post...\" onChange={(e)=>setCaption(e.target.value)} value={caption}/>\n                        <Button className=\"imageUploadMobile___iconButton\" disabled = {!image} variant ='contained' color=\"primary\" type ='submit' onClick={handleUpload}>\n                            POST\n                        </Button>\n                </form>\n           </div> \n        </div>\n    )\n}\n\nexport default ImageUploadMobile;\n\n","/Users/deeptej/Desktop/react/texx/client/src/components/PostMenu.js",["256"],"import React from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport firebase from 'firebase/app'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction PostMenu({postId,postUsername,postUserId,postCaption,postImage}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add report collection of the particular post \n        DataBase.collection('posts').doc(postId).collection('Report').doc(postId).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedPostId:postId,\n             reportedPostUsername:postUsername,\n             reportedPostUserId:postUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n      alert(\"Thank you for your concern we are looking into the matter!\")\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add bookmark\n      DataBase.collection('users').doc(user.uid).collection('bookmarksPost').doc(postId).set(\n          {\n           bookmarkPostId:postId,\n           bookmarkPostImage:postImage,\n           bookmarkPostCaption:postCaption,\n           bookmarkPostUsername:postUsername,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n    alert(\"Added to bookmarks\")\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default PostMenu\n","/Users/deeptej/Desktop/react/texx/client/src/components/YourPosts.js",["257","258","259"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { useStateValue } from '../contexts/StateProvider';\nimport { DataBase } from './firebase';\nimport './YourPosts.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: '#3F4347',\n  },\n  gridList:{\n    flex:1,\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: '#363A3E',\n    overflowY: 'scroll', \n    width:'100%',\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n}));\n\nexport default function YourPosts() {\n    const classes = useStyles();\n\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    //posts array\n    const [posts, setPosts] = useState([]);\n//====================================GET user created posts=========================================\n    useEffect( () => {\n        //grab the posts which belong to the logged in user from the db\n        DataBase.collection('posts').where(\"user_id\", \"==\", user.uid).get()\n        .then((querySnapshot) => {\n            setPosts(querySnapshot.docs.map(doc =>({id:doc.id,post:doc.data()})))\n            console.log(posts)\n        })\n        .catch((error) => {\n            console.log(\"Error getting documents: \", error);\n        });\n        \n    },[user]);\n    \n\n  return (\n      <GridList cellHeight={180} className={classes.gridList}>\n            {posts.map((post) => (\n            <GridListTile key={post.id}>\n                <img src={post.post.imageUrl} alt={post.post.caption} />\n                <GridListTileBar\n                title={post.post.caption}\n                actionIcon={\n                    <IconButton aria-label={`info about ${post.post.caption}`} className={classes.icon}>\n                            <InfoIcon />\n                    </IconButton>\n                }\n                />\n            </GridListTile>\n            ))}\n      </GridList>\n  );\n}\n","/Users/deeptej/Desktop/react/texx/client/src/components/SwipeTab.js",[],"/Users/deeptej/Desktop/react/texx/client/src/components/YourEvents.js",["260","261"],"/Users/deeptej/Desktop/react/texx/client/src/components/EventsMenu.js",["262"],"import React from 'react';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {DataBase} from './firebase'\nimport {useStateValue} from '../contexts/StateProvider'\nimport firebase from 'firebase/app'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      zIndex:1000,\n    },\n    paper:{\n      backgroundColor:'#2E3236',\n      color:'aliceblue'\n    },\n    menuElement:{\n      '&:hover': {\n        background: \"#363A3E\",\n     },\n    }\n  }));\n  \nfunction EventsMenu({eventId,eventUsername,eventUserId}) {\n    //get the user from the provider\n    const [{user}, dispatch] = useStateValue();\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n  \n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n  \n    const handleClose=()=>{\n      setOpen(false)\n    };\n\n    const handleReport = (e) => {\n        e.preventDefault();\n        //add report collection of the particular post \n        DataBase.collection('events').doc(eventId).collection('Report').doc(eventId).set(\n            {\n             reportedByUsername:user.displayName,\n             reportedById:user.uid,\n             reportedEventId:eventId,\n             reportedEventUsername:eventUsername,\n             reportedEventUserId:eventUserId,\n             timestamp:firebase.firestore.FieldValue.serverTimestamp()\n            }\n        ) \n      setOpen(false);\n    };\n    const handleBookmark = (e) => {\n      e.preventDefault();\n      //add bookmark\n      DataBase.collection('users').doc(user.uid).collection('bookmarksEvents').doc(eventId).set(\n          {\n           bookmarkEventUserId:eventId,\n           bookmarkEventUsername:eventUsername,\n           timestamp:firebase.firestore.FieldValue.serverTimestamp()\n          }\n      ) \n    setOpen(false);\n  };\n  \n    function handleListKeyDown(event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n  \n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n  \n      prevOpen.current = open;\n    }, [open]);\n    return (\n    <div className={classes.root}>\n          <MoreVertIcon style={{color:'aliceblue'}}  ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}/>\n\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper className={classes.paper}>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem style={{color:'#f54242'}}className={classes.menuElement} onClick={handleReport}>Report</MenuItem>\n                    <MenuItem className={classes.menuElement} onClick={handleBookmark}>Bookmark</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n  );\n}\nexport default EventsMenu\n","/Users/deeptej/Desktop/react/texx/client/src/components/YourBookmarks.js",["263","264","265","266","267","268"],"/Users/deeptej/Desktop/react/texx/client/src/components/AlertDialog.js",["269","270","271"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function AlertDialog({text,openAlert,changeAlert}) {\n  const handleClose = () => {\n    changeAlert(false);\n  };\n\n  return (\n    <div className=\"alertDialog\">\n      <Dialog\n        open={openAlert}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{text}</DialogTitle>\n        {/* <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n                \n          </DialogContentText>\n        </DialogContent> */}\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Cool!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":1,"column":45,"nodeType":"278","messageId":"279","endLine":1,"endColumn":49},{"ruleId":"276","severity":1,"message":"280","line":12,"column":8,"nodeType":"278","messageId":"279","endLine":12,"endColumn":12},{"ruleId":"276","severity":1,"message":"281","line":16,"column":8,"nodeType":"278","messageId":"279","endLine":16,"endColumn":19},{"ruleId":"276","severity":1,"message":"282","line":35,"column":9,"nodeType":"278","messageId":"279","endLine":35,"endColumn":17},{"ruleId":"283","severity":1,"message":"284","line":80,"column":10,"nodeType":"285","messageId":"286","endLine":80,"endColumn":12},{"ruleId":"276","severity":1,"message":"287","line":89,"column":10,"nodeType":"278","messageId":"279","endLine":89,"endColumn":22},{"ruleId":"276","severity":1,"message":"288","line":89,"column":23,"nodeType":"278","messageId":"279","endLine":89,"endColumn":38},{"ruleId":"276","severity":1,"message":"289","line":101,"column":10,"nodeType":"278","messageId":"279","endLine":101,"endColumn":16},{"ruleId":"276","severity":1,"message":"290","line":101,"column":17,"nodeType":"278","messageId":"279","endLine":101,"endColumn":26},{"ruleId":"291","severity":1,"message":"292","line":127,"column":28,"nodeType":"293","endLine":127,"endColumn":56},{"ruleId":"276","severity":1,"message":"294","line":3,"column":36,"nodeType":"278","messageId":"279","endLine":3,"endColumn":46},{"ruleId":"276","severity":1,"message":"295","line":14,"column":8,"nodeType":"278","messageId":"279","endLine":14,"endColumn":16},{"ruleId":"276","severity":1,"message":"296","line":45,"column":20,"nodeType":"278","messageId":"279","endLine":45,"endColumn":28},{"ruleId":"276","severity":1,"message":"297","line":51,"column":12,"nodeType":"278","messageId":"279","endLine":51,"endColumn":17},{"ruleId":"276","severity":1,"message":"298","line":51,"column":19,"nodeType":"278","messageId":"279","endLine":51,"endColumn":27},{"ruleId":"276","severity":1,"message":"299","line":54,"column":12,"nodeType":"278","messageId":"279","endLine":54,"endColumn":27},{"ruleId":"276","severity":1,"message":"300","line":54,"column":29,"nodeType":"278","messageId":"279","endLine":54,"endColumn":47},{"ruleId":"276","severity":1,"message":"301","line":56,"column":12,"nodeType":"278","messageId":"279","endLine":56,"endColumn":25},{"ruleId":"276","severity":1,"message":"302","line":56,"column":26,"nodeType":"278","messageId":"279","endLine":56,"endColumn":42},{"ruleId":"276","severity":1,"message":"303","line":57,"column":12,"nodeType":"278","messageId":"279","endLine":57,"endColumn":21},{"ruleId":"276","severity":1,"message":"304","line":57,"column":22,"nodeType":"278","messageId":"279","endLine":57,"endColumn":34},{"ruleId":"276","severity":1,"message":"305","line":73,"column":12,"nodeType":"278","messageId":"279","endLine":73,"endColumn":22},{"ruleId":"276","severity":1,"message":"306","line":75,"column":12,"nodeType":"278","messageId":"279","endLine":75,"endColumn":17},{"ruleId":"276","severity":1,"message":"307","line":75,"column":18,"nodeType":"278","messageId":"279","endLine":75,"endColumn":26},{"ruleId":"276","severity":1,"message":"308","line":77,"column":12,"nodeType":"278","messageId":"279","endLine":77,"endColumn":21},{"ruleId":"276","severity":1,"message":"309","line":77,"column":22,"nodeType":"278","messageId":"279","endLine":77,"endColumn":34},{"ruleId":"276","severity":1,"message":"310","line":80,"column":12,"nodeType":"278","messageId":"279","endLine":80,"endColumn":15},{"ruleId":"276","severity":1,"message":"311","line":80,"column":16,"nodeType":"278","messageId":"279","endLine":80,"endColumn":22},{"ruleId":"276","severity":1,"message":"312","line":84,"column":11,"nodeType":"278","messageId":"279","endLine":84,"endColumn":16},{"ruleId":"276","severity":1,"message":"313","line":106,"column":11,"nodeType":"278","messageId":"279","endLine":106,"endColumn":32},{"ruleId":"291","severity":1,"message":"314","line":205,"column":3,"nodeType":"315","endLine":205,"endColumn":12,"suggestions":"316"},{"ruleId":"317","severity":1,"message":"318","line":205,"column":3,"nodeType":"315","messageId":"319","endLine":205,"endColumn":12},{"ruleId":"291","severity":1,"message":"320","line":243,"column":11,"nodeType":"315","endLine":243,"endColumn":31,"suggestions":"321"},{"ruleId":"317","severity":1,"message":"318","line":243,"column":11,"nodeType":"315","messageId":"319","endLine":243,"endColumn":31},{"ruleId":"317","severity":1,"message":"318","line":266,"column":3,"nodeType":"315","messageId":"319","endLine":266,"endColumn":18},{"ruleId":"322","severity":1,"message":"323","line":357,"column":49,"nodeType":"324","messageId":"286","endLine":357,"endColumn":51},{"ruleId":"276","severity":1,"message":"325","line":14,"column":27,"nodeType":"278","messageId":"279","endLine":14,"endColumn":33},{"ruleId":"276","severity":1,"message":"296","line":11,"column":20,"nodeType":"278","messageId":"279","endLine":11,"endColumn":28},{"ruleId":"276","severity":1,"message":"294","line":1,"column":24,"nodeType":"278","messageId":"279","endLine":1,"endColumn":34},{"ruleId":"276","severity":1,"message":"296","line":14,"column":20,"nodeType":"278","messageId":"279","endLine":14,"endColumn":28},{"ruleId":"326","severity":1,"message":"327","line":128,"column":34,"nodeType":"328","endLine":128,"endColumn":133},{"ruleId":"276","severity":1,"message":"329","line":2,"column":16,"nodeType":"278","messageId":"279","endLine":2,"endColumn":26},{"ruleId":"276","severity":1,"message":"330","line":3,"column":9,"nodeType":"278","messageId":"279","endLine":3,"endColumn":13},{"ruleId":"276","severity":1,"message":"331","line":3,"column":21,"nodeType":"278","messageId":"279","endLine":3,"endColumn":32},{"ruleId":"276","severity":1,"message":"332","line":3,"column":33,"nodeType":"278","messageId":"279","endLine":3,"endColumn":43},{"ruleId":"276","severity":1,"message":"296","line":15,"column":20,"nodeType":"278","messageId":"279","endLine":15,"endColumn":28},{"ruleId":"276","severity":1,"message":"333","line":16,"column":20,"nodeType":"278","messageId":"279","endLine":16,"endColumn":29},{"ruleId":"276","severity":1,"message":"334","line":12,"column":9,"nodeType":"278","messageId":"279","endLine":12,"endColumn":22},{"ruleId":"276","severity":1,"message":"335","line":15,"column":10,"nodeType":"278","messageId":"279","endLine":15,"endColumn":21},{"ruleId":"276","severity":1,"message":"296","line":55,"column":20,"nodeType":"278","messageId":"279","endLine":55,"endColumn":28},{"ruleId":"276","severity":1,"message":"336","line":57,"column":12,"nodeType":"278","messageId":"279","endLine":57,"endColumn":20},{"ruleId":"276","severity":1,"message":"337","line":57,"column":22,"nodeType":"278","messageId":"279","endLine":57,"endColumn":33},{"ruleId":"291","severity":1,"message":"338","line":76,"column":8,"nodeType":"315","endLine":76,"endColumn":14,"suggestions":"339"},{"ruleId":"276","severity":1,"message":"296","line":9,"column":16,"nodeType":"278","messageId":"279","endLine":9,"endColumn":24},{"ruleId":"276","severity":1,"message":"296","line":17,"column":20,"nodeType":"278","messageId":"279","endLine":17,"endColumn":28},{"ruleId":"291","severity":1,"message":"340","line":47,"column":4,"nodeType":"315","endLine":47,"endColumn":12,"suggestions":"341"},{"ruleId":"276","severity":1,"message":"342","line":8,"column":7,"nodeType":"278","messageId":"279","endLine":8,"endColumn":16},{"ruleId":"276","severity":1,"message":"343","line":2,"column":10,"nodeType":"278","messageId":"279","endLine":2,"endColumn":16},{"ruleId":"276","severity":1,"message":"296","line":13,"column":20,"nodeType":"278","messageId":"279","endLine":13,"endColumn":28},{"ruleId":"276","severity":1,"message":"344","line":11,"column":10,"nodeType":"278","messageId":"279","endLine":11,"endColumn":15},{"ruleId":"276","severity":1,"message":"345","line":12,"column":8,"nodeType":"278","messageId":"279","endLine":12,"endColumn":20},{"ruleId":"276","severity":1,"message":"296","line":36,"column":20,"nodeType":"278","messageId":"279","endLine":36,"endColumn":28},{"ruleId":"291","severity":1,"message":"346","line":74,"column":4,"nodeType":"315","endLine":74,"endColumn":24,"suggestions":"347"},{"ruleId":"276","severity":1,"message":"331","line":4,"column":8,"nodeType":"278","messageId":"279","endLine":4,"endColumn":19},{"ruleId":"276","severity":1,"message":"348","line":48,"column":8,"nodeType":"278","messageId":"279","endLine":48,"endColumn":21},{"ruleId":"276","severity":1,"message":"349","line":48,"column":23,"nodeType":"278","messageId":"279","endLine":48,"endColumn":39},{"ruleId":"291","severity":1,"message":"350","line":65,"column":4,"nodeType":"315","endLine":65,"endColumn":11,"suggestions":"351"},{"ruleId":"317","severity":1,"message":"318","line":65,"column":4,"nodeType":"315","messageId":"319","endLine":65,"endColumn":11},{"ruleId":"276","severity":1,"message":"352","line":3,"column":8,"nodeType":"278","messageId":"279","endLine":3,"endColumn":13},{"ruleId":"276","severity":1,"message":"353","line":32,"column":9,"nodeType":"278","messageId":"279","endLine":32,"endColumn":16},{"ruleId":"276","severity":1,"message":"305","line":34,"column":10,"nodeType":"278","messageId":"279","endLine":34,"endColumn":20},{"ruleId":"272","replacedBy":"354"},{"ruleId":"274","replacedBy":"355"},{"ruleId":"276","severity":1,"message":"296","line":14,"column":20,"nodeType":"278","messageId":"279","endLine":14,"endColumn":28},{"ruleId":"326","severity":1,"message":"327","line":149,"column":43,"nodeType":"328","endLine":149,"endColumn":120},{"ruleId":"276","severity":1,"message":"342","line":49,"column":7,"nodeType":"278","messageId":"279","endLine":49,"endColumn":16},{"ruleId":"276","severity":1,"message":"356","line":50,"column":7,"nodeType":"278","messageId":"279","endLine":50,"endColumn":21},{"ruleId":"276","severity":1,"message":"296","line":10,"column":16,"nodeType":"278","messageId":"279","endLine":10,"endColumn":24},{"ruleId":"276","severity":1,"message":"296","line":11,"column":20,"nodeType":"278","messageId":"279","endLine":11,"endColumn":28},{"ruleId":"276","severity":1,"message":"357","line":1,"column":17,"nodeType":"278","messageId":"279","endLine":1,"endColumn":25},{"ruleId":"276","severity":1,"message":"334","line":12,"column":9,"nodeType":"278","messageId":"279","endLine":12,"endColumn":22},{"ruleId":"276","severity":1,"message":"358","line":20,"column":7,"nodeType":"278","messageId":"279","endLine":20,"endColumn":16},{"ruleId":"276","severity":1,"message":"296","line":10,"column":16,"nodeType":"278","messageId":"279","endLine":10,"endColumn":24},{"ruleId":"276","severity":1,"message":"296","line":13,"column":20,"nodeType":"278","messageId":"279","endLine":13,"endColumn":28},{"ruleId":"291","severity":1,"message":"359","line":64,"column":3,"nodeType":"315","endLine":64,"endColumn":23,"suggestions":"360"},{"ruleId":"317","severity":1,"message":"318","line":64,"column":3,"nodeType":"315","messageId":"319","endLine":64,"endColumn":23},{"ruleId":"276","severity":1,"message":"296","line":13,"column":20,"nodeType":"278","messageId":"279","endLine":13,"endColumn":28},{"ruleId":"326","severity":1,"message":"327","line":130,"column":34,"nodeType":"328","endLine":130,"endColumn":139},{"ruleId":"276","severity":1,"message":"296","line":31,"column":20,"nodeType":"278","messageId":"279","endLine":31,"endColumn":28},{"ruleId":"276","severity":1,"message":"361","line":6,"column":8,"nodeType":"278","messageId":"279","endLine":6,"endColumn":21},{"ruleId":"276","severity":1,"message":"296","line":35,"column":20,"nodeType":"278","messageId":"279","endLine":35,"endColumn":28},{"ruleId":"291","severity":1,"message":"362","line":50,"column":7,"nodeType":"315","endLine":50,"endColumn":13,"suggestions":"363"},{"ruleId":"276","severity":1,"message":"296","line":9,"column":20,"nodeType":"278","messageId":"279","endLine":9,"endColumn":28},{"ruleId":"291","severity":1,"message":"364","line":32,"column":7,"nodeType":"315","endLine":32,"endColumn":13,"suggestions":"365"},{"ruleId":"276","severity":1,"message":"296","line":32,"column":20,"nodeType":"278","messageId":"279","endLine":32,"endColumn":28},{"ruleId":"276","severity":1,"message":"296","line":10,"column":21,"nodeType":"278","messageId":"279","endLine":10,"endColumn":29},{"ruleId":"276","severity":1,"message":"366","line":12,"column":13,"nodeType":"278","messageId":"279","endLine":12,"endColumn":27},{"ruleId":"276","severity":1,"message":"367","line":16,"column":11,"nodeType":"278","messageId":"279","endLine":16,"endColumn":24},{"ruleId":"291","severity":1,"message":"368","line":36,"column":8,"nodeType":"315","endLine":36,"endColumn":15,"suggestions":"369"},{"ruleId":"317","severity":1,"message":"318","line":36,"column":8,"nodeType":"315","messageId":"319","endLine":36,"endColumn":15},{"ruleId":"326","severity":1,"message":"327","line":44,"column":29,"nodeType":"328","endLine":44,"endColumn":64},{"ruleId":"276","severity":1,"message":"357","line":1,"column":17,"nodeType":"278","messageId":"279","endLine":1,"endColumn":25},{"ruleId":"276","severity":1,"message":"370","line":5,"column":8,"nodeType":"278","messageId":"279","endLine":5,"endColumn":21},{"ruleId":"276","severity":1,"message":"371","line":6,"column":8,"nodeType":"278","messageId":"279","endLine":6,"endColumn":25},"no-native-reassign",["372"],"no-negated-in-lhs",["373"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'SendMessage' is defined but never used.","'realtime' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'openRequired' is assigned a value but never used.","'setOpenRequired' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userFromLocalStorage' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'useContext' is defined but never used.","'FlipMove' is defined but never used.","'dispatch' is assigned a value but never used.","'likes' is assigned a value but never used.","'setLikes' is assigned a value but never used.","'favouritesColor' is assigned a value but never used.","'setfavouritesColor' is assigned a value but never used.","'firstTimeLike' is assigned a value but never used.","'setFirstTimeLike' is assigned a value but never used.","'likeColor' is assigned a value but never used.","'setLikeColor' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'liked' is assigned a value but never used.","'setLiked' is assigned a value but never used.","'likedData' is assigned a value but never used.","'setLikedData' is assigned a value but never used.","'uid' is assigned a value but never used.","'setUid' is assigned a value but never used.","'count' is assigned a value but never used.","'handleHoverModalClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'like', 'likeCount', and 'user.uid'. Either include them or remove the dependency array.","ArrayExpression",["374"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","React Hook useEffect has missing dependencies: 'chats_array' and 'user_id'. Either include them or remove the dependency array. If 'setIsPresent' needs the current value of 'user_id', you can also switch to useReducer instead of useState and read 'user_id' in the reducer.",["375"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Router' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'forwardRef' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'setIsUser' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'actionTypes' is defined but never used.","'messages' is assigned a value but never used.","'setMessages' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chats'. Either include it or remove the dependency array.",["376"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["377"],"'useStyles' is assigned a value but never used.","'Button' is defined but never used.","'Paper' is defined but never used.","'MoreVertIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.",["378"],"'numberOfPosts' is assigned a value but never used.","'setNumberOfPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["379"],"'Modal' is defined but never used.","'classes' is assigned a value but never used.",["372"],["373"],"'StyledDateTime' is assigned a value but never used.","'useState' is defined but never used.","'navValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'confessionComments'. Either include it or remove the dependency array.",["380"],"'ListSubheader' is defined but never used.","React Hook useEffect has a missing dependency: 'posts'. Either include it or remove the dependency array.",["381"],"React Hook useEffect has a missing dependency: 'events'. Either include it or remove the dependency array.",["382"],"'eventBookmarks' is assigned a value but never used.","'convertToDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'postBookmarks'. Either include it or remove the dependency array.",["383"],"'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},"Update the dependencies array to be: [like, likeCount, postId, user.uid]",{"range":"404","text":"405"},"Update the dependencies array to be: [postId, chats, user, user_id, chats_array]",{"range":"406","text":"407"},"Update the dependencies array to be: [chats, user]",{"range":"408","text":"409"},"Update the dependencies array to be: [chatId, user]",{"range":"410","text":"411"},"Update the dependencies array to be: [eventId, interested, user.uid]",{"range":"412","text":"413"},"Update the dependencies array to be: [user, userInfo]",{"range":"414","text":"415"},"Update the dependencies array to be: [user, confessionId, confessionComments]",{"range":"416","text":"417"},"Update the dependencies array to be: [posts, user]",{"range":"418","text":"419"},"Update the dependencies array to be: [events, user]",{"range":"420","text":"421"},"Update the dependencies array to be: [postBookmarks, user]",{"range":"422","text":"423"},[8142,8151],"[like, likeCount, postId, user.uid]",[10049,10069],"[postId, chats, user, user_id, chats_array]",[2242,2248],"[chats, user]",[1765,1773],"[chatId, user]",[2874,2894],"[eventId, interested, user.uid]",[2217,2224],"[user, userInfo]",[2829,2849],"[user, confessionId, confessionComments]",[1646,1652],"[posts, user]",[1297,1303],"[events, user]",[1487,1494],"[postBookmarks, user]"]